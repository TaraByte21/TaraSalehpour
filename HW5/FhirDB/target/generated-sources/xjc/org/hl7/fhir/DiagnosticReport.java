//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for DiagnosticReport complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DiagnosticReport">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}DiagnosticReportStatus"/>
 *         &lt;element name="issued" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="performer" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" minOccurs="0"/>
 *         &lt;element name="requestDetail" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="serviceCategory" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;choice>
 *           &lt;element name="diagnosticDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *           &lt;element name="diagnosticPeriod" type="{http://hl7.org/fhir}Period"/>
 *         &lt;/choice>
 *         &lt;element name="specimen" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="result" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="imagingStudy" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="image" type="{http://hl7.org/fhir}DiagnosticReport.Image" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="conclusion" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="codedDiagnosis" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="presentedForm" type="{http://hl7.org/fhir}Attachment" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DiagnosticReport", propOrder = {
    "name",
    "status",
    "issued",
    "subject",
    "performer",
    "identifier",
    "requestDetail",
    "serviceCategory",
    "diagnosticDateTime",
    "diagnosticPeriod",
    "specimen",
    "result",
    "imagingStudy",
    "image",
    "conclusion",
    "codedDiagnosis",
    "presentedForm"
})
@Entity(name = "DiagnosticReport")
@Table(name = "DIAGNOSTICREPORT")
public class DiagnosticReport
    extends Resource
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected CodeableConcept name;
    @XmlElement(required = true)
    protected DiagnosticReportStatus status;
    @XmlElement(required = true)
    protected DateTime issued;
    @XmlElement(required = true)
    protected ResourceReference subject;
    @XmlElement(required = true)
    protected ResourceReference performer;
    protected Identifier identifier;
    protected List<ResourceReference> requestDetail;
    protected CodeableConcept serviceCategory;
    protected DateTime diagnosticDateTime;
    protected Period diagnosticPeriod;
    protected List<ResourceReference> specimen;
    protected List<ResourceReference> result;
    protected List<ResourceReference> imagingStudy;
    protected List<DiagnosticReportImage> image;
    protected org.hl7.fhir.String conclusion;
    protected List<CodeableConcept> codedDiagnosis;
    protected List<Attachment> presentedForm;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__DIAGNOSTICREPORT_HJID")
    public CodeableConcept getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setName(CodeableConcept value) {
        this.name = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link DiagnosticReportStatus }
     *     
     */
    @ManyToOne(targetEntity = DiagnosticReportStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DIAGNOSTICREPORT_HJID")
    public DiagnosticReportStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link DiagnosticReportStatus }
     *     
     */
    public void setStatus(DiagnosticReportStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the issued property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ISSUED_DIAGNOSTICREPORT_HJID")
    public DateTime getIssued() {
        return issued;
    }

    /**
     * Sets the value of the issued property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setIssued(DateTime value) {
        this.issued = value;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DIAGNOSTICREPORT_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the performer property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERFORMER_DIAGNOSTICREPORT_H_0")
    public ResourceReference getPerformer() {
        return performer;
    }

    /**
     * Sets the value of the performer property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPerformer(ResourceReference value) {
        this.performer = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_DIAGNOSTICREPORT__0")
    public Identifier getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setIdentifier(Identifier value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the requestDetail property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestDetail property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestDetail().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REQUESTDETAIL_DIAGNOSTICREPO_0")
    public List<ResourceReference> getRequestDetail() {
        if (requestDetail == null) {
            requestDetail = new ArrayList<ResourceReference>();
        }
        return this.requestDetail;
    }

    /**
     * 
     * 
     */
    public void setRequestDetail(List<ResourceReference> requestDetail) {
        this.requestDetail = requestDetail;
    }

    /**
     * Gets the value of the serviceCategory property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICECATEGORY_DIAGNOSTICRE_0")
    public CodeableConcept getServiceCategory() {
        return serviceCategory;
    }

    /**
     * Sets the value of the serviceCategory property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setServiceCategory(CodeableConcept value) {
        this.serviceCategory = value;
    }

    /**
     * Gets the value of the diagnosticDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICDATETIME_DIAGNOSTI_0")
    public DateTime getDiagnosticDateTime() {
        return diagnosticDateTime;
    }

    /**
     * Sets the value of the diagnosticDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDiagnosticDateTime(DateTime value) {
        this.diagnosticDateTime = value;
    }

    /**
     * Gets the value of the diagnosticPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIAGNOSTICPERIOD_DIAGNOSTICR_0")
    public Period getDiagnosticPeriod() {
        return diagnosticPeriod;
    }

    /**
     * Sets the value of the diagnosticPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setDiagnosticPeriod(Period value) {
        this.diagnosticPeriod = value;
    }

    /**
     * Gets the value of the specimen property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specimen property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecimen().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIMEN_DIAGNOSTICREPORT_HJ_0")
    public List<ResourceReference> getSpecimen() {
        if (specimen == null) {
            specimen = new ArrayList<ResourceReference>();
        }
        return this.specimen;
    }

    /**
     * 
     * 
     */
    public void setSpecimen(List<ResourceReference> specimen) {
        this.specimen = specimen;
    }

    /**
     * Gets the value of the result property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the result property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResult().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESULT__DIAGNOSTICREPORT_HJID")
    public List<ResourceReference> getResult() {
        if (result == null) {
            result = new ArrayList<ResourceReference>();
        }
        return this.result;
    }

    /**
     * 
     * 
     */
    public void setResult(List<ResourceReference> result) {
        this.result = result;
    }

    /**
     * Gets the value of the imagingStudy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the imagingStudy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getImagingStudy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMAGINGSTUDY_DIAGNOSTICREPOR_0")
    public List<ResourceReference> getImagingStudy() {
        if (imagingStudy == null) {
            imagingStudy = new ArrayList<ResourceReference>();
        }
        return this.imagingStudy;
    }

    /**
     * 
     * 
     */
    public void setImagingStudy(List<ResourceReference> imagingStudy) {
        this.imagingStudy = imagingStudy;
    }

    /**
     * Gets the value of the image property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the image property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getImage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DiagnosticReportImage }
     * 
     * 
     */
    @OneToMany(targetEntity = DiagnosticReportImage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMAGE_DIAGNOSTICREPORT_HJID")
    public List<DiagnosticReportImage> getImage() {
        if (image == null) {
            image = new ArrayList<DiagnosticReportImage>();
        }
        return this.image;
    }

    /**
     * 
     * 
     */
    public void setImage(List<DiagnosticReportImage> image) {
        this.image = image;
    }

    /**
     * Gets the value of the conclusion property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCLUSION_DIAGNOSTICREPORT__0")
    public org.hl7.fhir.String getConclusion() {
        return conclusion;
    }

    /**
     * Sets the value of the conclusion property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setConclusion(org.hl7.fhir.String value) {
        this.conclusion = value;
    }

    /**
     * Gets the value of the codedDiagnosis property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the codedDiagnosis property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCodedDiagnosis().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODEDDIAGNOSIS_DIAGNOSTICREP_0")
    public List<CodeableConcept> getCodedDiagnosis() {
        if (codedDiagnosis == null) {
            codedDiagnosis = new ArrayList<CodeableConcept>();
        }
        return this.codedDiagnosis;
    }

    /**
     * 
     * 
     */
    public void setCodedDiagnosis(List<CodeableConcept> codedDiagnosis) {
        this.codedDiagnosis = codedDiagnosis;
    }

    /**
     * Gets the value of the presentedForm property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the presentedForm property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPresentedForm().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Attachment }
     * 
     * 
     */
    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRESENTEDFORM_DIAGNOSTICREPO_0")
    public List<Attachment> getPresentedForm() {
        if (presentedForm == null) {
            presentedForm = new ArrayList<Attachment>();
        }
        return this.presentedForm;
    }

    /**
     * 
     * 
     */
    public void setPresentedForm(List<Attachment> presentedForm) {
        this.presentedForm = presentedForm;
    }

    public DiagnosticReport withName(CodeableConcept value) {
        setName(value);
        return this;
    }

    public DiagnosticReport withStatus(DiagnosticReportStatus value) {
        setStatus(value);
        return this;
    }

    public DiagnosticReport withIssued(DateTime value) {
        setIssued(value);
        return this;
    }

    public DiagnosticReport withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DiagnosticReport withPerformer(ResourceReference value) {
        setPerformer(value);
        return this;
    }

    public DiagnosticReport withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public DiagnosticReport withRequestDetail(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getRequestDetail().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withRequestDetail(Collection<ResourceReference> values) {
        if (values!= null) {
            getRequestDetail().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withRequestDetail(List<ResourceReference> requestDetail) {
        setRequestDetail(requestDetail);
        return this;
    }

    public DiagnosticReport withServiceCategory(CodeableConcept value) {
        setServiceCategory(value);
        return this;
    }

    public DiagnosticReport withDiagnosticDateTime(DateTime value) {
        setDiagnosticDateTime(value);
        return this;
    }

    public DiagnosticReport withDiagnosticPeriod(Period value) {
        setDiagnosticPeriod(value);
        return this;
    }

    public DiagnosticReport withSpecimen(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSpecimen().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withSpecimen(Collection<ResourceReference> values) {
        if (values!= null) {
            getSpecimen().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withSpecimen(List<ResourceReference> specimen) {
        setSpecimen(specimen);
        return this;
    }

    public DiagnosticReport withResult(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getResult().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withResult(Collection<ResourceReference> values) {
        if (values!= null) {
            getResult().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withResult(List<ResourceReference> result) {
        setResult(result);
        return this;
    }

    public DiagnosticReport withImagingStudy(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getImagingStudy().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withImagingStudy(Collection<ResourceReference> values) {
        if (values!= null) {
            getImagingStudy().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withImagingStudy(List<ResourceReference> imagingStudy) {
        setImagingStudy(imagingStudy);
        return this;
    }

    public DiagnosticReport withImage(DiagnosticReportImage... values) {
        if (values!= null) {
            for (DiagnosticReportImage value: values) {
                getImage().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withImage(Collection<DiagnosticReportImage> values) {
        if (values!= null) {
            getImage().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withImage(List<DiagnosticReportImage> image) {
        setImage(image);
        return this;
    }

    public DiagnosticReport withConclusion(org.hl7.fhir.String value) {
        setConclusion(value);
        return this;
    }

    public DiagnosticReport withCodedDiagnosis(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCodedDiagnosis().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withCodedDiagnosis(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCodedDiagnosis().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withCodedDiagnosis(List<CodeableConcept> codedDiagnosis) {
        setCodedDiagnosis(codedDiagnosis);
        return this;
    }

    public DiagnosticReport withPresentedForm(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPresentedForm().add(value);
            }
        }
        return this;
    }

    public DiagnosticReport withPresentedForm(Collection<Attachment> values) {
        if (values!= null) {
            getPresentedForm().addAll(values);
        }
        return this;
    }

    public DiagnosticReport withPresentedForm(List<Attachment> presentedForm) {
        setPresentedForm(presentedForm);
        return this;
    }

    @Override
    public DiagnosticReport withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DiagnosticReport withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DiagnosticReport withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public DiagnosticReport withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public DiagnosticReport withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public DiagnosticReport withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public DiagnosticReport withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DiagnosticReport)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DiagnosticReport that = ((DiagnosticReport) object);
        {
            CodeableConcept lhsName;
            lhsName = this.getName();
            CodeableConcept rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            DiagnosticReportStatus lhsStatus;
            lhsStatus = this.getStatus();
            DiagnosticReportStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            DateTime lhsIssued;
            lhsIssued = this.getIssued();
            DateTime rhsIssued;
            rhsIssued = that.getIssued();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "issued", lhsIssued), LocatorUtils.property(thatLocator, "issued", rhsIssued), lhsIssued, rhsIssued)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsPerformer;
            lhsPerformer = this.getPerformer();
            ResourceReference rhsPerformer;
            rhsPerformer = that.getPerformer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "performer", lhsPerformer), LocatorUtils.property(thatLocator, "performer", rhsPerformer), lhsPerformer, rhsPerformer)) {
                return false;
            }
        }
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsRequestDetail;
            lhsRequestDetail = (((this.requestDetail!= null)&&(!this.requestDetail.isEmpty()))?this.getRequestDetail():null);
            List<ResourceReference> rhsRequestDetail;
            rhsRequestDetail = (((that.requestDetail!= null)&&(!that.requestDetail.isEmpty()))?that.getRequestDetail():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestDetail", lhsRequestDetail), LocatorUtils.property(thatLocator, "requestDetail", rhsRequestDetail), lhsRequestDetail, rhsRequestDetail)) {
                return false;
            }
        }
        {
            CodeableConcept lhsServiceCategory;
            lhsServiceCategory = this.getServiceCategory();
            CodeableConcept rhsServiceCategory;
            rhsServiceCategory = that.getServiceCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceCategory", lhsServiceCategory), LocatorUtils.property(thatLocator, "serviceCategory", rhsServiceCategory), lhsServiceCategory, rhsServiceCategory)) {
                return false;
            }
        }
        {
            DateTime lhsDiagnosticDateTime;
            lhsDiagnosticDateTime = this.getDiagnosticDateTime();
            DateTime rhsDiagnosticDateTime;
            rhsDiagnosticDateTime = that.getDiagnosticDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticDateTime", lhsDiagnosticDateTime), LocatorUtils.property(thatLocator, "diagnosticDateTime", rhsDiagnosticDateTime), lhsDiagnosticDateTime, rhsDiagnosticDateTime)) {
                return false;
            }
        }
        {
            Period lhsDiagnosticPeriod;
            lhsDiagnosticPeriod = this.getDiagnosticPeriod();
            Period rhsDiagnosticPeriod;
            rhsDiagnosticPeriod = that.getDiagnosticPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "diagnosticPeriod", lhsDiagnosticPeriod), LocatorUtils.property(thatLocator, "diagnosticPeriod", rhsDiagnosticPeriod), lhsDiagnosticPeriod, rhsDiagnosticPeriod)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSpecimen;
            lhsSpecimen = (((this.specimen!= null)&&(!this.specimen.isEmpty()))?this.getSpecimen():null);
            List<ResourceReference> rhsSpecimen;
            rhsSpecimen = (((that.specimen!= null)&&(!that.specimen.isEmpty()))?that.getSpecimen():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specimen", lhsSpecimen), LocatorUtils.property(thatLocator, "specimen", rhsSpecimen), lhsSpecimen, rhsSpecimen)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsResult;
            lhsResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            List<ResourceReference> rhsResult;
            rhsResult = (((that.result!= null)&&(!that.result.isEmpty()))?that.getResult():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "result", lhsResult), LocatorUtils.property(thatLocator, "result", rhsResult), lhsResult, rhsResult)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsImagingStudy;
            lhsImagingStudy = (((this.imagingStudy!= null)&&(!this.imagingStudy.isEmpty()))?this.getImagingStudy():null);
            List<ResourceReference> rhsImagingStudy;
            rhsImagingStudy = (((that.imagingStudy!= null)&&(!that.imagingStudy.isEmpty()))?that.getImagingStudy():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "imagingStudy", lhsImagingStudy), LocatorUtils.property(thatLocator, "imagingStudy", rhsImagingStudy), lhsImagingStudy, rhsImagingStudy)) {
                return false;
            }
        }
        {
            List<DiagnosticReportImage> lhsImage;
            lhsImage = (((this.image!= null)&&(!this.image.isEmpty()))?this.getImage():null);
            List<DiagnosticReportImage> rhsImage;
            rhsImage = (((that.image!= null)&&(!that.image.isEmpty()))?that.getImage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "image", lhsImage), LocatorUtils.property(thatLocator, "image", rhsImage), lhsImage, rhsImage)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsConclusion;
            lhsConclusion = this.getConclusion();
            org.hl7.fhir.String rhsConclusion;
            rhsConclusion = that.getConclusion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conclusion", lhsConclusion), LocatorUtils.property(thatLocator, "conclusion", rhsConclusion), lhsConclusion, rhsConclusion)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCodedDiagnosis;
            lhsCodedDiagnosis = (((this.codedDiagnosis!= null)&&(!this.codedDiagnosis.isEmpty()))?this.getCodedDiagnosis():null);
            List<CodeableConcept> rhsCodedDiagnosis;
            rhsCodedDiagnosis = (((that.codedDiagnosis!= null)&&(!that.codedDiagnosis.isEmpty()))?that.getCodedDiagnosis():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "codedDiagnosis", lhsCodedDiagnosis), LocatorUtils.property(thatLocator, "codedDiagnosis", rhsCodedDiagnosis), lhsCodedDiagnosis, rhsCodedDiagnosis)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPresentedForm;
            lhsPresentedForm = (((this.presentedForm!= null)&&(!this.presentedForm.isEmpty()))?this.getPresentedForm():null);
            List<Attachment> rhsPresentedForm;
            rhsPresentedForm = (((that.presentedForm!= null)&&(!that.presentedForm.isEmpty()))?that.getPresentedForm():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "presentedForm", lhsPresentedForm), LocatorUtils.property(thatLocator, "presentedForm", rhsPresentedForm), lhsPresentedForm, rhsPresentedForm)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            DiagnosticReportStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            DateTime theIssued;
            theIssued = this.getIssued();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "issued", theIssued), currentHashCode, theIssued);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference thePerformer;
            thePerformer = this.getPerformer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "performer", thePerformer), currentHashCode, thePerformer);
        }
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            List<ResourceReference> theRequestDetail;
            theRequestDetail = (((this.requestDetail!= null)&&(!this.requestDetail.isEmpty()))?this.getRequestDetail():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestDetail", theRequestDetail), currentHashCode, theRequestDetail);
        }
        {
            CodeableConcept theServiceCategory;
            theServiceCategory = this.getServiceCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceCategory", theServiceCategory), currentHashCode, theServiceCategory);
        }
        {
            DateTime theDiagnosticDateTime;
            theDiagnosticDateTime = this.getDiagnosticDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticDateTime", theDiagnosticDateTime), currentHashCode, theDiagnosticDateTime);
        }
        {
            Period theDiagnosticPeriod;
            theDiagnosticPeriod = this.getDiagnosticPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "diagnosticPeriod", theDiagnosticPeriod), currentHashCode, theDiagnosticPeriod);
        }
        {
            List<ResourceReference> theSpecimen;
            theSpecimen = (((this.specimen!= null)&&(!this.specimen.isEmpty()))?this.getSpecimen():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specimen", theSpecimen), currentHashCode, theSpecimen);
        }
        {
            List<ResourceReference> theResult;
            theResult = (((this.result!= null)&&(!this.result.isEmpty()))?this.getResult():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "result", theResult), currentHashCode, theResult);
        }
        {
            List<ResourceReference> theImagingStudy;
            theImagingStudy = (((this.imagingStudy!= null)&&(!this.imagingStudy.isEmpty()))?this.getImagingStudy():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "imagingStudy", theImagingStudy), currentHashCode, theImagingStudy);
        }
        {
            List<DiagnosticReportImage> theImage;
            theImage = (((this.image!= null)&&(!this.image.isEmpty()))?this.getImage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "image", theImage), currentHashCode, theImage);
        }
        {
            org.hl7.fhir.String theConclusion;
            theConclusion = this.getConclusion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conclusion", theConclusion), currentHashCode, theConclusion);
        }
        {
            List<CodeableConcept> theCodedDiagnosis;
            theCodedDiagnosis = (((this.codedDiagnosis!= null)&&(!this.codedDiagnosis.isEmpty()))?this.getCodedDiagnosis():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "codedDiagnosis", theCodedDiagnosis), currentHashCode, theCodedDiagnosis);
        }
        {
            List<Attachment> thePresentedForm;
            thePresentedForm = (((this.presentedForm!= null)&&(!this.presentedForm.isEmpty()))?this.getPresentedForm():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "presentedForm", thePresentedForm), currentHashCode, thePresentedForm);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
