//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Encounter complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Encounter">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}EncounterState"/>
 *         &lt;element name="class" type="{http://hl7.org/fhir}EncounterClass"/>
 *         &lt;element name="type" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="participant" type="{http://hl7.org/fhir}Encounter.Participant" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="period" type="{http://hl7.org/fhir}Period" minOccurs="0"/>
 *         &lt;element name="length" type="{http://hl7.org/fhir}Duration" minOccurs="0"/>
 *         &lt;element name="reason" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="indication" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="priority" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="hospitalization" type="{http://hl7.org/fhir}Encounter.Hospitalization" minOccurs="0"/>
 *         &lt;element name="location" type="{http://hl7.org/fhir}Encounter.Location" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="serviceProvider" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="partOf" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Encounter", propOrder = {
    "identifier",
    "status",
    "clazz",
    "type",
    "subject",
    "participant",
    "period",
    "length",
    "reason",
    "indication",
    "priority",
    "hospitalization",
    "location",
    "serviceProvider",
    "partOf"
})
@Entity(name = "Encounter")
@Table(name = "ENCOUNTER")
public class Encounter
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    @XmlElement(required = true)
    protected EncounterState status;
    @XmlElement(name = "class", required = true)
    protected EncounterClass clazz;
    protected List<CodeableConcept> type;
    protected ResourceReference subject;
    protected List<EncounterParticipant> participant;
    protected Period period;
    protected Duration length;
    protected CodeableConcept reason;
    protected ResourceReference indication;
    protected CodeableConcept priority;
    protected EncounterHospitalization hospitalization;
    protected List<EncounterLocation> location;
    protected ResourceReference serviceProvider;
    protected ResourceReference partOf;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_ENCOUNTER_HJID")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link EncounterState }
     *     
     */
    @ManyToOne(targetEntity = EncounterState.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_ENCOUNTER_HJID")
    public EncounterState getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link EncounterState }
     *     
     */
    public void setStatus(EncounterState value) {
        this.status = value;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link EncounterClass }
     *     
     */
    @ManyToOne(targetEntity = EncounterClass.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLAZZ_ENCOUNTER_HJID")
    public EncounterClass getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link EncounterClass }
     *     
     */
    public void setClazz(EncounterClass value) {
        this.clazz = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the type property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__ENCOUNTER_HJID")
    public List<CodeableConcept> getType() {
        if (type == null) {
            type = new ArrayList<CodeableConcept>();
        }
        return this.type;
    }

    /**
     * 
     * 
     */
    public void setType(List<CodeableConcept> type) {
        this.type = type;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ENCOUNTER_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the participant property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the participant property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParticipant().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EncounterParticipant }
     * 
     * 
     */
    @OneToMany(targetEntity = EncounterParticipant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTICIPANT_ENCOUNTER_HJID")
    public List<EncounterParticipant> getParticipant() {
        if (participant == null) {
            participant = new ArrayList<EncounterParticipant>();
        }
        return this.participant;
    }

    /**
     * 
     * 
     */
    public void setParticipant(List<EncounterParticipant> participant) {
        this.participant = participant;
    }

    /**
     * Gets the value of the period property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_ENCOUNTER_HJID")
    public Period getPeriod() {
        return period;
    }

    /**
     * Sets the value of the period property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setPeriod(Period value) {
        this.period = value;
    }

    /**
     * Gets the value of the length property.
     * 
     * @return
     *     possible object is
     *     {@link Duration }
     *     
     */
    @ManyToOne(targetEntity = Duration.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LENGTH__ENCOUNTER_HJID")
    public Duration getLength() {
        return length;
    }

    /**
     * Sets the value of the length property.
     * 
     * @param value
     *     allowed object is
     *     {@link Duration }
     *     
     */
    public void setLength(Duration value) {
        this.length = value;
    }

    /**
     * Gets the value of the reason property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_ENCOUNTER_HJID")
    public CodeableConcept getReason() {
        return reason;
    }

    /**
     * Sets the value of the reason property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setReason(CodeableConcept value) {
        this.reason = value;
    }

    /**
     * Gets the value of the indication property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDICATION_ENCOUNTER_HJID")
    public ResourceReference getIndication() {
        return indication;
    }

    /**
     * Sets the value of the indication property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setIndication(ResourceReference value) {
        this.indication = value;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIORITY_ENCOUNTER_HJID")
    public CodeableConcept getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setPriority(CodeableConcept value) {
        this.priority = value;
    }

    /**
     * Gets the value of the hospitalization property.
     * 
     * @return
     *     possible object is
     *     {@link EncounterHospitalization }
     *     
     */
    @ManyToOne(targetEntity = EncounterHospitalization.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HOSPITALIZATION_ENCOUNTER_HJ_0")
    public EncounterHospitalization getHospitalization() {
        return hospitalization;
    }

    /**
     * Sets the value of the hospitalization property.
     * 
     * @param value
     *     allowed object is
     *     {@link EncounterHospitalization }
     *     
     */
    public void setHospitalization(EncounterHospitalization value) {
        this.hospitalization = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the location property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EncounterLocation }
     * 
     * 
     */
    @OneToMany(targetEntity = EncounterLocation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__ENCOUNTER_HJID")
    public List<EncounterLocation> getLocation() {
        if (location == null) {
            location = new ArrayList<EncounterLocation>();
        }
        return this.location;
    }

    /**
     * 
     * 
     */
    public void setLocation(List<EncounterLocation> location) {
        this.location = location;
    }

    /**
     * Gets the value of the serviceProvider property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICEPROVIDER_ENCOUNTER_HJ_0")
    public ResourceReference getServiceProvider() {
        return serviceProvider;
    }

    /**
     * Sets the value of the serviceProvider property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setServiceProvider(ResourceReference value) {
        this.serviceProvider = value;
    }

    /**
     * Gets the value of the partOf property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTOF_ENCOUNTER_HJID")
    public ResourceReference getPartOf() {
        return partOf;
    }

    /**
     * Sets the value of the partOf property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPartOf(ResourceReference value) {
        this.partOf = value;
    }

    public Encounter withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public Encounter withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public Encounter withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public Encounter withStatus(EncounterState value) {
        setStatus(value);
        return this;
    }

    public Encounter withClazz(EncounterClass value) {
        setClazz(value);
        return this;
    }

    public Encounter withType(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getType().add(value);
            }
        }
        return this;
    }

    public Encounter withType(Collection<CodeableConcept> values) {
        if (values!= null) {
            getType().addAll(values);
        }
        return this;
    }

    public Encounter withType(List<CodeableConcept> type) {
        setType(type);
        return this;
    }

    public Encounter withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public Encounter withParticipant(EncounterParticipant... values) {
        if (values!= null) {
            for (EncounterParticipant value: values) {
                getParticipant().add(value);
            }
        }
        return this;
    }

    public Encounter withParticipant(Collection<EncounterParticipant> values) {
        if (values!= null) {
            getParticipant().addAll(values);
        }
        return this;
    }

    public Encounter withParticipant(List<EncounterParticipant> participant) {
        setParticipant(participant);
        return this;
    }

    public Encounter withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public Encounter withLength(Duration value) {
        setLength(value);
        return this;
    }

    public Encounter withReason(CodeableConcept value) {
        setReason(value);
        return this;
    }

    public Encounter withIndication(ResourceReference value) {
        setIndication(value);
        return this;
    }

    public Encounter withPriority(CodeableConcept value) {
        setPriority(value);
        return this;
    }

    public Encounter withHospitalization(EncounterHospitalization value) {
        setHospitalization(value);
        return this;
    }

    public Encounter withLocation(EncounterLocation... values) {
        if (values!= null) {
            for (EncounterLocation value: values) {
                getLocation().add(value);
            }
        }
        return this;
    }

    public Encounter withLocation(Collection<EncounterLocation> values) {
        if (values!= null) {
            getLocation().addAll(values);
        }
        return this;
    }

    public Encounter withLocation(List<EncounterLocation> location) {
        setLocation(location);
        return this;
    }

    public Encounter withServiceProvider(ResourceReference value) {
        setServiceProvider(value);
        return this;
    }

    public Encounter withPartOf(ResourceReference value) {
        setPartOf(value);
        return this;
    }

    @Override
    public Encounter withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Encounter withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Encounter withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Encounter withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Encounter withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Encounter withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Encounter withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Encounter withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Encounter withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Encounter withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Encounter withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Encounter withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Encounter)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Encounter that = ((Encounter) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            EncounterState lhsStatus;
            lhsStatus = this.getStatus();
            EncounterState rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            EncounterClass lhsClazz;
            lhsClazz = this.getClazz();
            EncounterClass rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsType;
            lhsType = (((this.type!= null)&&(!this.type.isEmpty()))?this.getType():null);
            List<CodeableConcept> rhsType;
            rhsType = (((that.type!= null)&&(!that.type.isEmpty()))?that.getType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            List<EncounterParticipant> lhsParticipant;
            lhsParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            List<EncounterParticipant> rhsParticipant;
            rhsParticipant = (((that.participant!= null)&&(!that.participant.isEmpty()))?that.getParticipant():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "participant", lhsParticipant), LocatorUtils.property(thatLocator, "participant", rhsParticipant), lhsParticipant, rhsParticipant)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            Duration lhsLength;
            lhsLength = this.getLength();
            Duration rhsLength;
            rhsLength = that.getLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "length", lhsLength), LocatorUtils.property(thatLocator, "length", rhsLength), lhsLength, rhsLength)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReason;
            lhsReason = this.getReason();
            CodeableConcept rhsReason;
            rhsReason = that.getReason();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            ResourceReference lhsIndication;
            lhsIndication = this.getIndication();
            ResourceReference rhsIndication;
            rhsIndication = that.getIndication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indication", lhsIndication), LocatorUtils.property(thatLocator, "indication", rhsIndication), lhsIndication, rhsIndication)) {
                return false;
            }
        }
        {
            CodeableConcept lhsPriority;
            lhsPriority = this.getPriority();
            CodeableConcept rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority)) {
                return false;
            }
        }
        {
            EncounterHospitalization lhsHospitalization;
            lhsHospitalization = this.getHospitalization();
            EncounterHospitalization rhsHospitalization;
            rhsHospitalization = that.getHospitalization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hospitalization", lhsHospitalization), LocatorUtils.property(thatLocator, "hospitalization", rhsHospitalization), lhsHospitalization, rhsHospitalization)) {
                return false;
            }
        }
        {
            List<EncounterLocation> lhsLocation;
            lhsLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            List<EncounterLocation> rhsLocation;
            rhsLocation = (((that.location!= null)&&(!that.location.isEmpty()))?that.getLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            ResourceReference lhsServiceProvider;
            lhsServiceProvider = this.getServiceProvider();
            ResourceReference rhsServiceProvider;
            rhsServiceProvider = that.getServiceProvider();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "serviceProvider", lhsServiceProvider), LocatorUtils.property(thatLocator, "serviceProvider", rhsServiceProvider), lhsServiceProvider, rhsServiceProvider)) {
                return false;
            }
        }
        {
            ResourceReference lhsPartOf;
            lhsPartOf = this.getPartOf();
            ResourceReference rhsPartOf;
            rhsPartOf = that.getPartOf();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "partOf", lhsPartOf), LocatorUtils.property(thatLocator, "partOf", rhsPartOf), lhsPartOf, rhsPartOf)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            EncounterState theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            EncounterClass theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<CodeableConcept> theType;
            theType = (((this.type!= null)&&(!this.type.isEmpty()))?this.getType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            List<EncounterParticipant> theParticipant;
            theParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "participant", theParticipant), currentHashCode, theParticipant);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            Duration theLength;
            theLength = this.getLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "length", theLength), currentHashCode, theLength);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            ResourceReference theIndication;
            theIndication = this.getIndication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indication", theIndication), currentHashCode, theIndication);
        }
        {
            CodeableConcept thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority);
        }
        {
            EncounterHospitalization theHospitalization;
            theHospitalization = this.getHospitalization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hospitalization", theHospitalization), currentHashCode, theHospitalization);
        }
        {
            List<EncounterLocation> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            ResourceReference theServiceProvider;
            theServiceProvider = this.getServiceProvider();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "serviceProvider", theServiceProvider), currentHashCode, theServiceProvider);
        }
        {
            ResourceReference thePartOf;
            thePartOf = this.getPartOf();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "partOf", thePartOf), currentHashCode, thePartOf);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
