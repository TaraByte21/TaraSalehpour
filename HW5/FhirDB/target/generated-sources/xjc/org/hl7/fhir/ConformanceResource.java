//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
 * 
 * <p>Java class for Conformance.Resource complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance.Resource">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="type" type="{http://hl7.org/fhir}code"/>
 *         &lt;element name="profile" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="operation" type="{http://hl7.org/fhir}Conformance.Operation" maxOccurs="unbounded"/>
 *         &lt;element name="readHistory" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="updateCreate" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="searchInclude" type="{http://hl7.org/fhir}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="searchParam" type="{http://hl7.org/fhir}Conformance.SearchParam" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Resource", propOrder = {
    "type",
    "profile",
    "operation",
    "readHistory",
    "updateCreate",
    "searchInclude",
    "searchParam"
})
@Entity(name = "ConformanceResource")
@Table(name = "CONFORMANCERESOURCE")
public class ConformanceResource
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected Code type;
    protected ResourceReference profile;
    @XmlElement(required = true)
    protected List<ConformanceOperation> operation;
    protected Boolean readHistory;
    protected Boolean updateCreate;
    protected List<org.hl7.fhir.String> searchInclude;
    protected List<ConformanceSearchParam> searchParam;

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__CONFORMANCERESOURCE_HJ_0")
    public Code getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setType(Code value) {
        this.type = value;
    }

    /**
     * Gets the value of the profile property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROFILE_CONFORMANCERESOURCE__0")
    public ResourceReference getProfile() {
        return profile;
    }

    /**
     * Sets the value of the profile property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setProfile(ResourceReference value) {
        this.profile = value;
    }

    /**
     * Gets the value of the operation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the operation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOperation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceOperation }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceOperation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPERATION__CONFORMANCERESOUR_0")
    public List<ConformanceOperation> getOperation() {
        if (operation == null) {
            operation = new ArrayList<ConformanceOperation>();
        }
        return this.operation;
    }

    /**
     * 
     * 
     */
    public void setOperation(List<ConformanceOperation> operation) {
        this.operation = operation;
    }

    /**
     * Gets the value of the readHistory property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "READHISTORY_CONFORMANCERESOU_0")
    public Boolean getReadHistory() {
        return readHistory;
    }

    /**
     * Sets the value of the readHistory property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setReadHistory(Boolean value) {
        this.readHistory = value;
    }

    /**
     * Gets the value of the updateCreate property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UPDATECREATE_CONFORMANCERESO_0")
    public Boolean getUpdateCreate() {
        return updateCreate;
    }

    /**
     * Sets the value of the updateCreate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUpdateCreate(Boolean value) {
        this.updateCreate = value;
    }

    /**
     * Gets the value of the searchInclude property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the searchInclude property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSearchInclude().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link org.hl7.fhir.String }
     * 
     * 
     */
    @OneToMany(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SEARCHINCLUDE_CONFORMANCERES_0")
    public List<org.hl7.fhir.String> getSearchInclude() {
        if (searchInclude == null) {
            searchInclude = new ArrayList<org.hl7.fhir.String>();
        }
        return this.searchInclude;
    }

    /**
     * 
     * 
     */
    public void setSearchInclude(List<org.hl7.fhir.String> searchInclude) {
        this.searchInclude = searchInclude;
    }

    /**
     * Gets the value of the searchParam property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the searchParam property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSearchParam().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceSearchParam }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceSearchParam.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SEARCHPARAM_CONFORMANCERESOU_0")
    public List<ConformanceSearchParam> getSearchParam() {
        if (searchParam == null) {
            searchParam = new ArrayList<ConformanceSearchParam>();
        }
        return this.searchParam;
    }

    /**
     * 
     * 
     */
    public void setSearchParam(List<ConformanceSearchParam> searchParam) {
        this.searchParam = searchParam;
    }

    public ConformanceResource withType(Code value) {
        setType(value);
        return this;
    }

    public ConformanceResource withProfile(ResourceReference value) {
        setProfile(value);
        return this;
    }

    public ConformanceResource withOperation(ConformanceOperation... values) {
        if (values!= null) {
            for (ConformanceOperation value: values) {
                getOperation().add(value);
            }
        }
        return this;
    }

    public ConformanceResource withOperation(Collection<ConformanceOperation> values) {
        if (values!= null) {
            getOperation().addAll(values);
        }
        return this;
    }

    public ConformanceResource withOperation(List<ConformanceOperation> operation) {
        setOperation(operation);
        return this;
    }

    public ConformanceResource withReadHistory(Boolean value) {
        setReadHistory(value);
        return this;
    }

    public ConformanceResource withUpdateCreate(Boolean value) {
        setUpdateCreate(value);
        return this;
    }

    public ConformanceResource withSearchInclude(org.hl7.fhir.String... values) {
        if (values!= null) {
            for (org.hl7.fhir.String value: values) {
                getSearchInclude().add(value);
            }
        }
        return this;
    }

    public ConformanceResource withSearchInclude(Collection<org.hl7.fhir.String> values) {
        if (values!= null) {
            getSearchInclude().addAll(values);
        }
        return this;
    }

    public ConformanceResource withSearchInclude(List<org.hl7.fhir.String> searchInclude) {
        setSearchInclude(searchInclude);
        return this;
    }

    public ConformanceResource withSearchParam(ConformanceSearchParam... values) {
        if (values!= null) {
            for (ConformanceSearchParam value: values) {
                getSearchParam().add(value);
            }
        }
        return this;
    }

    public ConformanceResource withSearchParam(Collection<ConformanceSearchParam> values) {
        if (values!= null) {
            getSearchParam().addAll(values);
        }
        return this;
    }

    public ConformanceResource withSearchParam(List<ConformanceSearchParam> searchParam) {
        setSearchParam(searchParam);
        return this;
    }

    @Override
    public ConformanceResource withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceResource withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceResource withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ConformanceResource withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceResource withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceResource withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ConformanceResource withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceResource)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceResource that = ((ConformanceResource) object);
        {
            Code lhsType;
            lhsType = this.getType();
            Code rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            ResourceReference lhsProfile;
            lhsProfile = this.getProfile();
            ResourceReference rhsProfile;
            rhsProfile = that.getProfile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profile", lhsProfile), LocatorUtils.property(thatLocator, "profile", rhsProfile), lhsProfile, rhsProfile)) {
                return false;
            }
        }
        {
            List<ConformanceOperation> lhsOperation;
            lhsOperation = (((this.operation!= null)&&(!this.operation.isEmpty()))?this.getOperation():null);
            List<ConformanceOperation> rhsOperation;
            rhsOperation = (((that.operation!= null)&&(!that.operation.isEmpty()))?that.getOperation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                return false;
            }
        }
        {
            Boolean lhsReadHistory;
            lhsReadHistory = this.getReadHistory();
            Boolean rhsReadHistory;
            rhsReadHistory = that.getReadHistory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "readHistory", lhsReadHistory), LocatorUtils.property(thatLocator, "readHistory", rhsReadHistory), lhsReadHistory, rhsReadHistory)) {
                return false;
            }
        }
        {
            Boolean lhsUpdateCreate;
            lhsUpdateCreate = this.getUpdateCreate();
            Boolean rhsUpdateCreate;
            rhsUpdateCreate = that.getUpdateCreate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "updateCreate", lhsUpdateCreate), LocatorUtils.property(thatLocator, "updateCreate", rhsUpdateCreate), lhsUpdateCreate, rhsUpdateCreate)) {
                return false;
            }
        }
        {
            List<org.hl7.fhir.String> lhsSearchInclude;
            lhsSearchInclude = (((this.searchInclude!= null)&&(!this.searchInclude.isEmpty()))?this.getSearchInclude():null);
            List<org.hl7.fhir.String> rhsSearchInclude;
            rhsSearchInclude = (((that.searchInclude!= null)&&(!that.searchInclude.isEmpty()))?that.getSearchInclude():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchInclude", lhsSearchInclude), LocatorUtils.property(thatLocator, "searchInclude", rhsSearchInclude), lhsSearchInclude, rhsSearchInclude)) {
                return false;
            }
        }
        {
            List<ConformanceSearchParam> lhsSearchParam;
            lhsSearchParam = (((this.searchParam!= null)&&(!this.searchParam.isEmpty()))?this.getSearchParam():null);
            List<ConformanceSearchParam> rhsSearchParam;
            rhsSearchParam = (((that.searchParam!= null)&&(!that.searchParam.isEmpty()))?that.getSearchParam():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchParam", lhsSearchParam), LocatorUtils.property(thatLocator, "searchParam", rhsSearchParam), lhsSearchParam, rhsSearchParam)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Code theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            ResourceReference theProfile;
            theProfile = this.getProfile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profile", theProfile), currentHashCode, theProfile);
        }
        {
            List<ConformanceOperation> theOperation;
            theOperation = (((this.operation!= null)&&(!this.operation.isEmpty()))?this.getOperation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
        }
        {
            Boolean theReadHistory;
            theReadHistory = this.getReadHistory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "readHistory", theReadHistory), currentHashCode, theReadHistory);
        }
        {
            Boolean theUpdateCreate;
            theUpdateCreate = this.getUpdateCreate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "updateCreate", theUpdateCreate), currentHashCode, theUpdateCreate);
        }
        {
            List<org.hl7.fhir.String> theSearchInclude;
            theSearchInclude = (((this.searchInclude!= null)&&(!this.searchInclude.isEmpty()))?this.getSearchInclude():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchInclude", theSearchInclude), currentHashCode, theSearchInclude);
        }
        {
            List<ConformanceSearchParam> theSearchParam;
            theSearchParam = (((this.searchParam!= null)&&(!this.searchParam.isEmpty()))?this.getSearchParam():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchParam", theSearchParam), currentHashCode, theSearchParam);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
