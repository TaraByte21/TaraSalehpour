//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for MedicationDispense complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MedicationDispense">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}MedicationDispenseStatus" minOccurs="0"/>
 *         &lt;element name="patient" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="dispenser" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="authorizingPrescription" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="dispense" type="{http://hl7.org/fhir}MedicationDispense.Dispense" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="substitution" type="{http://hl7.org/fhir}MedicationDispense.Substitution" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationDispense", propOrder = {
    "identifier",
    "status",
    "patient",
    "dispenser",
    "authorizingPrescription",
    "dispense",
    "substitution"
})
@Entity(name = "MedicationDispense")
@Table(name = "MEDICATIONDISPENSE")
public class MedicationDispense
    extends Resource
    implements Equals, HashCode
{

    protected Identifier identifier;
    protected MedicationDispenseStatus status;
    protected ResourceReference patient;
    protected ResourceReference dispenser;
    protected List<ResourceReference> authorizingPrescription;
    protected List<MedicationDispenseDispense> dispense;
    protected MedicationDispenseSubstitution substitution;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MEDICATIONDISPENS_0")
    public Identifier getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setIdentifier(Identifier value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationDispenseStatus }
     *     
     */
    @ManyToOne(targetEntity = MedicationDispenseStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONDISPENSE_HJ_0")
    public MedicationDispenseStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationDispenseStatus }
     *     
     */
    public void setStatus(MedicationDispenseStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the patient property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONDISPENSE_H_0")
    public ResourceReference getPatient() {
        return patient;
    }

    /**
     * Sets the value of the patient property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPatient(ResourceReference value) {
        this.patient = value;
    }

    /**
     * Gets the value of the dispenser property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSER_MEDICATIONDISPENSE_0")
    public ResourceReference getDispenser() {
        return dispenser;
    }

    /**
     * Sets the value of the dispenser property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setDispenser(ResourceReference value) {
        this.dispenser = value;
    }

    /**
     * Gets the value of the authorizingPrescription property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the authorizingPrescription property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAuthorizingPrescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHORIZINGPRESCRIPTION_MEDI_0")
    public List<ResourceReference> getAuthorizingPrescription() {
        if (authorizingPrescription == null) {
            authorizingPrescription = new ArrayList<ResourceReference>();
        }
        return this.authorizingPrescription;
    }

    /**
     * 
     * 
     */
    public void setAuthorizingPrescription(List<ResourceReference> authorizingPrescription) {
        this.authorizingPrescription = authorizingPrescription;
    }

    /**
     * Gets the value of the dispense property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dispense property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDispense().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MedicationDispenseDispense }
     * 
     * 
     */
    @OneToMany(targetEntity = MedicationDispenseDispense.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSE_MEDICATIONDISPENSE__0")
    public List<MedicationDispenseDispense> getDispense() {
        if (dispense == null) {
            dispense = new ArrayList<MedicationDispenseDispense>();
        }
        return this.dispense;
    }

    /**
     * 
     * 
     */
    public void setDispense(List<MedicationDispenseDispense> dispense) {
        this.dispense = dispense;
    }

    /**
     * Gets the value of the substitution property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationDispenseSubstitution }
     *     
     */
    @ManyToOne(targetEntity = MedicationDispenseSubstitution.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTITUTION_MEDICATIONDISPE_0")
    public MedicationDispenseSubstitution getSubstitution() {
        return substitution;
    }

    /**
     * Sets the value of the substitution property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationDispenseSubstitution }
     *     
     */
    public void setSubstitution(MedicationDispenseSubstitution value) {
        this.substitution = value;
    }

    public MedicationDispense withIdentifier(Identifier value) {
        setIdentifier(value);
        return this;
    }

    public MedicationDispense withStatus(MedicationDispenseStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationDispense withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationDispense withDispenser(ResourceReference value) {
        setDispenser(value);
        return this;
    }

    public MedicationDispense withAuthorizingPrescription(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAuthorizingPrescription().add(value);
            }
        }
        return this;
    }

    public MedicationDispense withAuthorizingPrescription(Collection<ResourceReference> values) {
        if (values!= null) {
            getAuthorizingPrescription().addAll(values);
        }
        return this;
    }

    public MedicationDispense withAuthorizingPrescription(List<ResourceReference> authorizingPrescription) {
        setAuthorizingPrescription(authorizingPrescription);
        return this;
    }

    public MedicationDispense withDispense(MedicationDispenseDispense... values) {
        if (values!= null) {
            for (MedicationDispenseDispense value: values) {
                getDispense().add(value);
            }
        }
        return this;
    }

    public MedicationDispense withDispense(Collection<MedicationDispenseDispense> values) {
        if (values!= null) {
            getDispense().addAll(values);
        }
        return this;
    }

    public MedicationDispense withDispense(List<MedicationDispenseDispense> dispense) {
        setDispense(dispense);
        return this;
    }

    public MedicationDispense withSubstitution(MedicationDispenseSubstitution value) {
        setSubstitution(value);
        return this;
    }

    @Override
    public MedicationDispense withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationDispense withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationDispense withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispense withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispense withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public MedicationDispense withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispense withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispense withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public MedicationDispense withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationDispense withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationDispense withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public MedicationDispense withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationDispense)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationDispense that = ((MedicationDispense) object);
        {
            Identifier lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Identifier rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            MedicationDispenseStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationDispenseStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ResourceReference lhsDispenser;
            lhsDispenser = this.getDispenser();
            ResourceReference rhsDispenser;
            rhsDispenser = that.getDispenser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispenser", lhsDispenser), LocatorUtils.property(thatLocator, "dispenser", rhsDispenser), lhsDispenser, rhsDispenser)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAuthorizingPrescription;
            lhsAuthorizingPrescription = (((this.authorizingPrescription!= null)&&(!this.authorizingPrescription.isEmpty()))?this.getAuthorizingPrescription():null);
            List<ResourceReference> rhsAuthorizingPrescription;
            rhsAuthorizingPrescription = (((that.authorizingPrescription!= null)&&(!that.authorizingPrescription.isEmpty()))?that.getAuthorizingPrescription():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authorizingPrescription", lhsAuthorizingPrescription), LocatorUtils.property(thatLocator, "authorizingPrescription", rhsAuthorizingPrescription), lhsAuthorizingPrescription, rhsAuthorizingPrescription)) {
                return false;
            }
        }
        {
            List<MedicationDispenseDispense> lhsDispense;
            lhsDispense = (((this.dispense!= null)&&(!this.dispense.isEmpty()))?this.getDispense():null);
            List<MedicationDispenseDispense> rhsDispense;
            rhsDispense = (((that.dispense!= null)&&(!that.dispense.isEmpty()))?that.getDispense():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispense", lhsDispense), LocatorUtils.property(thatLocator, "dispense", rhsDispense), lhsDispense, rhsDispense)) {
                return false;
            }
        }
        {
            MedicationDispenseSubstitution lhsSubstitution;
            lhsSubstitution = this.getSubstitution();
            MedicationDispenseSubstitution rhsSubstitution;
            rhsSubstitution = that.getSubstitution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substitution", lhsSubstitution), LocatorUtils.property(thatLocator, "substitution", rhsSubstitution), lhsSubstitution, rhsSubstitution)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            MedicationDispenseStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ResourceReference theDispenser;
            theDispenser = this.getDispenser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispenser", theDispenser), currentHashCode, theDispenser);
        }
        {
            List<ResourceReference> theAuthorizingPrescription;
            theAuthorizingPrescription = (((this.authorizingPrescription!= null)&&(!this.authorizingPrescription.isEmpty()))?this.getAuthorizingPrescription():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authorizingPrescription", theAuthorizingPrescription), currentHashCode, theAuthorizingPrescription);
        }
        {
            List<MedicationDispenseDispense> theDispense;
            theDispense = (((this.dispense!= null)&&(!this.dispense.isEmpty()))?this.getDispense():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispense", theDispense), currentHashCode, theDispense);
        }
        {
            MedicationDispenseSubstitution theSubstitution;
            theSubstitution = this.getSubstitution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substitution", theSubstitution), currentHashCode, theSubstitution);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
