//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A Resource Profile - a statement of use of one or more FHIR Resources.  It may include constraints on Resources and Data Types, Terminology Binding Statements and Extension Definitions.
 * 
 * <p>Java class for Profile.Binding complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Profile.Binding">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="name" type="{http://hl7.org/fhir}string"/>
 *         &lt;element name="isExtensible" type="{http://hl7.org/fhir}boolean"/>
 *         &lt;element name="conformance" type="{http://hl7.org/fhir}BindingConformance" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="referenceUri" type="{http://hl7.org/fhir}uri"/>
 *           &lt;element name="referenceResource" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Binding", propOrder = {
    "name",
    "isExtensible",
    "conformance",
    "description",
    "referenceUri",
    "referenceResource"
})
@Entity(name = "ProfileBinding")
@Table(name = "PROFILEBINDING")
public class ProfileBinding
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected org.hl7.fhir.String name;
    @XmlElement(required = true)
    protected Boolean isExtensible;
    protected BindingConformance conformance;
    protected org.hl7.fhir.String description;
    protected Uri referenceUri;
    protected ResourceReference referenceResource;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PROFILEBINDING_HJID")
    public org.hl7.fhir.String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setName(org.hl7.fhir.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the isExtensible property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ISEXTENSIBLE_PROFILEBINDING__0")
    public Boolean getIsExtensible() {
        return isExtensible;
    }

    /**
     * Sets the value of the isExtensible property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIsExtensible(Boolean value) {
        this.isExtensible = value;
    }

    /**
     * Gets the value of the conformance property.
     * 
     * @return
     *     possible object is
     *     {@link BindingConformance }
     *     
     */
    @ManyToOne(targetEntity = BindingConformance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONFORMANCE_PROFILEBINDING_H_0")
    public BindingConformance getConformance() {
        return conformance;
    }

    /**
     * Sets the value of the conformance property.
     * 
     * @param value
     *     allowed object is
     *     {@link BindingConformance }
     *     
     */
    public void setConformance(BindingConformance value) {
        this.conformance = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_PROFILEBINDING_H_0")
    public org.hl7.fhir.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDescription(org.hl7.fhir.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the referenceUri property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCEURI_PROFILEBINDING__0")
    public Uri getReferenceUri() {
        return referenceUri;
    }

    /**
     * Sets the value of the referenceUri property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setReferenceUri(Uri value) {
        this.referenceUri = value;
    }

    /**
     * Gets the value of the referenceResource property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCERESOURCE_PROFILEBIN_0")
    public ResourceReference getReferenceResource() {
        return referenceResource;
    }

    /**
     * Sets the value of the referenceResource property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setReferenceResource(ResourceReference value) {
        this.referenceResource = value;
    }

    public ProfileBinding withName(org.hl7.fhir.String value) {
        setName(value);
        return this;
    }

    public ProfileBinding withIsExtensible(Boolean value) {
        setIsExtensible(value);
        return this;
    }

    public ProfileBinding withConformance(BindingConformance value) {
        setConformance(value);
        return this;
    }

    public ProfileBinding withDescription(org.hl7.fhir.String value) {
        setDescription(value);
        return this;
    }

    public ProfileBinding withReferenceUri(Uri value) {
        setReferenceUri(value);
        return this;
    }

    public ProfileBinding withReferenceResource(ResourceReference value) {
        setReferenceResource(value);
        return this;
    }

    @Override
    public ProfileBinding withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileBinding withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileBinding withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ProfileBinding withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileBinding withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileBinding withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ProfileBinding withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileBinding)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileBinding that = ((ProfileBinding) object);
        {
            org.hl7.fhir.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            Boolean lhsIsExtensible;
            lhsIsExtensible = this.getIsExtensible();
            Boolean rhsIsExtensible;
            rhsIsExtensible = that.getIsExtensible();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "isExtensible", lhsIsExtensible), LocatorUtils.property(thatLocator, "isExtensible", rhsIsExtensible), lhsIsExtensible, rhsIsExtensible)) {
                return false;
            }
        }
        {
            BindingConformance lhsConformance;
            lhsConformance = this.getConformance();
            BindingConformance rhsConformance;
            rhsConformance = that.getConformance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "conformance", lhsConformance), LocatorUtils.property(thatLocator, "conformance", rhsConformance), lhsConformance, rhsConformance)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            Uri lhsReferenceUri;
            lhsReferenceUri = this.getReferenceUri();
            Uri rhsReferenceUri;
            rhsReferenceUri = that.getReferenceUri();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceUri", lhsReferenceUri), LocatorUtils.property(thatLocator, "referenceUri", rhsReferenceUri), lhsReferenceUri, rhsReferenceUri)) {
                return false;
            }
        }
        {
            ResourceReference lhsReferenceResource;
            lhsReferenceResource = this.getReferenceResource();
            ResourceReference rhsReferenceResource;
            rhsReferenceResource = that.getReferenceResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "referenceResource", lhsReferenceResource), LocatorUtils.property(thatLocator, "referenceResource", rhsReferenceResource), lhsReferenceResource, rhsReferenceResource)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            Boolean theIsExtensible;
            theIsExtensible = this.getIsExtensible();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "isExtensible", theIsExtensible), currentHashCode, theIsExtensible);
        }
        {
            BindingConformance theConformance;
            theConformance = this.getConformance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "conformance", theConformance), currentHashCode, theConformance);
        }
        {
            org.hl7.fhir.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            Uri theReferenceUri;
            theReferenceUri = this.getReferenceUri();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceUri", theReferenceUri), currentHashCode, theReferenceUri);
        }
        {
            ResourceReference theReferenceResource;
            theReferenceResource = this.getReferenceResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "referenceResource", theReferenceResource), currentHashCode, theReferenceResource);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
