//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A Resource Profile - a statement of use of one or more FHIR Resources.  It may include constraints on Resources and Data Types, Terminology Binding Statements and Extension Definitions.
 * 
 * <p>Java class for Profile.Element complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Profile.Element">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="path" type="{http://hl7.org/fhir}string"/>
 *         &lt;element name="representation" type="{http://hl7.org/fhir}PropertyRepresentation" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="slicing" type="{http://hl7.org/fhir}Profile.Slicing" minOccurs="0"/>
 *         &lt;element name="definition" type="{http://hl7.org/fhir}Profile.Definition" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Profile.Element", propOrder = {
    "path",
    "representation",
    "name",
    "slicing",
    "definition"
})
@Entity(name = "ProfileElement")
@Table(name = "PROFILEELEMENT")
public class ProfileElement
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected org.hl7.fhir.String path;
    protected List<PropertyRepresentation> representation;
    protected org.hl7.fhir.String name;
    protected ProfileSlicing slicing;
    protected ProfileDefinition definition;

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATH__PROFILEELEMENT_HJID")
    public org.hl7.fhir.String getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setPath(org.hl7.fhir.String value) {
        this.path = value;
    }

    /**
     * Gets the value of the representation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the representation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRepresentation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PropertyRepresentation }
     * 
     * 
     */
    @OneToMany(targetEntity = PropertyRepresentation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REPRESENTATION_PROFILEELEMEN_0")
    public List<PropertyRepresentation> getRepresentation() {
        if (representation == null) {
            representation = new ArrayList<PropertyRepresentation>();
        }
        return this.representation;
    }

    /**
     * 
     * 
     */
    public void setRepresentation(List<PropertyRepresentation> representation) {
        this.representation = representation;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PROFILEELEMENT_HJID")
    public org.hl7.fhir.String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setName(org.hl7.fhir.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the slicing property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileSlicing }
     *     
     */
    @ManyToOne(targetEntity = ProfileSlicing.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SLICING_PROFILEELEMENT_HJID")
    public ProfileSlicing getSlicing() {
        return slicing;
    }

    /**
     * Sets the value of the slicing property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileSlicing }
     *     
     */
    public void setSlicing(ProfileSlicing value) {
        this.slicing = value;
    }

    /**
     * Gets the value of the definition property.
     * 
     * @return
     *     possible object is
     *     {@link ProfileDefinition }
     *     
     */
    @ManyToOne(targetEntity = ProfileDefinition.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEFINITION_PROFILEELEMENT_HJ_0")
    public ProfileDefinition getDefinition() {
        return definition;
    }

    /**
     * Sets the value of the definition property.
     * 
     * @param value
     *     allowed object is
     *     {@link ProfileDefinition }
     *     
     */
    public void setDefinition(ProfileDefinition value) {
        this.definition = value;
    }

    public ProfileElement withPath(org.hl7.fhir.String value) {
        setPath(value);
        return this;
    }

    public ProfileElement withRepresentation(PropertyRepresentation... values) {
        if (values!= null) {
            for (PropertyRepresentation value: values) {
                getRepresentation().add(value);
            }
        }
        return this;
    }

    public ProfileElement withRepresentation(Collection<PropertyRepresentation> values) {
        if (values!= null) {
            getRepresentation().addAll(values);
        }
        return this;
    }

    public ProfileElement withRepresentation(List<PropertyRepresentation> representation) {
        setRepresentation(representation);
        return this;
    }

    public ProfileElement withName(org.hl7.fhir.String value) {
        setName(value);
        return this;
    }

    public ProfileElement withSlicing(ProfileSlicing value) {
        setSlicing(value);
        return this;
    }

    public ProfileElement withDefinition(ProfileDefinition value) {
        setDefinition(value);
        return this;
    }

    @Override
    public ProfileElement withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileElement withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileElement withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ProfileElement withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ProfileElement withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ProfileElement withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ProfileElement withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ProfileElement)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ProfileElement that = ((ProfileElement) object);
        {
            org.hl7.fhir.String lhsPath;
            lhsPath = this.getPath();
            org.hl7.fhir.String rhsPath;
            rhsPath = that.getPath();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "path", lhsPath), LocatorUtils.property(thatLocator, "path", rhsPath), lhsPath, rhsPath)) {
                return false;
            }
        }
        {
            List<PropertyRepresentation> lhsRepresentation;
            lhsRepresentation = (((this.representation!= null)&&(!this.representation.isEmpty()))?this.getRepresentation():null);
            List<PropertyRepresentation> rhsRepresentation;
            rhsRepresentation = (((that.representation!= null)&&(!that.representation.isEmpty()))?that.getRepresentation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "representation", lhsRepresentation), LocatorUtils.property(thatLocator, "representation", rhsRepresentation), lhsRepresentation, rhsRepresentation)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            ProfileSlicing lhsSlicing;
            lhsSlicing = this.getSlicing();
            ProfileSlicing rhsSlicing;
            rhsSlicing = that.getSlicing();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "slicing", lhsSlicing), LocatorUtils.property(thatLocator, "slicing", rhsSlicing), lhsSlicing, rhsSlicing)) {
                return false;
            }
        }
        {
            ProfileDefinition lhsDefinition;
            lhsDefinition = this.getDefinition();
            ProfileDefinition rhsDefinition;
            rhsDefinition = that.getDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "definition", lhsDefinition), LocatorUtils.property(thatLocator, "definition", rhsDefinition), lhsDefinition, rhsDefinition)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.String thePath;
            thePath = this.getPath();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "path", thePath), currentHashCode, thePath);
        }
        {
            List<PropertyRepresentation> theRepresentation;
            theRepresentation = (((this.representation!= null)&&(!this.representation.isEmpty()))?this.getRepresentation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "representation", theRepresentation), currentHashCode, theRepresentation);
        }
        {
            org.hl7.fhir.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            ProfileSlicing theSlicing;
            theSlicing = this.getSlicing();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "slicing", theSlicing), currentHashCode, theSlicing);
        }
        {
            ProfileDefinition theDefinition;
            theDefinition = this.getDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "definition", theDefinition), currentHashCode, theDefinition);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
