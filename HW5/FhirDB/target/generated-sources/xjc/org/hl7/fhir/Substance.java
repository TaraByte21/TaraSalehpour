//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Substance complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Substance">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="type" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="instance" type="{http://hl7.org/fhir}Substance.Instance" minOccurs="0"/>
 *         &lt;element name="ingredient" type="{http://hl7.org/fhir}Substance.Ingredient" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Substance", propOrder = {
    "type",
    "description",
    "instance",
    "ingredient"
})
@Entity(name = "Substance")
@Table(name = "SUBSTANCE")
public class Substance
    extends Resource
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected CodeableConcept type;
    protected org.hl7.fhir.String description;
    protected SubstanceInstance instance;
    protected List<SubstanceIngredient> ingredient;

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SUBSTANCE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setType(CodeableConcept value) {
        this.type = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_SUBSTANCE_HJID")
    public org.hl7.fhir.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDescription(org.hl7.fhir.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the instance property.
     * 
     * @return
     *     possible object is
     *     {@link SubstanceInstance }
     *     
     */
    @ManyToOne(targetEntity = SubstanceInstance.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INSTANCE__SUBSTANCE_HJID")
    public SubstanceInstance getInstance() {
        return instance;
    }

    /**
     * Sets the value of the instance property.
     * 
     * @param value
     *     allowed object is
     *     {@link SubstanceInstance }
     *     
     */
    public void setInstance(SubstanceInstance value) {
        this.instance = value;
    }

    /**
     * Gets the value of the ingredient property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ingredient property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIngredient().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SubstanceIngredient }
     * 
     * 
     */
    @OneToMany(targetEntity = SubstanceIngredient.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INGREDIENT_SUBSTANCE_HJID")
    public List<SubstanceIngredient> getIngredient() {
        if (ingredient == null) {
            ingredient = new ArrayList<SubstanceIngredient>();
        }
        return this.ingredient;
    }

    /**
     * 
     * 
     */
    public void setIngredient(List<SubstanceIngredient> ingredient) {
        this.ingredient = ingredient;
    }

    public Substance withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public Substance withDescription(org.hl7.fhir.String value) {
        setDescription(value);
        return this;
    }

    public Substance withInstance(SubstanceInstance value) {
        setInstance(value);
        return this;
    }

    public Substance withIngredient(SubstanceIngredient... values) {
        if (values!= null) {
            for (SubstanceIngredient value: values) {
                getIngredient().add(value);
            }
        }
        return this;
    }

    public Substance withIngredient(Collection<SubstanceIngredient> values) {
        if (values!= null) {
            getIngredient().addAll(values);
        }
        return this;
    }

    public Substance withIngredient(List<SubstanceIngredient> ingredient) {
        setIngredient(ingredient);
        return this;
    }

    @Override
    public Substance withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Substance withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Substance withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Substance withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Substance withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Substance withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Substance withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Substance withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Substance withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Substance withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Substance withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Substance withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Substance)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Substance that = ((Substance) object);
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            SubstanceInstance lhsInstance;
            lhsInstance = this.getInstance();
            SubstanceInstance rhsInstance;
            rhsInstance = that.getInstance();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instance", lhsInstance), LocatorUtils.property(thatLocator, "instance", rhsInstance), lhsInstance, rhsInstance)) {
                return false;
            }
        }
        {
            List<SubstanceIngredient> lhsIngredient;
            lhsIngredient = (((this.ingredient!= null)&&(!this.ingredient.isEmpty()))?this.getIngredient():null);
            List<SubstanceIngredient> rhsIngredient;
            rhsIngredient = (((that.ingredient!= null)&&(!that.ingredient.isEmpty()))?that.getIngredient():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ingredient", lhsIngredient), LocatorUtils.property(thatLocator, "ingredient", rhsIngredient), lhsIngredient, rhsIngredient)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            org.hl7.fhir.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            SubstanceInstance theInstance;
            theInstance = this.getInstance();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instance", theInstance), currentHashCode, theInstance);
        }
        {
            List<SubstanceIngredient> theIngredient;
            theIngredient = (((this.ingredient!= null)&&(!this.ingredient.isEmpty()))?this.getIngredient():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ingredient", theIngredient), currentHashCode, theIngredient);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
