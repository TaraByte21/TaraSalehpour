//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Conformance complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="version" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="publisher" type="{http://hl7.org/fhir}string"/>
 *         &lt;element name="telecom" type="{http://hl7.org/fhir}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}ConformanceStatementStatus" minOccurs="0"/>
 *         &lt;element name="experimental" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="date" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;element name="software" type="{http://hl7.org/fhir}Conformance.Software" minOccurs="0"/>
 *         &lt;element name="implementation" type="{http://hl7.org/fhir}Conformance.Implementation" minOccurs="0"/>
 *         &lt;element name="fhirVersion" type="{http://hl7.org/fhir}id"/>
 *         &lt;element name="acceptUnknown" type="{http://hl7.org/fhir}boolean"/>
 *         &lt;element name="format" type="{http://hl7.org/fhir}code" maxOccurs="unbounded"/>
 *         &lt;element name="profile" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="rest" type="{http://hl7.org/fhir}Conformance.Rest" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="messaging" type="{http://hl7.org/fhir}Conformance.Messaging" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="document" type="{http://hl7.org/fhir}Conformance.Document" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance", propOrder = {
    "identifier",
    "version",
    "name",
    "publisher",
    "telecom",
    "description",
    "status",
    "experimental",
    "date",
    "software",
    "implementation",
    "fhirVersion",
    "acceptUnknown",
    "format",
    "profile",
    "rest",
    "messaging",
    "document"
})
@Entity(name = "Conformance")
@Table(name = "CONFORMANCE")
public class Conformance
    extends Resource
    implements Equals, HashCode
{

    protected org.hl7.fhir.String identifier;
    protected org.hl7.fhir.String version;
    protected org.hl7.fhir.String name;
    @XmlElement(required = true)
    protected org.hl7.fhir.String publisher;
    protected List<Contact> telecom;
    protected org.hl7.fhir.String description;
    protected ConformanceStatementStatus status;
    protected Boolean experimental;
    @XmlElement(required = true)
    protected DateTime date;
    protected ConformanceSoftware software;
    protected ConformanceImplementation implementation;
    @XmlElement(required = true)
    protected Id fhirVersion;
    @XmlElement(required = true)
    protected Boolean acceptUnknown;
    @XmlElement(required = true)
    protected List<Code> format;
    protected List<ResourceReference> profile;
    protected List<ConformanceRest> rest;
    protected List<ConformanceMessaging> messaging;
    protected List<ConformanceDocument> document;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_CONFORMANCE_HJID")
    public org.hl7.fhir.String getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setIdentifier(org.hl7.fhir.String value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__CONFORMANCE_HJID")
    public org.hl7.fhir.String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setVersion(org.hl7.fhir.String value) {
        this.version = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__CONFORMANCE_HJID")
    public org.hl7.fhir.String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setName(org.hl7.fhir.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the publisher property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PUBLISHER_CONFORMANCE_HJID")
    public org.hl7.fhir.String getPublisher() {
        return publisher;
    }

    /**
     * Sets the value of the publisher property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setPublisher(org.hl7.fhir.String value) {
        this.publisher = value;
    }

    /**
     * Gets the value of the telecom property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telecom property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelecom().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOM_CONFORMANCE_HJID")
    public List<Contact> getTelecom() {
        if (telecom == null) {
            telecom = new ArrayList<Contact>();
        }
        return this.telecom;
    }

    /**
     * 
     * 
     */
    public void setTelecom(List<Contact> telecom) {
        this.telecom = telecom;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_CONFORMANCE_HJID")
    public org.hl7.fhir.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDescription(org.hl7.fhir.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceStatementStatus }
     *     
     */
    @ManyToOne(targetEntity = ConformanceStatementStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CONFORMANCE_HJID")
    public ConformanceStatementStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceStatementStatus }
     *     
     */
    public void setStatus(ConformanceStatementStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the experimental property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPERIMENTAL_CONFORMANCE_HJID")
    public Boolean getExperimental() {
        return experimental;
    }

    /**
     * Sets the value of the experimental property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setExperimental(Boolean value) {
        this.experimental = value;
    }

    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__CONFORMANCE_HJID")
    public DateTime getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDate(DateTime value) {
        this.date = value;
    }

    /**
     * Gets the value of the software property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceSoftware }
     *     
     */
    @ManyToOne(targetEntity = ConformanceSoftware.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SOFTWARE_CONFORMANCE_HJID")
    public ConformanceSoftware getSoftware() {
        return software;
    }

    /**
     * Sets the value of the software property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceSoftware }
     *     
     */
    public void setSoftware(ConformanceSoftware value) {
        this.software = value;
    }

    /**
     * Gets the value of the implementation property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceImplementation }
     *     
     */
    @ManyToOne(targetEntity = ConformanceImplementation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IMPLEMENTATION__CONFORMANCE__0")
    public ConformanceImplementation getImplementation() {
        return implementation;
    }

    /**
     * Sets the value of the implementation property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceImplementation }
     *     
     */
    public void setImplementation(ConformanceImplementation value) {
        this.implementation = value;
    }

    /**
     * Gets the value of the fhirVersion property.
     * 
     * @return
     *     possible object is
     *     {@link Id }
     *     
     */
    @ManyToOne(targetEntity = Id.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FHIRVERSION_CONFORMANCE_HJID")
    public Id getFhirVersion() {
        return fhirVersion;
    }

    /**
     * Sets the value of the fhirVersion property.
     * 
     * @param value
     *     allowed object is
     *     {@link Id }
     *     
     */
    public void setFhirVersion(Id value) {
        this.fhirVersion = value;
    }

    /**
     * Gets the value of the acceptUnknown property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACCEPTUNKNOWN_CONFORMANCE_HJ_0")
    public Boolean getAcceptUnknown() {
        return acceptUnknown;
    }

    /**
     * Sets the value of the acceptUnknown property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAcceptUnknown(Boolean value) {
        this.acceptUnknown = value;
    }

    /**
     * Gets the value of the format property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the format property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Code }
     * 
     * 
     */
    @OneToMany(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORMAT_CONFORMANCE_HJID")
    public List<Code> getFormat() {
        if (format == null) {
            format = new ArrayList<Code>();
        }
        return this.format;
    }

    /**
     * 
     * 
     */
    public void setFormat(List<Code> format) {
        this.format = format;
    }

    /**
     * Gets the value of the profile property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the profile property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProfile().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROFILE_CONFORMANCE_HJID")
    public List<ResourceReference> getProfile() {
        if (profile == null) {
            profile = new ArrayList<ResourceReference>();
        }
        return this.profile;
    }

    /**
     * 
     * 
     */
    public void setProfile(List<ResourceReference> profile) {
        this.profile = profile;
    }

    /**
     * Gets the value of the rest property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the rest property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRest().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceRest }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceRest.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REST_CONFORMANCE_HJID")
    public List<ConformanceRest> getRest() {
        if (rest == null) {
            rest = new ArrayList<ConformanceRest>();
        }
        return this.rest;
    }

    /**
     * 
     * 
     */
    public void setRest(List<ConformanceRest> rest) {
        this.rest = rest;
    }

    /**
     * Gets the value of the messaging property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the messaging property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMessaging().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceMessaging }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceMessaging.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MESSAGING_CONFORMANCE_HJID")
    public List<ConformanceMessaging> getMessaging() {
        if (messaging == null) {
            messaging = new ArrayList<ConformanceMessaging>();
        }
        return this.messaging;
    }

    /**
     * 
     * 
     */
    public void setMessaging(List<ConformanceMessaging> messaging) {
        this.messaging = messaging;
    }

    /**
     * Gets the value of the document property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the document property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceDocument }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceDocument.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENT_CONFORMANCE_HJID")
    public List<ConformanceDocument> getDocument() {
        if (document == null) {
            document = new ArrayList<ConformanceDocument>();
        }
        return this.document;
    }

    /**
     * 
     * 
     */
    public void setDocument(List<ConformanceDocument> document) {
        this.document = document;
    }

    public Conformance withIdentifier(org.hl7.fhir.String value) {
        setIdentifier(value);
        return this;
    }

    public Conformance withVersion(org.hl7.fhir.String value) {
        setVersion(value);
        return this;
    }

    public Conformance withName(org.hl7.fhir.String value) {
        setName(value);
        return this;
    }

    public Conformance withPublisher(org.hl7.fhir.String value) {
        setPublisher(value);
        return this;
    }

    public Conformance withTelecom(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecom().add(value);
            }
        }
        return this;
    }

    public Conformance withTelecom(Collection<Contact> values) {
        if (values!= null) {
            getTelecom().addAll(values);
        }
        return this;
    }

    public Conformance withTelecom(List<Contact> telecom) {
        setTelecom(telecom);
        return this;
    }

    public Conformance withDescription(org.hl7.fhir.String value) {
        setDescription(value);
        return this;
    }

    public Conformance withStatus(ConformanceStatementStatus value) {
        setStatus(value);
        return this;
    }

    public Conformance withExperimental(Boolean value) {
        setExperimental(value);
        return this;
    }

    public Conformance withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public Conformance withSoftware(ConformanceSoftware value) {
        setSoftware(value);
        return this;
    }

    public Conformance withImplementation(ConformanceImplementation value) {
        setImplementation(value);
        return this;
    }

    public Conformance withFhirVersion(Id value) {
        setFhirVersion(value);
        return this;
    }

    public Conformance withAcceptUnknown(Boolean value) {
        setAcceptUnknown(value);
        return this;
    }

    public Conformance withFormat(Code... values) {
        if (values!= null) {
            for (Code value: values) {
                getFormat().add(value);
            }
        }
        return this;
    }

    public Conformance withFormat(Collection<Code> values) {
        if (values!= null) {
            getFormat().addAll(values);
        }
        return this;
    }

    public Conformance withFormat(List<Code> format) {
        setFormat(format);
        return this;
    }

    public Conformance withProfile(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getProfile().add(value);
            }
        }
        return this;
    }

    public Conformance withProfile(Collection<ResourceReference> values) {
        if (values!= null) {
            getProfile().addAll(values);
        }
        return this;
    }

    public Conformance withProfile(List<ResourceReference> profile) {
        setProfile(profile);
        return this;
    }

    public Conformance withRest(ConformanceRest... values) {
        if (values!= null) {
            for (ConformanceRest value: values) {
                getRest().add(value);
            }
        }
        return this;
    }

    public Conformance withRest(Collection<ConformanceRest> values) {
        if (values!= null) {
            getRest().addAll(values);
        }
        return this;
    }

    public Conformance withRest(List<ConformanceRest> rest) {
        setRest(rest);
        return this;
    }

    public Conformance withMessaging(ConformanceMessaging... values) {
        if (values!= null) {
            for (ConformanceMessaging value: values) {
                getMessaging().add(value);
            }
        }
        return this;
    }

    public Conformance withMessaging(Collection<ConformanceMessaging> values) {
        if (values!= null) {
            getMessaging().addAll(values);
        }
        return this;
    }

    public Conformance withMessaging(List<ConformanceMessaging> messaging) {
        setMessaging(messaging);
        return this;
    }

    public Conformance withDocument(ConformanceDocument... values) {
        if (values!= null) {
            for (ConformanceDocument value: values) {
                getDocument().add(value);
            }
        }
        return this;
    }

    public Conformance withDocument(Collection<ConformanceDocument> values) {
        if (values!= null) {
            getDocument().addAll(values);
        }
        return this;
    }

    public Conformance withDocument(List<ConformanceDocument> document) {
        setDocument(document);
        return this;
    }

    @Override
    public Conformance withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Conformance withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Conformance withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Conformance withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Conformance withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Conformance withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Conformance withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Conformance withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Conformance)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Conformance that = ((Conformance) object);
        {
            org.hl7.fhir.String lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            org.hl7.fhir.String rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsName;
            lhsName = this.getName();
            org.hl7.fhir.String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsPublisher;
            lhsPublisher = this.getPublisher();
            org.hl7.fhir.String rhsPublisher;
            rhsPublisher = that.getPublisher();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "publisher", lhsPublisher), LocatorUtils.property(thatLocator, "publisher", rhsPublisher), lhsPublisher, rhsPublisher)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecom;
            lhsTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            List<Contact> rhsTelecom;
            rhsTelecom = (((that.telecom!= null)&&(!that.telecom.isEmpty()))?that.getTelecom():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecom", lhsTelecom), LocatorUtils.property(thatLocator, "telecom", rhsTelecom), lhsTelecom, rhsTelecom)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            ConformanceStatementStatus lhsStatus;
            lhsStatus = this.getStatus();
            ConformanceStatementStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Boolean lhsExperimental;
            lhsExperimental = this.getExperimental();
            Boolean rhsExperimental;
            rhsExperimental = that.getExperimental();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experimental", lhsExperimental), LocatorUtils.property(thatLocator, "experimental", rhsExperimental), lhsExperimental, rhsExperimental)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ConformanceSoftware lhsSoftware;
            lhsSoftware = this.getSoftware();
            ConformanceSoftware rhsSoftware;
            rhsSoftware = that.getSoftware();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "software", lhsSoftware), LocatorUtils.property(thatLocator, "software", rhsSoftware), lhsSoftware, rhsSoftware)) {
                return false;
            }
        }
        {
            ConformanceImplementation lhsImplementation;
            lhsImplementation = this.getImplementation();
            ConformanceImplementation rhsImplementation;
            rhsImplementation = that.getImplementation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "implementation", lhsImplementation), LocatorUtils.property(thatLocator, "implementation", rhsImplementation), lhsImplementation, rhsImplementation)) {
                return false;
            }
        }
        {
            Id lhsFhirVersion;
            lhsFhirVersion = this.getFhirVersion();
            Id rhsFhirVersion;
            rhsFhirVersion = that.getFhirVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fhirVersion", lhsFhirVersion), LocatorUtils.property(thatLocator, "fhirVersion", rhsFhirVersion), lhsFhirVersion, rhsFhirVersion)) {
                return false;
            }
        }
        {
            Boolean lhsAcceptUnknown;
            lhsAcceptUnknown = this.getAcceptUnknown();
            Boolean rhsAcceptUnknown;
            rhsAcceptUnknown = that.getAcceptUnknown();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "acceptUnknown", lhsAcceptUnknown), LocatorUtils.property(thatLocator, "acceptUnknown", rhsAcceptUnknown), lhsAcceptUnknown, rhsAcceptUnknown)) {
                return false;
            }
        }
        {
            List<Code> lhsFormat;
            lhsFormat = (((this.format!= null)&&(!this.format.isEmpty()))?this.getFormat():null);
            List<Code> rhsFormat;
            rhsFormat = (((that.format!= null)&&(!that.format.isEmpty()))?that.getFormat():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "format", lhsFormat), LocatorUtils.property(thatLocator, "format", rhsFormat), lhsFormat, rhsFormat)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsProfile;
            lhsProfile = (((this.profile!= null)&&(!this.profile.isEmpty()))?this.getProfile():null);
            List<ResourceReference> rhsProfile;
            rhsProfile = (((that.profile!= null)&&(!that.profile.isEmpty()))?that.getProfile():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "profile", lhsProfile), LocatorUtils.property(thatLocator, "profile", rhsProfile), lhsProfile, rhsProfile)) {
                return false;
            }
        }
        {
            List<ConformanceRest> lhsRest;
            lhsRest = (((this.rest!= null)&&(!this.rest.isEmpty()))?this.getRest():null);
            List<ConformanceRest> rhsRest;
            rhsRest = (((that.rest!= null)&&(!that.rest.isEmpty()))?that.getRest():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rest", lhsRest), LocatorUtils.property(thatLocator, "rest", rhsRest), lhsRest, rhsRest)) {
                return false;
            }
        }
        {
            List<ConformanceMessaging> lhsMessaging;
            lhsMessaging = (((this.messaging!= null)&&(!this.messaging.isEmpty()))?this.getMessaging():null);
            List<ConformanceMessaging> rhsMessaging;
            rhsMessaging = (((that.messaging!= null)&&(!that.messaging.isEmpty()))?that.getMessaging():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messaging", lhsMessaging), LocatorUtils.property(thatLocator, "messaging", rhsMessaging), lhsMessaging, rhsMessaging)) {
                return false;
            }
        }
        {
            List<ConformanceDocument> lhsDocument;
            lhsDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            List<ConformanceDocument> rhsDocument;
            rhsDocument = (((that.document!= null)&&(!that.document.isEmpty()))?that.getDocument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "document", lhsDocument), LocatorUtils.property(thatLocator, "document", rhsDocument), lhsDocument, rhsDocument)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            org.hl7.fhir.String theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            org.hl7.fhir.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            org.hl7.fhir.String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            org.hl7.fhir.String thePublisher;
            thePublisher = this.getPublisher();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "publisher", thePublisher), currentHashCode, thePublisher);
        }
        {
            List<Contact> theTelecom;
            theTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecom", theTelecom), currentHashCode, theTelecom);
        }
        {
            org.hl7.fhir.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            ConformanceStatementStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Boolean theExperimental;
            theExperimental = this.getExperimental();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experimental", theExperimental), currentHashCode, theExperimental);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ConformanceSoftware theSoftware;
            theSoftware = this.getSoftware();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "software", theSoftware), currentHashCode, theSoftware);
        }
        {
            ConformanceImplementation theImplementation;
            theImplementation = this.getImplementation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "implementation", theImplementation), currentHashCode, theImplementation);
        }
        {
            Id theFhirVersion;
            theFhirVersion = this.getFhirVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fhirVersion", theFhirVersion), currentHashCode, theFhirVersion);
        }
        {
            Boolean theAcceptUnknown;
            theAcceptUnknown = this.getAcceptUnknown();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acceptUnknown", theAcceptUnknown), currentHashCode, theAcceptUnknown);
        }
        {
            List<Code> theFormat;
            theFormat = (((this.format!= null)&&(!this.format.isEmpty()))?this.getFormat():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "format", theFormat), currentHashCode, theFormat);
        }
        {
            List<ResourceReference> theProfile;
            theProfile = (((this.profile!= null)&&(!this.profile.isEmpty()))?this.getProfile():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "profile", theProfile), currentHashCode, theProfile);
        }
        {
            List<ConformanceRest> theRest;
            theRest = (((this.rest!= null)&&(!this.rest.isEmpty()))?this.getRest():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rest", theRest), currentHashCode, theRest);
        }
        {
            List<ConformanceMessaging> theMessaging;
            theMessaging = (((this.messaging!= null)&&(!this.messaging.isEmpty()))?this.getMessaging():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messaging", theMessaging), currentHashCode, theMessaging);
        }
        {
            List<ConformanceDocument> theDocument;
            theDocument = (((this.document!= null)&&(!this.document.isEmpty()))?this.getDocument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "document", theDocument), currentHashCode, theDocument);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
