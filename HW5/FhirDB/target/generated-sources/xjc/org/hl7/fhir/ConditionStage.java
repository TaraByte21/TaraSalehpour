//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a Diagnosis during an Encounter; populating a problem List or a Summary Statement, such as a Discharge Summary.
 * 
 * <p>Java class for Condition.Stage complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Condition.Stage">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="summary" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="assessment" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Condition.Stage", propOrder = {
    "summary",
    "assessment"
})
@Entity(name = "ConditionStage")
@Table(name = "CONDITIONSTAGE")
public class ConditionStage
    extends BackboneElement
    implements Equals, HashCode
{

    protected CodeableConcept summary;
    protected List<ResourceReference> assessment;

    /**
     * Gets the value of the summary property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUMMARY_CONDITIONSTAGE_HJID")
    public CodeableConcept getSummary() {
        return summary;
    }

    /**
     * Sets the value of the summary property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setSummary(CodeableConcept value) {
        this.summary = value;
    }

    /**
     * Gets the value of the assessment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the assessment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAssessment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASSESSMENT_CONDITIONSTAGE_HJ_0")
    public List<ResourceReference> getAssessment() {
        if (assessment == null) {
            assessment = new ArrayList<ResourceReference>();
        }
        return this.assessment;
    }

    /**
     * 
     * 
     */
    public void setAssessment(List<ResourceReference> assessment) {
        this.assessment = assessment;
    }

    public ConditionStage withSummary(CodeableConcept value) {
        setSummary(value);
        return this;
    }

    public ConditionStage withAssessment(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAssessment().add(value);
            }
        }
        return this;
    }

    public ConditionStage withAssessment(Collection<ResourceReference> values) {
        if (values!= null) {
            getAssessment().addAll(values);
        }
        return this;
    }

    public ConditionStage withAssessment(List<ResourceReference> assessment) {
        setAssessment(assessment);
        return this;
    }

    @Override
    public ConditionStage withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionStage withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionStage withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ConditionStage withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConditionStage withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConditionStage withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ConditionStage withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConditionStage)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConditionStage that = ((ConditionStage) object);
        {
            CodeableConcept lhsSummary;
            lhsSummary = this.getSummary();
            CodeableConcept rhsSummary;
            rhsSummary = that.getSummary();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "summary", lhsSummary), LocatorUtils.property(thatLocator, "summary", rhsSummary), lhsSummary, rhsSummary)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAssessment;
            lhsAssessment = (((this.assessment!= null)&&(!this.assessment.isEmpty()))?this.getAssessment():null);
            List<ResourceReference> rhsAssessment;
            rhsAssessment = (((that.assessment!= null)&&(!that.assessment.isEmpty()))?that.getAssessment():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "assessment", lhsAssessment), LocatorUtils.property(thatLocator, "assessment", rhsAssessment), lhsAssessment, rhsAssessment)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theSummary;
            theSummary = this.getSummary();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "summary", theSummary), currentHashCode, theSummary);
        }
        {
            List<ResourceReference> theAssessment;
            theAssessment = (((this.assessment!= null)&&(!this.assessment.isEmpty()))?this.getAssessment():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "assessment", theAssessment), currentHashCode, theAssessment);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
