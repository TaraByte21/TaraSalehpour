//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for CarePlan complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CarePlan">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="patient" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}CarePlanStatus"/>
 *         &lt;element name="period" type="{http://hl7.org/fhir}Period" minOccurs="0"/>
 *         &lt;element name="modified" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;element name="concern" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="participant" type="{http://hl7.org/fhir}CarePlan.Participant" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="goal" type="{http://hl7.org/fhir}CarePlan.Goal" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="activity" type="{http://hl7.org/fhir}CarePlan.Activity" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="notes" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CarePlan", propOrder = {
    "identifier",
    "patient",
    "status",
    "period",
    "modified",
    "concern",
    "participant",
    "goal",
    "activity",
    "notes"
})
@Entity(name = "CarePlan")
@Table(name = "CAREPLAN")
public class CarePlan
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    protected ResourceReference patient;
    @XmlElement(required = true)
    protected CarePlanStatus status;
    protected Period period;
    protected DateTime modified;
    protected List<ResourceReference> concern;
    protected List<CarePlanParticipant> participant;
    protected List<CarePlanGoal> goal;
    protected List<CarePlanActivity> activity;
    protected org.hl7.fhir.String notes;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_CAREPLAN_HJID")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the patient property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_CAREPLAN_HJID")
    public ResourceReference getPatient() {
        return patient;
    }

    /**
     * Sets the value of the patient property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPatient(ResourceReference value) {
        this.patient = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link CarePlanStatus }
     *     
     */
    @ManyToOne(targetEntity = CarePlanStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CAREPLAN_HJID")
    public CarePlanStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link CarePlanStatus }
     *     
     */
    public void setStatus(CarePlanStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the period property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_CAREPLAN_HJID")
    public Period getPeriod() {
        return period;
    }

    /**
     * Sets the value of the period property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setPeriod(Period value) {
        this.period = value;
    }

    /**
     * Gets the value of the modified property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODIFIED_CAREPLAN_HJID")
    public DateTime getModified() {
        return modified;
    }

    /**
     * Sets the value of the modified property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setModified(DateTime value) {
        this.modified = value;
    }

    /**
     * Gets the value of the concern property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the concern property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConcern().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCERN_CAREPLAN_HJID")
    public List<ResourceReference> getConcern() {
        if (concern == null) {
            concern = new ArrayList<ResourceReference>();
        }
        return this.concern;
    }

    /**
     * 
     * 
     */
    public void setConcern(List<ResourceReference> concern) {
        this.concern = concern;
    }

    /**
     * Gets the value of the participant property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the participant property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParticipant().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CarePlanParticipant }
     * 
     * 
     */
    @OneToMany(targetEntity = CarePlanParticipant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARTICIPANT_CAREPLAN_HJID")
    public List<CarePlanParticipant> getParticipant() {
        if (participant == null) {
            participant = new ArrayList<CarePlanParticipant>();
        }
        return this.participant;
    }

    /**
     * 
     * 
     */
    public void setParticipant(List<CarePlanParticipant> participant) {
        this.participant = participant;
    }

    /**
     * Gets the value of the goal property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the goal property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGoal().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CarePlanGoal }
     * 
     * 
     */
    @OneToMany(targetEntity = CarePlanGoal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GOAL_CAREPLAN_HJID")
    public List<CarePlanGoal> getGoal() {
        if (goal == null) {
            goal = new ArrayList<CarePlanGoal>();
        }
        return this.goal;
    }

    /**
     * 
     * 
     */
    public void setGoal(List<CarePlanGoal> goal) {
        this.goal = goal;
    }

    /**
     * Gets the value of the activity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the activity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getActivity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CarePlanActivity }
     * 
     * 
     */
    @OneToMany(targetEntity = CarePlanActivity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTIVITY_CAREPLAN_HJID")
    public List<CarePlanActivity> getActivity() {
        if (activity == null) {
            activity = new ArrayList<CarePlanActivity>();
        }
        return this.activity;
    }

    /**
     * 
     * 
     */
    public void setActivity(List<CarePlanActivity> activity) {
        this.activity = activity;
    }

    /**
     * Gets the value of the notes property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NOTES_CAREPLAN_HJID")
    public org.hl7.fhir.String getNotes() {
        return notes;
    }

    /**
     * Sets the value of the notes property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setNotes(org.hl7.fhir.String value) {
        this.notes = value;
    }

    public CarePlan withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public CarePlan withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public CarePlan withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public CarePlan withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public CarePlan withStatus(CarePlanStatus value) {
        setStatus(value);
        return this;
    }

    public CarePlan withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public CarePlan withModified(DateTime value) {
        setModified(value);
        return this;
    }

    public CarePlan withConcern(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getConcern().add(value);
            }
        }
        return this;
    }

    public CarePlan withConcern(Collection<ResourceReference> values) {
        if (values!= null) {
            getConcern().addAll(values);
        }
        return this;
    }

    public CarePlan withConcern(List<ResourceReference> concern) {
        setConcern(concern);
        return this;
    }

    public CarePlan withParticipant(CarePlanParticipant... values) {
        if (values!= null) {
            for (CarePlanParticipant value: values) {
                getParticipant().add(value);
            }
        }
        return this;
    }

    public CarePlan withParticipant(Collection<CarePlanParticipant> values) {
        if (values!= null) {
            getParticipant().addAll(values);
        }
        return this;
    }

    public CarePlan withParticipant(List<CarePlanParticipant> participant) {
        setParticipant(participant);
        return this;
    }

    public CarePlan withGoal(CarePlanGoal... values) {
        if (values!= null) {
            for (CarePlanGoal value: values) {
                getGoal().add(value);
            }
        }
        return this;
    }

    public CarePlan withGoal(Collection<CarePlanGoal> values) {
        if (values!= null) {
            getGoal().addAll(values);
        }
        return this;
    }

    public CarePlan withGoal(List<CarePlanGoal> goal) {
        setGoal(goal);
        return this;
    }

    public CarePlan withActivity(CarePlanActivity... values) {
        if (values!= null) {
            for (CarePlanActivity value: values) {
                getActivity().add(value);
            }
        }
        return this;
    }

    public CarePlan withActivity(Collection<CarePlanActivity> values) {
        if (values!= null) {
            getActivity().addAll(values);
        }
        return this;
    }

    public CarePlan withActivity(List<CarePlanActivity> activity) {
        setActivity(activity);
        return this;
    }

    public CarePlan withNotes(org.hl7.fhir.String value) {
        setNotes(value);
        return this;
    }

    @Override
    public CarePlan withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public CarePlan withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public CarePlan withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public CarePlan withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public CarePlan withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public CarePlan withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public CarePlan withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public CarePlan withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public CarePlan withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public CarePlan withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public CarePlan withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public CarePlan withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CarePlan)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final CarePlan that = ((CarePlan) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            CarePlanStatus lhsStatus;
            lhsStatus = this.getStatus();
            CarePlanStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            DateTime lhsModified;
            lhsModified = this.getModified();
            DateTime rhsModified;
            rhsModified = that.getModified();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "modified", lhsModified), LocatorUtils.property(thatLocator, "modified", rhsModified), lhsModified, rhsModified)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsConcern;
            lhsConcern = (((this.concern!= null)&&(!this.concern.isEmpty()))?this.getConcern():null);
            List<ResourceReference> rhsConcern;
            rhsConcern = (((that.concern!= null)&&(!that.concern.isEmpty()))?that.getConcern():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concern", lhsConcern), LocatorUtils.property(thatLocator, "concern", rhsConcern), lhsConcern, rhsConcern)) {
                return false;
            }
        }
        {
            List<CarePlanParticipant> lhsParticipant;
            lhsParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            List<CarePlanParticipant> rhsParticipant;
            rhsParticipant = (((that.participant!= null)&&(!that.participant.isEmpty()))?that.getParticipant():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "participant", lhsParticipant), LocatorUtils.property(thatLocator, "participant", rhsParticipant), lhsParticipant, rhsParticipant)) {
                return false;
            }
        }
        {
            List<CarePlanGoal> lhsGoal;
            lhsGoal = (((this.goal!= null)&&(!this.goal.isEmpty()))?this.getGoal():null);
            List<CarePlanGoal> rhsGoal;
            rhsGoal = (((that.goal!= null)&&(!that.goal.isEmpty()))?that.getGoal():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "goal", lhsGoal), LocatorUtils.property(thatLocator, "goal", rhsGoal), lhsGoal, rhsGoal)) {
                return false;
            }
        }
        {
            List<CarePlanActivity> lhsActivity;
            lhsActivity = (((this.activity!= null)&&(!this.activity.isEmpty()))?this.getActivity():null);
            List<CarePlanActivity> rhsActivity;
            rhsActivity = (((that.activity!= null)&&(!that.activity.isEmpty()))?that.getActivity():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activity", lhsActivity), LocatorUtils.property(thatLocator, "activity", rhsActivity), lhsActivity, rhsActivity)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsNotes;
            lhsNotes = this.getNotes();
            org.hl7.fhir.String rhsNotes;
            rhsNotes = that.getNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            CarePlanStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            DateTime theModified;
            theModified = this.getModified();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "modified", theModified), currentHashCode, theModified);
        }
        {
            List<ResourceReference> theConcern;
            theConcern = (((this.concern!= null)&&(!this.concern.isEmpty()))?this.getConcern():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concern", theConcern), currentHashCode, theConcern);
        }
        {
            List<CarePlanParticipant> theParticipant;
            theParticipant = (((this.participant!= null)&&(!this.participant.isEmpty()))?this.getParticipant():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "participant", theParticipant), currentHashCode, theParticipant);
        }
        {
            List<CarePlanGoal> theGoal;
            theGoal = (((this.goal!= null)&&(!this.goal.isEmpty()))?this.getGoal():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "goal", theGoal), currentHashCode, theGoal);
        }
        {
            List<CarePlanActivity> theActivity;
            theActivity = (((this.activity!= null)&&(!this.activity.isEmpty()))?this.getActivity():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activity", theActivity), currentHashCode, theActivity);
        }
        {
            org.hl7.fhir.String theNotes;
            theNotes = this.getNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
