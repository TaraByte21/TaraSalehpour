//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A patient's point-of-time immunization status and recommendation with optional supporting justification.
 * 
 * <p>Java class for ImmunizationRecommendation.Recommendation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ImmunizationRecommendation.Recommendation">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="date" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;element name="vaccineType" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="doseNumber" type="{http://hl7.org/fhir}integer" minOccurs="0"/>
 *         &lt;element name="forecastStatus" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="dateCriterion" type="{http://hl7.org/fhir}ImmunizationRecommendation.DateCriterion" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="protocol" type="{http://hl7.org/fhir}ImmunizationRecommendation.Protocol" minOccurs="0"/>
 *         &lt;element name="supportingImmunization" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="supportingPatientInformation" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ImmunizationRecommendation.Recommendation", propOrder = {
    "date",
    "vaccineType",
    "doseNumber",
    "forecastStatus",
    "dateCriterion",
    "protocol",
    "supportingImmunization",
    "supportingPatientInformation"
})
@Entity(name = "ImmunizationRecommendationRecommendation")
@Table(name = "IMMUNIZATIONRECOMMENDATIONRE_0")
public class ImmunizationRecommendationRecommendation
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected DateTime date;
    @XmlElement(required = true)
    protected CodeableConcept vaccineType;
    protected Integer doseNumber;
    @XmlElement(required = true)
    protected CodeableConcept forecastStatus;
    protected List<ImmunizationRecommendationDateCriterion> dateCriterion;
    protected ImmunizationRecommendationProtocol protocol;
    protected List<ResourceReference> supportingImmunization;
    protected List<ResourceReference> supportingPatientInformation;

    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__IMMUNIZATIONRECOMMENDA_0")
    public DateTime getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDate(DateTime value) {
        this.date = value;
    }

    /**
     * Gets the value of the vaccineType property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VACCINETYPE_IMMUNIZATIONRECO_0")
    public CodeableConcept getVaccineType() {
        return vaccineType;
    }

    /**
     * Sets the value of the vaccineType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setVaccineType(CodeableConcept value) {
        this.vaccineType = value;
    }

    /**
     * Gets the value of the doseNumber property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSENUMBER_IMMUNIZATIONRECOM_0")
    public Integer getDoseNumber() {
        return doseNumber;
    }

    /**
     * Sets the value of the doseNumber property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setDoseNumber(Integer value) {
        this.doseNumber = value;
    }

    /**
     * Gets the value of the forecastStatus property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORECASTSTATUS_IMMUNIZATIONR_0")
    public CodeableConcept getForecastStatus() {
        return forecastStatus;
    }

    /**
     * Sets the value of the forecastStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setForecastStatus(CodeableConcept value) {
        this.forecastStatus = value;
    }

    /**
     * Gets the value of the dateCriterion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dateCriterion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDateCriterion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ImmunizationRecommendationDateCriterion }
     * 
     * 
     */
    @OneToMany(targetEntity = ImmunizationRecommendationDateCriterion.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATECRITERION_IMMUNIZATIONRE_0")
    public List<ImmunizationRecommendationDateCriterion> getDateCriterion() {
        if (dateCriterion == null) {
            dateCriterion = new ArrayList<ImmunizationRecommendationDateCriterion>();
        }
        return this.dateCriterion;
    }

    /**
     * 
     * 
     */
    public void setDateCriterion(List<ImmunizationRecommendationDateCriterion> dateCriterion) {
        this.dateCriterion = dateCriterion;
    }

    /**
     * Gets the value of the protocol property.
     * 
     * @return
     *     possible object is
     *     {@link ImmunizationRecommendationProtocol }
     *     
     */
    @ManyToOne(targetEntity = ImmunizationRecommendationProtocol.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PROTOCOL_IMMUNIZATIONRECOMME_0")
    public ImmunizationRecommendationProtocol getProtocol() {
        return protocol;
    }

    /**
     * Sets the value of the protocol property.
     * 
     * @param value
     *     allowed object is
     *     {@link ImmunizationRecommendationProtocol }
     *     
     */
    public void setProtocol(ImmunizationRecommendationProtocol value) {
        this.protocol = value;
    }

    /**
     * Gets the value of the supportingImmunization property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the supportingImmunization property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSupportingImmunization().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPORTINGIMMUNIZATION_IMMUN_0")
    public List<ResourceReference> getSupportingImmunization() {
        if (supportingImmunization == null) {
            supportingImmunization = new ArrayList<ResourceReference>();
        }
        return this.supportingImmunization;
    }

    /**
     * 
     * 
     */
    public void setSupportingImmunization(List<ResourceReference> supportingImmunization) {
        this.supportingImmunization = supportingImmunization;
    }

    /**
     * Gets the value of the supportingPatientInformation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the supportingPatientInformation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSupportingPatientInformation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUPPORTINGPATIENTINFORMATION_0")
    public List<ResourceReference> getSupportingPatientInformation() {
        if (supportingPatientInformation == null) {
            supportingPatientInformation = new ArrayList<ResourceReference>();
        }
        return this.supportingPatientInformation;
    }

    /**
     * 
     * 
     */
    public void setSupportingPatientInformation(List<ResourceReference> supportingPatientInformation) {
        this.supportingPatientInformation = supportingPatientInformation;
    }

    public ImmunizationRecommendationRecommendation withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public ImmunizationRecommendationRecommendation withVaccineType(CodeableConcept value) {
        setVaccineType(value);
        return this;
    }

    public ImmunizationRecommendationRecommendation withDoseNumber(Integer value) {
        setDoseNumber(value);
        return this;
    }

    public ImmunizationRecommendationRecommendation withForecastStatus(CodeableConcept value) {
        setForecastStatus(value);
        return this;
    }

    public ImmunizationRecommendationRecommendation withDateCriterion(ImmunizationRecommendationDateCriterion... values) {
        if (values!= null) {
            for (ImmunizationRecommendationDateCriterion value: values) {
                getDateCriterion().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withDateCriterion(Collection<ImmunizationRecommendationDateCriterion> values) {
        if (values!= null) {
            getDateCriterion().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withDateCriterion(List<ImmunizationRecommendationDateCriterion> dateCriterion) {
        setDateCriterion(dateCriterion);
        return this;
    }

    public ImmunizationRecommendationRecommendation withProtocol(ImmunizationRecommendationProtocol value) {
        setProtocol(value);
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingImmunization(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSupportingImmunization().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingImmunization(Collection<ResourceReference> values) {
        if (values!= null) {
            getSupportingImmunization().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingImmunization(List<ResourceReference> supportingImmunization) {
        setSupportingImmunization(supportingImmunization);
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingPatientInformation(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getSupportingPatientInformation().add(value);
            }
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingPatientInformation(Collection<ResourceReference> values) {
        if (values!= null) {
            getSupportingPatientInformation().addAll(values);
        }
        return this;
    }

    public ImmunizationRecommendationRecommendation withSupportingPatientInformation(List<ResourceReference> supportingPatientInformation) {
        setSupportingPatientInformation(supportingPatientInformation);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ImmunizationRecommendationRecommendation withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImmunizationRecommendationRecommendation)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImmunizationRecommendationRecommendation that = ((ImmunizationRecommendationRecommendation) object);
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            CodeableConcept lhsVaccineType;
            lhsVaccineType = this.getVaccineType();
            CodeableConcept rhsVaccineType;
            rhsVaccineType = that.getVaccineType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "vaccineType", lhsVaccineType), LocatorUtils.property(thatLocator, "vaccineType", rhsVaccineType), lhsVaccineType, rhsVaccineType)) {
                return false;
            }
        }
        {
            Integer lhsDoseNumber;
            lhsDoseNumber = this.getDoseNumber();
            Integer rhsDoseNumber;
            rhsDoseNumber = that.getDoseNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "doseNumber", lhsDoseNumber), LocatorUtils.property(thatLocator, "doseNumber", rhsDoseNumber), lhsDoseNumber, rhsDoseNumber)) {
                return false;
            }
        }
        {
            CodeableConcept lhsForecastStatus;
            lhsForecastStatus = this.getForecastStatus();
            CodeableConcept rhsForecastStatus;
            rhsForecastStatus = that.getForecastStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "forecastStatus", lhsForecastStatus), LocatorUtils.property(thatLocator, "forecastStatus", rhsForecastStatus), lhsForecastStatus, rhsForecastStatus)) {
                return false;
            }
        }
        {
            List<ImmunizationRecommendationDateCriterion> lhsDateCriterion;
            lhsDateCriterion = (((this.dateCriterion!= null)&&(!this.dateCriterion.isEmpty()))?this.getDateCriterion():null);
            List<ImmunizationRecommendationDateCriterion> rhsDateCriterion;
            rhsDateCriterion = (((that.dateCriterion!= null)&&(!that.dateCriterion.isEmpty()))?that.getDateCriterion():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateCriterion", lhsDateCriterion), LocatorUtils.property(thatLocator, "dateCriterion", rhsDateCriterion), lhsDateCriterion, rhsDateCriterion)) {
                return false;
            }
        }
        {
            ImmunizationRecommendationProtocol lhsProtocol;
            lhsProtocol = this.getProtocol();
            ImmunizationRecommendationProtocol rhsProtocol;
            rhsProtocol = that.getProtocol();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "protocol", lhsProtocol), LocatorUtils.property(thatLocator, "protocol", rhsProtocol), lhsProtocol, rhsProtocol)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSupportingImmunization;
            lhsSupportingImmunization = (((this.supportingImmunization!= null)&&(!this.supportingImmunization.isEmpty()))?this.getSupportingImmunization():null);
            List<ResourceReference> rhsSupportingImmunization;
            rhsSupportingImmunization = (((that.supportingImmunization!= null)&&(!that.supportingImmunization.isEmpty()))?that.getSupportingImmunization():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supportingImmunization", lhsSupportingImmunization), LocatorUtils.property(thatLocator, "supportingImmunization", rhsSupportingImmunization), lhsSupportingImmunization, rhsSupportingImmunization)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsSupportingPatientInformation;
            lhsSupportingPatientInformation = (((this.supportingPatientInformation!= null)&&(!this.supportingPatientInformation.isEmpty()))?this.getSupportingPatientInformation():null);
            List<ResourceReference> rhsSupportingPatientInformation;
            rhsSupportingPatientInformation = (((that.supportingPatientInformation!= null)&&(!that.supportingPatientInformation.isEmpty()))?that.getSupportingPatientInformation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "supportingPatientInformation", lhsSupportingPatientInformation), LocatorUtils.property(thatLocator, "supportingPatientInformation", rhsSupportingPatientInformation), lhsSupportingPatientInformation, rhsSupportingPatientInformation)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            CodeableConcept theVaccineType;
            theVaccineType = this.getVaccineType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vaccineType", theVaccineType), currentHashCode, theVaccineType);
        }
        {
            Integer theDoseNumber;
            theDoseNumber = this.getDoseNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "doseNumber", theDoseNumber), currentHashCode, theDoseNumber);
        }
        {
            CodeableConcept theForecastStatus;
            theForecastStatus = this.getForecastStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "forecastStatus", theForecastStatus), currentHashCode, theForecastStatus);
        }
        {
            List<ImmunizationRecommendationDateCriterion> theDateCriterion;
            theDateCriterion = (((this.dateCriterion!= null)&&(!this.dateCriterion.isEmpty()))?this.getDateCriterion():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateCriterion", theDateCriterion), currentHashCode, theDateCriterion);
        }
        {
            ImmunizationRecommendationProtocol theProtocol;
            theProtocol = this.getProtocol();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "protocol", theProtocol), currentHashCode, theProtocol);
        }
        {
            List<ResourceReference> theSupportingImmunization;
            theSupportingImmunization = (((this.supportingImmunization!= null)&&(!this.supportingImmunization.isEmpty()))?this.getSupportingImmunization():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supportingImmunization", theSupportingImmunization), currentHashCode, theSupportingImmunization);
        }
        {
            List<ResourceReference> theSupportingPatientInformation;
            theSupportingPatientInformation = (((this.supportingPatientInformation!= null)&&(!this.supportingPatientInformation.isEmpty()))?this.getSupportingPatientInformation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "supportingPatientInformation", theSupportingPatientInformation), currentHashCode, theSupportingPatientInformation);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
