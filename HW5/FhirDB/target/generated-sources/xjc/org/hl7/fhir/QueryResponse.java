//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A description of a query with a set of parameters.
 * 
 * <p>Java class for Query.Response complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Query.Response">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}uri"/>
 *         &lt;element name="outcome" type="{http://hl7.org/fhir}QueryOutcome"/>
 *         &lt;element name="total" type="{http://hl7.org/fhir}integer" minOccurs="0"/>
 *         &lt;element name="parameter" type="{http://hl7.org/fhir}Extension" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="first" type="{http://hl7.org/fhir}Extension" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="previous" type="{http://hl7.org/fhir}Extension" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="next" type="{http://hl7.org/fhir}Extension" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="last" type="{http://hl7.org/fhir}Extension" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="reference" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Query.Response", propOrder = {
    "identifier",
    "outcome",
    "total",
    "parameter",
    "first",
    "previous",
    "next",
    "last",
    "reference"
})
@Entity(name = "QueryResponse")
@Table(name = "QUERYRESPONSE")
public class QueryResponse
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected Uri identifier;
    @XmlElement(required = true)
    protected QueryOutcome outcome;
    protected Integer total;
    protected List<Extension> parameter;
    protected List<Extension> first;
    protected List<Extension> previous;
    protected List<Extension> next;
    protected List<Extension> last;
    protected List<ResourceReference> reference;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_QUERYRESPONSE_HJID")
    public Uri getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setIdentifier(Uri value) {
        this.identifier = value;
    }

    /**
     * Gets the value of the outcome property.
     * 
     * @return
     *     possible object is
     *     {@link QueryOutcome }
     *     
     */
    @ManyToOne(targetEntity = QueryOutcome.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OUTCOME_QUERYRESPONSE_HJID")
    public QueryOutcome getOutcome() {
        return outcome;
    }

    /**
     * Sets the value of the outcome property.
     * 
     * @param value
     *     allowed object is
     *     {@link QueryOutcome }
     *     
     */
    public void setOutcome(QueryOutcome value) {
        this.outcome = value;
    }

    /**
     * Gets the value of the total property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TOTAL_QUERYRESPONSE_HJID")
    public Integer getTotal() {
        return total;
    }

    /**
     * Sets the value of the total property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setTotal(Integer value) {
        this.total = value;
    }

    /**
     * Gets the value of the parameter property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the parameter property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getParameter().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extension }
     * 
     * 
     */
    @OneToMany(targetEntity = Extension.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PARAMETER__QUERYRESPONSE_HJID")
    public List<Extension> getParameter() {
        if (parameter == null) {
            parameter = new ArrayList<Extension>();
        }
        return this.parameter;
    }

    /**
     * 
     * 
     */
    public void setParameter(List<Extension> parameter) {
        this.parameter = parameter;
    }

    /**
     * Gets the value of the first property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the first property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFirst().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extension }
     * 
     * 
     */
    @OneToMany(targetEntity = Extension.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FIRST__QUERYRESPONSE_HJID")
    public List<Extension> getFirst() {
        if (first == null) {
            first = new ArrayList<Extension>();
        }
        return this.first;
    }

    /**
     * 
     * 
     */
    public void setFirst(List<Extension> first) {
        this.first = first;
    }

    /**
     * Gets the value of the previous property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the previous property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPrevious().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extension }
     * 
     * 
     */
    @OneToMany(targetEntity = Extension.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PREVIOUS_QUERYRESPONSE_HJID")
    public List<Extension> getPrevious() {
        if (previous == null) {
            previous = new ArrayList<Extension>();
        }
        return this.previous;
    }

    /**
     * 
     * 
     */
    public void setPrevious(List<Extension> previous) {
        this.previous = previous;
    }

    /**
     * Gets the value of the next property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the next property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNext().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extension }
     * 
     * 
     */
    @OneToMany(targetEntity = Extension.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NEXT__QUERYRESPONSE_HJID")
    public List<Extension> getNext() {
        if (next == null) {
            next = new ArrayList<Extension>();
        }
        return this.next;
    }

    /**
     * 
     * 
     */
    public void setNext(List<Extension> next) {
        this.next = next;
    }

    /**
     * Gets the value of the last property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the last property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLast().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Extension }
     * 
     * 
     */
    @OneToMany(targetEntity = Extension.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LAST__QUERYRESPONSE_HJID")
    public List<Extension> getLast() {
        if (last == null) {
            last = new ArrayList<Extension>();
        }
        return this.last;
    }

    /**
     * 
     * 
     */
    public void setLast(List<Extension> last) {
        this.last = last;
    }

    /**
     * Gets the value of the reference property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reference property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReference().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFERENCE_QUERYRESPONSE_HJID")
    public List<ResourceReference> getReference() {
        if (reference == null) {
            reference = new ArrayList<ResourceReference>();
        }
        return this.reference;
    }

    /**
     * 
     * 
     */
    public void setReference(List<ResourceReference> reference) {
        this.reference = reference;
    }

    public QueryResponse withIdentifier(Uri value) {
        setIdentifier(value);
        return this;
    }

    public QueryResponse withOutcome(QueryOutcome value) {
        setOutcome(value);
        return this;
    }

    public QueryResponse withTotal(Integer value) {
        setTotal(value);
        return this;
    }

    public QueryResponse withParameter(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getParameter().add(value);
            }
        }
        return this;
    }

    public QueryResponse withParameter(Collection<Extension> values) {
        if (values!= null) {
            getParameter().addAll(values);
        }
        return this;
    }

    public QueryResponse withParameter(List<Extension> parameter) {
        setParameter(parameter);
        return this;
    }

    public QueryResponse withFirst(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getFirst().add(value);
            }
        }
        return this;
    }

    public QueryResponse withFirst(Collection<Extension> values) {
        if (values!= null) {
            getFirst().addAll(values);
        }
        return this;
    }

    public QueryResponse withFirst(List<Extension> first) {
        setFirst(first);
        return this;
    }

    public QueryResponse withPrevious(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getPrevious().add(value);
            }
        }
        return this;
    }

    public QueryResponse withPrevious(Collection<Extension> values) {
        if (values!= null) {
            getPrevious().addAll(values);
        }
        return this;
    }

    public QueryResponse withPrevious(List<Extension> previous) {
        setPrevious(previous);
        return this;
    }

    public QueryResponse withNext(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getNext().add(value);
            }
        }
        return this;
    }

    public QueryResponse withNext(Collection<Extension> values) {
        if (values!= null) {
            getNext().addAll(values);
        }
        return this;
    }

    public QueryResponse withNext(List<Extension> next) {
        setNext(next);
        return this;
    }

    public QueryResponse withLast(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getLast().add(value);
            }
        }
        return this;
    }

    public QueryResponse withLast(Collection<Extension> values) {
        if (values!= null) {
            getLast().addAll(values);
        }
        return this;
    }

    public QueryResponse withLast(List<Extension> last) {
        setLast(last);
        return this;
    }

    public QueryResponse withReference(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getReference().add(value);
            }
        }
        return this;
    }

    public QueryResponse withReference(Collection<ResourceReference> values) {
        if (values!= null) {
            getReference().addAll(values);
        }
        return this;
    }

    public QueryResponse withReference(List<ResourceReference> reference) {
        setReference(reference);
        return this;
    }

    @Override
    public QueryResponse withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public QueryResponse withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public QueryResponse withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public QueryResponse withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public QueryResponse withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public QueryResponse withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public QueryResponse withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof QueryResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final QueryResponse that = ((QueryResponse) object);
        {
            Uri lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            Uri rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            QueryOutcome lhsOutcome;
            lhsOutcome = this.getOutcome();
            QueryOutcome rhsOutcome;
            rhsOutcome = that.getOutcome();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outcome", lhsOutcome), LocatorUtils.property(thatLocator, "outcome", rhsOutcome), lhsOutcome, rhsOutcome)) {
                return false;
            }
        }
        {
            Integer lhsTotal;
            lhsTotal = this.getTotal();
            Integer rhsTotal;
            rhsTotal = that.getTotal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "total", lhsTotal), LocatorUtils.property(thatLocator, "total", rhsTotal), lhsTotal, rhsTotal)) {
                return false;
            }
        }
        {
            List<Extension> lhsParameter;
            lhsParameter = (((this.parameter!= null)&&(!this.parameter.isEmpty()))?this.getParameter():null);
            List<Extension> rhsParameter;
            rhsParameter = (((that.parameter!= null)&&(!that.parameter.isEmpty()))?that.getParameter():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "parameter", lhsParameter), LocatorUtils.property(thatLocator, "parameter", rhsParameter), lhsParameter, rhsParameter)) {
                return false;
            }
        }
        {
            List<Extension> lhsFirst;
            lhsFirst = (((this.first!= null)&&(!this.first.isEmpty()))?this.getFirst():null);
            List<Extension> rhsFirst;
            rhsFirst = (((that.first!= null)&&(!that.first.isEmpty()))?that.getFirst():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "first", lhsFirst), LocatorUtils.property(thatLocator, "first", rhsFirst), lhsFirst, rhsFirst)) {
                return false;
            }
        }
        {
            List<Extension> lhsPrevious;
            lhsPrevious = (((this.previous!= null)&&(!this.previous.isEmpty()))?this.getPrevious():null);
            List<Extension> rhsPrevious;
            rhsPrevious = (((that.previous!= null)&&(!that.previous.isEmpty()))?that.getPrevious():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "previous", lhsPrevious), LocatorUtils.property(thatLocator, "previous", rhsPrevious), lhsPrevious, rhsPrevious)) {
                return false;
            }
        }
        {
            List<Extension> lhsNext;
            lhsNext = (((this.next!= null)&&(!this.next.isEmpty()))?this.getNext():null);
            List<Extension> rhsNext;
            rhsNext = (((that.next!= null)&&(!that.next.isEmpty()))?that.getNext():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "next", lhsNext), LocatorUtils.property(thatLocator, "next", rhsNext), lhsNext, rhsNext)) {
                return false;
            }
        }
        {
            List<Extension> lhsLast;
            lhsLast = (((this.last!= null)&&(!this.last.isEmpty()))?this.getLast():null);
            List<Extension> rhsLast;
            rhsLast = (((that.last!= null)&&(!that.last.isEmpty()))?that.getLast():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "last", lhsLast), LocatorUtils.property(thatLocator, "last", rhsLast), lhsLast, rhsLast)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsReference;
            lhsReference = (((this.reference!= null)&&(!this.reference.isEmpty()))?this.getReference():null);
            List<ResourceReference> rhsReference;
            rhsReference = (((that.reference!= null)&&(!that.reference.isEmpty()))?that.getReference():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reference", lhsReference), LocatorUtils.property(thatLocator, "reference", rhsReference), lhsReference, rhsReference)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            QueryOutcome theOutcome;
            theOutcome = this.getOutcome();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outcome", theOutcome), currentHashCode, theOutcome);
        }
        {
            Integer theTotal;
            theTotal = this.getTotal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "total", theTotal), currentHashCode, theTotal);
        }
        {
            List<Extension> theParameter;
            theParameter = (((this.parameter!= null)&&(!this.parameter.isEmpty()))?this.getParameter():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "parameter", theParameter), currentHashCode, theParameter);
        }
        {
            List<Extension> theFirst;
            theFirst = (((this.first!= null)&&(!this.first.isEmpty()))?this.getFirst():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "first", theFirst), currentHashCode, theFirst);
        }
        {
            List<Extension> thePrevious;
            thePrevious = (((this.previous!= null)&&(!this.previous.isEmpty()))?this.getPrevious():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "previous", thePrevious), currentHashCode, thePrevious);
        }
        {
            List<Extension> theNext;
            theNext = (((this.next!= null)&&(!this.next.isEmpty()))?this.getNext():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "next", theNext), currentHashCode, theNext);
        }
        {
            List<Extension> theLast;
            theLast = (((this.last!= null)&&(!this.last.isEmpty()))?this.getLast():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "last", theLast), currentHashCode, theLast);
        }
        {
            List<ResourceReference> theReference;
            theReference = (((this.reference!= null)&&(!this.reference.isEmpty()))?this.getReference():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reference", theReference), currentHashCode, theReference);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
