//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Provenance complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Provenance">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="target" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded"/>
 *         &lt;element name="period" type="{http://hl7.org/fhir}Period" minOccurs="0"/>
 *         &lt;element name="recorded" type="{http://hl7.org/fhir}instant"/>
 *         &lt;element name="reason" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="location" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="policy" type="{http://hl7.org/fhir}uri" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="agent" type="{http://hl7.org/fhir}Provenance.Agent" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="entity" type="{http://hl7.org/fhir}Provenance.Entity" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="integritySignature" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Provenance", propOrder = {
    "target",
    "period",
    "recorded",
    "reason",
    "location",
    "policy",
    "agent",
    "entity",
    "integritySignature"
})
@Entity(name = "Provenance")
@Table(name = "PROVENANCE")
public class Provenance
    extends Resource
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected List<ResourceReference> target;
    protected Period period;
    @XmlElement(required = true)
    protected Instant recorded;
    protected CodeableConcept reason;
    protected ResourceReference location;
    protected List<Uri> policy;
    protected List<ProvenanceAgent> agent;
    protected List<ProvenanceEntity> entity;
    protected org.hl7.fhir.String integritySignature;

    /**
     * Gets the value of the target property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the target property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTarget().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TARGET_PROVENANCE_HJID")
    public List<ResourceReference> getTarget() {
        if (target == null) {
            target = new ArrayList<ResourceReference>();
        }
        return this.target;
    }

    /**
     * 
     * 
     */
    public void setTarget(List<ResourceReference> target) {
        this.target = target;
    }

    /**
     * Gets the value of the period property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_PROVENANCE_HJID")
    public Period getPeriod() {
        return period;
    }

    /**
     * Sets the value of the period property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setPeriod(Period value) {
        this.period = value;
    }

    /**
     * Gets the value of the recorded property.
     * 
     * @return
     *     possible object is
     *     {@link Instant }
     *     
     */
    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDED_PROVENANCE_HJID")
    public Instant getRecorded() {
        return recorded;
    }

    /**
     * Sets the value of the recorded property.
     * 
     * @param value
     *     allowed object is
     *     {@link Instant }
     *     
     */
    public void setRecorded(Instant value) {
        this.recorded = value;
    }

    /**
     * Gets the value of the reason property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_PROVENANCE_HJID")
    public CodeableConcept getReason() {
        return reason;
    }

    /**
     * Sets the value of the reason property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setReason(CodeableConcept value) {
        this.reason = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__PROVENANCE_HJID")
    public ResourceReference getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setLocation(ResourceReference value) {
        this.location = value;
    }

    /**
     * Gets the value of the policy property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the policy property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPolicy().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Uri }
     * 
     * 
     */
    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POLICY_PROVENANCE_HJID")
    public List<Uri> getPolicy() {
        if (policy == null) {
            policy = new ArrayList<Uri>();
        }
        return this.policy;
    }

    /**
     * 
     * 
     */
    public void setPolicy(List<Uri> policy) {
        this.policy = policy;
    }

    /**
     * Gets the value of the agent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the agent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAgent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProvenanceAgent }
     * 
     * 
     */
    @OneToMany(targetEntity = ProvenanceAgent.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AGENT_PROVENANCE_HJID")
    public List<ProvenanceAgent> getAgent() {
        if (agent == null) {
            agent = new ArrayList<ProvenanceAgent>();
        }
        return this.agent;
    }

    /**
     * 
     * 
     */
    public void setAgent(List<ProvenanceAgent> agent) {
        this.agent = agent;
    }

    /**
     * Gets the value of the entity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the entity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEntity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProvenanceEntity }
     * 
     * 
     */
    @OneToMany(targetEntity = ProvenanceEntity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENTITY_PROVENANCE_HJID")
    public List<ProvenanceEntity> getEntity() {
        if (entity == null) {
            entity = new ArrayList<ProvenanceEntity>();
        }
        return this.entity;
    }

    /**
     * 
     * 
     */
    public void setEntity(List<ProvenanceEntity> entity) {
        this.entity = entity;
    }

    /**
     * Gets the value of the integritySignature property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INTEGRITYSIGNATURE_PROVENANC_0")
    public org.hl7.fhir.String getIntegritySignature() {
        return integritySignature;
    }

    /**
     * Sets the value of the integritySignature property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setIntegritySignature(org.hl7.fhir.String value) {
        this.integritySignature = value;
    }

    public Provenance withTarget(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getTarget().add(value);
            }
        }
        return this;
    }

    public Provenance withTarget(Collection<ResourceReference> values) {
        if (values!= null) {
            getTarget().addAll(values);
        }
        return this;
    }

    public Provenance withTarget(List<ResourceReference> target) {
        setTarget(target);
        return this;
    }

    public Provenance withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public Provenance withRecorded(Instant value) {
        setRecorded(value);
        return this;
    }

    public Provenance withReason(CodeableConcept value) {
        setReason(value);
        return this;
    }

    public Provenance withLocation(ResourceReference value) {
        setLocation(value);
        return this;
    }

    public Provenance withPolicy(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getPolicy().add(value);
            }
        }
        return this;
    }

    public Provenance withPolicy(Collection<Uri> values) {
        if (values!= null) {
            getPolicy().addAll(values);
        }
        return this;
    }

    public Provenance withPolicy(List<Uri> policy) {
        setPolicy(policy);
        return this;
    }

    public Provenance withAgent(ProvenanceAgent... values) {
        if (values!= null) {
            for (ProvenanceAgent value: values) {
                getAgent().add(value);
            }
        }
        return this;
    }

    public Provenance withAgent(Collection<ProvenanceAgent> values) {
        if (values!= null) {
            getAgent().addAll(values);
        }
        return this;
    }

    public Provenance withAgent(List<ProvenanceAgent> agent) {
        setAgent(agent);
        return this;
    }

    public Provenance withEntity(ProvenanceEntity... values) {
        if (values!= null) {
            for (ProvenanceEntity value: values) {
                getEntity().add(value);
            }
        }
        return this;
    }

    public Provenance withEntity(Collection<ProvenanceEntity> values) {
        if (values!= null) {
            getEntity().addAll(values);
        }
        return this;
    }

    public Provenance withEntity(List<ProvenanceEntity> entity) {
        setEntity(entity);
        return this;
    }

    public Provenance withIntegritySignature(org.hl7.fhir.String value) {
        setIntegritySignature(value);
        return this;
    }

    @Override
    public Provenance withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Provenance withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Provenance withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Provenance withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Provenance withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Provenance withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Provenance withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Provenance withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Provenance withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Provenance withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Provenance withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Provenance withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Provenance)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Provenance that = ((Provenance) object);
        {
            List<ResourceReference> lhsTarget;
            lhsTarget = (((this.target!= null)&&(!this.target.isEmpty()))?this.getTarget():null);
            List<ResourceReference> rhsTarget;
            rhsTarget = (((that.target!= null)&&(!that.target.isEmpty()))?that.getTarget():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "target", lhsTarget), LocatorUtils.property(thatLocator, "target", rhsTarget), lhsTarget, rhsTarget)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            Instant lhsRecorded;
            lhsRecorded = this.getRecorded();
            Instant rhsRecorded;
            rhsRecorded = that.getRecorded();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recorded", lhsRecorded), LocatorUtils.property(thatLocator, "recorded", rhsRecorded), lhsRecorded, rhsRecorded)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReason;
            lhsReason = this.getReason();
            CodeableConcept rhsReason;
            rhsReason = that.getReason();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            ResourceReference lhsLocation;
            lhsLocation = this.getLocation();
            ResourceReference rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            List<Uri> lhsPolicy;
            lhsPolicy = (((this.policy!= null)&&(!this.policy.isEmpty()))?this.getPolicy():null);
            List<Uri> rhsPolicy;
            rhsPolicy = (((that.policy!= null)&&(!that.policy.isEmpty()))?that.getPolicy():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "policy", lhsPolicy), LocatorUtils.property(thatLocator, "policy", rhsPolicy), lhsPolicy, rhsPolicy)) {
                return false;
            }
        }
        {
            List<ProvenanceAgent> lhsAgent;
            lhsAgent = (((this.agent!= null)&&(!this.agent.isEmpty()))?this.getAgent():null);
            List<ProvenanceAgent> rhsAgent;
            rhsAgent = (((that.agent!= null)&&(!that.agent.isEmpty()))?that.getAgent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "agent", lhsAgent), LocatorUtils.property(thatLocator, "agent", rhsAgent), lhsAgent, rhsAgent)) {
                return false;
            }
        }
        {
            List<ProvenanceEntity> lhsEntity;
            lhsEntity = (((this.entity!= null)&&(!this.entity.isEmpty()))?this.getEntity():null);
            List<ProvenanceEntity> rhsEntity;
            rhsEntity = (((that.entity!= null)&&(!that.entity.isEmpty()))?that.getEntity():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "entity", lhsEntity), LocatorUtils.property(thatLocator, "entity", rhsEntity), lhsEntity, rhsEntity)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsIntegritySignature;
            lhsIntegritySignature = this.getIntegritySignature();
            org.hl7.fhir.String rhsIntegritySignature;
            rhsIntegritySignature = that.getIntegritySignature();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "integritySignature", lhsIntegritySignature), LocatorUtils.property(thatLocator, "integritySignature", rhsIntegritySignature), lhsIntegritySignature, rhsIntegritySignature)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<ResourceReference> theTarget;
            theTarget = (((this.target!= null)&&(!this.target.isEmpty()))?this.getTarget():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "target", theTarget), currentHashCode, theTarget);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            Instant theRecorded;
            theRecorded = this.getRecorded();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recorded", theRecorded), currentHashCode, theRecorded);
        }
        {
            CodeableConcept theReason;
            theReason = this.getReason();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            ResourceReference theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            List<Uri> thePolicy;
            thePolicy = (((this.policy!= null)&&(!this.policy.isEmpty()))?this.getPolicy():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "policy", thePolicy), currentHashCode, thePolicy);
        }
        {
            List<ProvenanceAgent> theAgent;
            theAgent = (((this.agent!= null)&&(!this.agent.isEmpty()))?this.getAgent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "agent", theAgent), currentHashCode, theAgent);
        }
        {
            List<ProvenanceEntity> theEntity;
            theEntity = (((this.entity!= null)&&(!this.entity.isEmpty()))?this.getEntity():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "entity", theEntity), currentHashCode, theEntity);
        }
        {
            org.hl7.fhir.String theIntegritySignature;
            theIntegritySignature = this.getIntegritySignature();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "integritySignature", theIntegritySignature), currentHashCode, theIntegritySignature);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
