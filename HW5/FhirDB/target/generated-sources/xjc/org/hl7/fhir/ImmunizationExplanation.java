//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Immunization event information.
 * 
 * <p>Java class for Immunization.Explanation complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Immunization.Explanation">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="reason" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="refusalReason" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Immunization.Explanation", propOrder = {
    "reason",
    "refusalReason"
})
@Entity(name = "ImmunizationExplanation")
@Table(name = "IMMUNIZATIONEXPLANATION")
public class ImmunizationExplanation
    extends BackboneElement
    implements Equals, HashCode
{

    protected List<CodeableConcept> reason;
    protected List<CodeableConcept> refusalReason;

    /**
     * Gets the value of the reason property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reason property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReason().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASON_IMMUNIZATIONEXPLANATI_0")
    public List<CodeableConcept> getReason() {
        if (reason == null) {
            reason = new ArrayList<CodeableConcept>();
        }
        return this.reason;
    }

    /**
     * 
     * 
     */
    public void setReason(List<CodeableConcept> reason) {
        this.reason = reason;
    }

    /**
     * Gets the value of the refusalReason property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the refusalReason property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRefusalReason().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REFUSALREASON_IMMUNIZATIONEX_0")
    public List<CodeableConcept> getRefusalReason() {
        if (refusalReason == null) {
            refusalReason = new ArrayList<CodeableConcept>();
        }
        return this.refusalReason;
    }

    /**
     * 
     * 
     */
    public void setRefusalReason(List<CodeableConcept> refusalReason) {
        this.refusalReason = refusalReason;
    }

    public ImmunizationExplanation withReason(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getReason().add(value);
            }
        }
        return this;
    }

    public ImmunizationExplanation withReason(Collection<CodeableConcept> values) {
        if (values!= null) {
            getReason().addAll(values);
        }
        return this;
    }

    public ImmunizationExplanation withReason(List<CodeableConcept> reason) {
        setReason(reason);
        return this;
    }

    public ImmunizationExplanation withRefusalReason(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getRefusalReason().add(value);
            }
        }
        return this;
    }

    public ImmunizationExplanation withRefusalReason(Collection<CodeableConcept> values) {
        if (values!= null) {
            getRefusalReason().addAll(values);
        }
        return this;
    }

    public ImmunizationExplanation withRefusalReason(List<CodeableConcept> refusalReason) {
        setRefusalReason(refusalReason);
        return this;
    }

    @Override
    public ImmunizationExplanation withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationExplanation withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationExplanation withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ImmunizationExplanation withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ImmunizationExplanation withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ImmunizationExplanation withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ImmunizationExplanation withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ImmunizationExplanation)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ImmunizationExplanation that = ((ImmunizationExplanation) object);
        {
            List<CodeableConcept> lhsReason;
            lhsReason = (((this.reason!= null)&&(!this.reason.isEmpty()))?this.getReason():null);
            List<CodeableConcept> rhsReason;
            rhsReason = (((that.reason!= null)&&(!that.reason.isEmpty()))?that.getReason():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reason", lhsReason), LocatorUtils.property(thatLocator, "reason", rhsReason), lhsReason, rhsReason)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsRefusalReason;
            lhsRefusalReason = (((this.refusalReason!= null)&&(!this.refusalReason.isEmpty()))?this.getRefusalReason():null);
            List<CodeableConcept> rhsRefusalReason;
            rhsRefusalReason = (((that.refusalReason!= null)&&(!that.refusalReason.isEmpty()))?that.getRefusalReason():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refusalReason", lhsRefusalReason), LocatorUtils.property(thatLocator, "refusalReason", rhsRefusalReason), lhsRefusalReason, rhsRefusalReason)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CodeableConcept> theReason;
            theReason = (((this.reason!= null)&&(!this.reason.isEmpty()))?this.getReason():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reason", theReason), currentHashCode, theReason);
        }
        {
            List<CodeableConcept> theRefusalReason;
            theRefusalReason = (((this.refusalReason!= null)&&(!this.refusalReason.isEmpty()))?this.getRefusalReason():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refusalReason", theRefusalReason), currentHashCode, theRefusalReason);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
