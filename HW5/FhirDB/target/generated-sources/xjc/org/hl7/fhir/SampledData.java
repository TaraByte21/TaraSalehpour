//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions
 * 
 * <p>Java class for SampledData complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SampledData">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Element">
 *       &lt;sequence>
 *         &lt;element name="origin" type="{http://hl7.org/fhir}Quantity"/>
 *         &lt;element name="period" type="{http://hl7.org/fhir}decimal"/>
 *         &lt;element name="factor" type="{http://hl7.org/fhir}decimal" minOccurs="0"/>
 *         &lt;element name="lowerLimit" type="{http://hl7.org/fhir}decimal" minOccurs="0"/>
 *         &lt;element name="upperLimit" type="{http://hl7.org/fhir}decimal" minOccurs="0"/>
 *         &lt;element name="dimensions" type="{http://hl7.org/fhir}integer"/>
 *         &lt;element name="data" type="{http://hl7.org/fhir}SampledDataDataType"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SampledData", propOrder = {
    "origin",
    "period",
    "factor",
    "lowerLimit",
    "upperLimit",
    "dimensions",
    "data"
})
@Entity(name = "SampledData")
@Table(name = "SAMPLEDDATA")
public class SampledData
    extends Element
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected Quantity origin;
    @XmlElement(required = true)
    protected Decimal period;
    protected Decimal factor;
    protected Decimal lowerLimit;
    protected Decimal upperLimit;
    @XmlElement(required = true)
    protected Integer dimensions;
    @XmlElement(required = true)
    protected SampledDataDataType data;

    /**
     * Gets the value of the origin property.
     * 
     * @return
     *     possible object is
     *     {@link Quantity }
     *     
     */
    @ManyToOne(targetEntity = Quantity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORIGIN_SAMPLEDDATA_HJID")
    public Quantity getOrigin() {
        return origin;
    }

    /**
     * Sets the value of the origin property.
     * 
     * @param value
     *     allowed object is
     *     {@link Quantity }
     *     
     */
    public void setOrigin(Quantity value) {
        this.origin = value;
    }

    /**
     * Gets the value of the period property.
     * 
     * @return
     *     possible object is
     *     {@link Decimal }
     *     
     */
    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_SAMPLEDDATA_HJID")
    public Decimal getPeriod() {
        return period;
    }

    /**
     * Sets the value of the period property.
     * 
     * @param value
     *     allowed object is
     *     {@link Decimal }
     *     
     */
    public void setPeriod(Decimal value) {
        this.period = value;
    }

    /**
     * Gets the value of the factor property.
     * 
     * @return
     *     possible object is
     *     {@link Decimal }
     *     
     */
    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FACTOR_SAMPLEDDATA_HJID")
    public Decimal getFactor() {
        return factor;
    }

    /**
     * Sets the value of the factor property.
     * 
     * @param value
     *     allowed object is
     *     {@link Decimal }
     *     
     */
    public void setFactor(Decimal value) {
        this.factor = value;
    }

    /**
     * Gets the value of the lowerLimit property.
     * 
     * @return
     *     possible object is
     *     {@link Decimal }
     *     
     */
    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOWERLIMIT_SAMPLEDDATA_HJID")
    public Decimal getLowerLimit() {
        return lowerLimit;
    }

    /**
     * Sets the value of the lowerLimit property.
     * 
     * @param value
     *     allowed object is
     *     {@link Decimal }
     *     
     */
    public void setLowerLimit(Decimal value) {
        this.lowerLimit = value;
    }

    /**
     * Gets the value of the upperLimit property.
     * 
     * @return
     *     possible object is
     *     {@link Decimal }
     *     
     */
    @ManyToOne(targetEntity = Decimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "UPPERLIMIT_SAMPLEDDATA_HJID")
    public Decimal getUpperLimit() {
        return upperLimit;
    }

    /**
     * Sets the value of the upperLimit property.
     * 
     * @param value
     *     allowed object is
     *     {@link Decimal }
     *     
     */
    public void setUpperLimit(Decimal value) {
        this.upperLimit = value;
    }

    /**
     * Gets the value of the dimensions property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIMENSIONS_SAMPLEDDATA_HJID")
    public Integer getDimensions() {
        return dimensions;
    }

    /**
     * Sets the value of the dimensions property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setDimensions(Integer value) {
        this.dimensions = value;
    }

    /**
     * Gets the value of the data property.
     * 
     * @return
     *     possible object is
     *     {@link SampledDataDataType }
     *     
     */
    @ManyToOne(targetEntity = SampledDataDataType.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATA__SAMPLEDDATA_HJID")
    public SampledDataDataType getData() {
        return data;
    }

    /**
     * Sets the value of the data property.
     * 
     * @param value
     *     allowed object is
     *     {@link SampledDataDataType }
     *     
     */
    public void setData(SampledDataDataType value) {
        this.data = value;
    }

    public SampledData withOrigin(Quantity value) {
        setOrigin(value);
        return this;
    }

    public SampledData withPeriod(Decimal value) {
        setPeriod(value);
        return this;
    }

    public SampledData withFactor(Decimal value) {
        setFactor(value);
        return this;
    }

    public SampledData withLowerLimit(Decimal value) {
        setLowerLimit(value);
        return this;
    }

    public SampledData withUpperLimit(Decimal value) {
        setUpperLimit(value);
        return this;
    }

    public SampledData withDimensions(Integer value) {
        setDimensions(value);
        return this;
    }

    public SampledData withData(SampledDataDataType value) {
        setData(value);
        return this;
    }

    @Override
    public SampledData withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public SampledData withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public SampledData withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public SampledData withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SampledData)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SampledData that = ((SampledData) object);
        {
            Quantity lhsOrigin;
            lhsOrigin = this.getOrigin();
            Quantity rhsOrigin;
            rhsOrigin = that.getOrigin();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "origin", lhsOrigin), LocatorUtils.property(thatLocator, "origin", rhsOrigin), lhsOrigin, rhsOrigin)) {
                return false;
            }
        }
        {
            Decimal lhsPeriod;
            lhsPeriod = this.getPeriod();
            Decimal rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            Decimal lhsFactor;
            lhsFactor = this.getFactor();
            Decimal rhsFactor;
            rhsFactor = that.getFactor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "factor", lhsFactor), LocatorUtils.property(thatLocator, "factor", rhsFactor), lhsFactor, rhsFactor)) {
                return false;
            }
        }
        {
            Decimal lhsLowerLimit;
            lhsLowerLimit = this.getLowerLimit();
            Decimal rhsLowerLimit;
            rhsLowerLimit = that.getLowerLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lowerLimit", lhsLowerLimit), LocatorUtils.property(thatLocator, "lowerLimit", rhsLowerLimit), lhsLowerLimit, rhsLowerLimit)) {
                return false;
            }
        }
        {
            Decimal lhsUpperLimit;
            lhsUpperLimit = this.getUpperLimit();
            Decimal rhsUpperLimit;
            rhsUpperLimit = that.getUpperLimit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "upperLimit", lhsUpperLimit), LocatorUtils.property(thatLocator, "upperLimit", rhsUpperLimit), lhsUpperLimit, rhsUpperLimit)) {
                return false;
            }
        }
        {
            Integer lhsDimensions;
            lhsDimensions = this.getDimensions();
            Integer rhsDimensions;
            rhsDimensions = that.getDimensions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dimensions", lhsDimensions), LocatorUtils.property(thatLocator, "dimensions", rhsDimensions), lhsDimensions, rhsDimensions)) {
                return false;
            }
        }
        {
            SampledDataDataType lhsData;
            lhsData = this.getData();
            SampledDataDataType rhsData;
            rhsData = that.getData();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "data", lhsData), LocatorUtils.property(thatLocator, "data", rhsData), lhsData, rhsData)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Quantity theOrigin;
            theOrigin = this.getOrigin();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "origin", theOrigin), currentHashCode, theOrigin);
        }
        {
            Decimal thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            Decimal theFactor;
            theFactor = this.getFactor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "factor", theFactor), currentHashCode, theFactor);
        }
        {
            Decimal theLowerLimit;
            theLowerLimit = this.getLowerLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lowerLimit", theLowerLimit), currentHashCode, theLowerLimit);
        }
        {
            Decimal theUpperLimit;
            theUpperLimit = this.getUpperLimit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "upperLimit", theUpperLimit), currentHashCode, theUpperLimit);
        }
        {
            Integer theDimensions;
            theDimensions = this.getDimensions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dimensions", theDimensions), currentHashCode, theDimensions);
        }
        {
            SampledDataDataType theData;
            theData = this.getData();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "data", theData), currentHashCode, theData);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
