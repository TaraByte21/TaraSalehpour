//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Condition complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Condition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="encounter" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="asserter" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="dateAsserted" type="{http://hl7.org/fhir}date" minOccurs="0"/>
 *         &lt;element name="code" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="category" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}ConditionStatus"/>
 *         &lt;element name="certainty" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="severity" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="onsetDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="onsetAge" type="{http://hl7.org/fhir}Age"/>
 *         &lt;/choice>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="abatementDate" type="{http://hl7.org/fhir}date"/>
 *           &lt;element name="abatementAge" type="{http://hl7.org/fhir}Age"/>
 *           &lt;element name="abatementBoolean" type="{http://hl7.org/fhir}boolean"/>
 *         &lt;/choice>
 *         &lt;element name="stage" type="{http://hl7.org/fhir}Condition.Stage" minOccurs="0"/>
 *         &lt;element name="evidence" type="{http://hl7.org/fhir}Condition.Evidence" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="location" type="{http://hl7.org/fhir}Condition.Location" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="relatedItem" type="{http://hl7.org/fhir}Condition.RelatedItem" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="notes" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Condition", propOrder = {
    "identifier",
    "subject",
    "encounter",
    "asserter",
    "dateAsserted",
    "code",
    "category",
    "status",
    "certainty",
    "severity",
    "onsetDate",
    "onsetAge",
    "abatementDate",
    "abatementAge",
    "abatementBoolean",
    "stage",
    "evidence",
    "location",
    "relatedItem",
    "notes"
})
@Entity(name = "Condition")
@Table(name = "CONDITION")
public class Condition
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    @XmlElement(required = true)
    protected ResourceReference subject;
    protected ResourceReference encounter;
    protected ResourceReference asserter;
    protected Date dateAsserted;
    @XmlElement(required = true)
    protected CodeableConcept code;
    protected CodeableConcept category;
    @XmlElement(required = true)
    protected ConditionStatus status;
    protected CodeableConcept certainty;
    protected CodeableConcept severity;
    protected Date onsetDate;
    protected Age onsetAge;
    protected Date abatementDate;
    protected Age abatementAge;
    protected Boolean abatementBoolean;
    protected ConditionStage stage;
    protected List<ConditionEvidence> evidence;
    protected List<ConditionLocation> location;
    protected List<ConditionRelatedItem> relatedItem;
    protected org.hl7.fhir.String notes;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_CONDITION_HJID")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_CONDITION_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the encounter property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_CONDITION_HJID")
    public ResourceReference getEncounter() {
        return encounter;
    }

    /**
     * Sets the value of the encounter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setEncounter(ResourceReference value) {
        this.encounter = value;
    }

    /**
     * Gets the value of the asserter property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ASSERTER_CONDITION_HJID")
    public ResourceReference getAsserter() {
        return asserter;
    }

    /**
     * Sets the value of the asserter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setAsserter(ResourceReference value) {
        this.asserter = value;
    }

    /**
     * Gets the value of the dateAsserted property.
     * 
     * @return
     *     possible object is
     *     {@link Date }
     *     
     */
    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATEASSERTED_CONDITION_HJID")
    public Date getDateAsserted() {
        return dateAsserted;
    }

    /**
     * Sets the value of the dateAsserted property.
     * 
     * @param value
     *     allowed object is
     *     {@link Date }
     *     
     */
    public void setDateAsserted(Date value) {
        this.dateAsserted = value;
    }

    /**
     * Gets the value of the code property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CODE_CONDITION_HJID")
    public CodeableConcept getCode() {
        return code;
    }

    /**
     * Sets the value of the code property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setCode(CodeableConcept value) {
        this.code = value;
    }

    /**
     * Gets the value of the category property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CATEGORY_CONDITION_HJID")
    public CodeableConcept getCategory() {
        return category;
    }

    /**
     * Sets the value of the category property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setCategory(CodeableConcept value) {
        this.category = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionStatus }
     *     
     */
    @ManyToOne(targetEntity = ConditionStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_CONDITION_HJID")
    public ConditionStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionStatus }
     *     
     */
    public void setStatus(ConditionStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the certainty property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CERTAINTY_CONDITION_HJID")
    public CodeableConcept getCertainty() {
        return certainty;
    }

    /**
     * Sets the value of the certainty property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setCertainty(CodeableConcept value) {
        this.certainty = value;
    }

    /**
     * Gets the value of the severity property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SEVERITY_CONDITION_HJID")
    public CodeableConcept getSeverity() {
        return severity;
    }

    /**
     * Sets the value of the severity property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setSeverity(CodeableConcept value) {
        this.severity = value;
    }

    /**
     * Gets the value of the onsetDate property.
     * 
     * @return
     *     possible object is
     *     {@link Date }
     *     
     */
    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ONSETDATE_CONDITION_HJID")
    public Date getOnsetDate() {
        return onsetDate;
    }

    /**
     * Sets the value of the onsetDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Date }
     *     
     */
    public void setOnsetDate(Date value) {
        this.onsetDate = value;
    }

    /**
     * Gets the value of the onsetAge property.
     * 
     * @return
     *     possible object is
     *     {@link Age }
     *     
     */
    @ManyToOne(targetEntity = Age.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ONSETAGE_CONDITION_HJID")
    public Age getOnsetAge() {
        return onsetAge;
    }

    /**
     * Sets the value of the onsetAge property.
     * 
     * @param value
     *     allowed object is
     *     {@link Age }
     *     
     */
    public void setOnsetAge(Age value) {
        this.onsetAge = value;
    }

    /**
     * Gets the value of the abatementDate property.
     * 
     * @return
     *     possible object is
     *     {@link Date }
     *     
     */
    @ManyToOne(targetEntity = Date.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTDATE_CONDITION_HJID")
    public Date getAbatementDate() {
        return abatementDate;
    }

    /**
     * Sets the value of the abatementDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link Date }
     *     
     */
    public void setAbatementDate(Date value) {
        this.abatementDate = value;
    }

    /**
     * Gets the value of the abatementAge property.
     * 
     * @return
     *     possible object is
     *     {@link Age }
     *     
     */
    @ManyToOne(targetEntity = Age.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTAGE_CONDITION_HJID")
    public Age getAbatementAge() {
        return abatementAge;
    }

    /**
     * Sets the value of the abatementAge property.
     * 
     * @param value
     *     allowed object is
     *     {@link Age }
     *     
     */
    public void setAbatementAge(Age value) {
        this.abatementAge = value;
    }

    /**
     * Gets the value of the abatementBoolean property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ABATEMENTBOOLEAN_CONDITION_H_0")
    public Boolean getAbatementBoolean() {
        return abatementBoolean;
    }

    /**
     * Sets the value of the abatementBoolean property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setAbatementBoolean(Boolean value) {
        this.abatementBoolean = value;
    }

    /**
     * Gets the value of the stage property.
     * 
     * @return
     *     possible object is
     *     {@link ConditionStage }
     *     
     */
    @ManyToOne(targetEntity = ConditionStage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STAGE_CONDITION_HJID")
    public ConditionStage getStage() {
        return stage;
    }

    /**
     * Sets the value of the stage property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConditionStage }
     *     
     */
    public void setStage(ConditionStage value) {
        this.stage = value;
    }

    /**
     * Gets the value of the evidence property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the evidence property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEvidence().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConditionEvidence }
     * 
     * 
     */
    @OneToMany(targetEntity = ConditionEvidence.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EVIDENCE_CONDITION_HJID")
    public List<ConditionEvidence> getEvidence() {
        if (evidence == null) {
            evidence = new ArrayList<ConditionEvidence>();
        }
        return this.evidence;
    }

    /**
     * 
     * 
     */
    public void setEvidence(List<ConditionEvidence> evidence) {
        this.evidence = evidence;
    }

    /**
     * Gets the value of the location property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the location property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConditionLocation }
     * 
     * 
     */
    @OneToMany(targetEntity = ConditionLocation.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__CONDITION_HJID")
    public List<ConditionLocation> getLocation() {
        if (location == null) {
            location = new ArrayList<ConditionLocation>();
        }
        return this.location;
    }

    /**
     * 
     * 
     */
    public void setLocation(List<ConditionLocation> location) {
        this.location = location;
    }

    /**
     * Gets the value of the relatedItem property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedItem property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedItem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConditionRelatedItem }
     * 
     * 
     */
    @OneToMany(targetEntity = ConditionRelatedItem.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATEDITEM_CONDITION_HJID")
    public List<ConditionRelatedItem> getRelatedItem() {
        if (relatedItem == null) {
            relatedItem = new ArrayList<ConditionRelatedItem>();
        }
        return this.relatedItem;
    }

    /**
     * 
     * 
     */
    public void setRelatedItem(List<ConditionRelatedItem> relatedItem) {
        this.relatedItem = relatedItem;
    }

    /**
     * Gets the value of the notes property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NOTES_CONDITION_HJID")
    public org.hl7.fhir.String getNotes() {
        return notes;
    }

    /**
     * Sets the value of the notes property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setNotes(org.hl7.fhir.String value) {
        this.notes = value;
    }

    public Condition withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public Condition withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public Condition withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public Condition withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public Condition withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public Condition withAsserter(ResourceReference value) {
        setAsserter(value);
        return this;
    }

    public Condition withDateAsserted(Date value) {
        setDateAsserted(value);
        return this;
    }

    public Condition withCode(CodeableConcept value) {
        setCode(value);
        return this;
    }

    public Condition withCategory(CodeableConcept value) {
        setCategory(value);
        return this;
    }

    public Condition withStatus(ConditionStatus value) {
        setStatus(value);
        return this;
    }

    public Condition withCertainty(CodeableConcept value) {
        setCertainty(value);
        return this;
    }

    public Condition withSeverity(CodeableConcept value) {
        setSeverity(value);
        return this;
    }

    public Condition withOnsetDate(Date value) {
        setOnsetDate(value);
        return this;
    }

    public Condition withOnsetAge(Age value) {
        setOnsetAge(value);
        return this;
    }

    public Condition withAbatementDate(Date value) {
        setAbatementDate(value);
        return this;
    }

    public Condition withAbatementAge(Age value) {
        setAbatementAge(value);
        return this;
    }

    public Condition withAbatementBoolean(Boolean value) {
        setAbatementBoolean(value);
        return this;
    }

    public Condition withStage(ConditionStage value) {
        setStage(value);
        return this;
    }

    public Condition withEvidence(ConditionEvidence... values) {
        if (values!= null) {
            for (ConditionEvidence value: values) {
                getEvidence().add(value);
            }
        }
        return this;
    }

    public Condition withEvidence(Collection<ConditionEvidence> values) {
        if (values!= null) {
            getEvidence().addAll(values);
        }
        return this;
    }

    public Condition withEvidence(List<ConditionEvidence> evidence) {
        setEvidence(evidence);
        return this;
    }

    public Condition withLocation(ConditionLocation... values) {
        if (values!= null) {
            for (ConditionLocation value: values) {
                getLocation().add(value);
            }
        }
        return this;
    }

    public Condition withLocation(Collection<ConditionLocation> values) {
        if (values!= null) {
            getLocation().addAll(values);
        }
        return this;
    }

    public Condition withLocation(List<ConditionLocation> location) {
        setLocation(location);
        return this;
    }

    public Condition withRelatedItem(ConditionRelatedItem... values) {
        if (values!= null) {
            for (ConditionRelatedItem value: values) {
                getRelatedItem().add(value);
            }
        }
        return this;
    }

    public Condition withRelatedItem(Collection<ConditionRelatedItem> values) {
        if (values!= null) {
            getRelatedItem().addAll(values);
        }
        return this;
    }

    public Condition withRelatedItem(List<ConditionRelatedItem> relatedItem) {
        setRelatedItem(relatedItem);
        return this;
    }

    public Condition withNotes(org.hl7.fhir.String value) {
        setNotes(value);
        return this;
    }

    @Override
    public Condition withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Condition withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Condition withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Condition withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Condition withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Condition withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Condition withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Condition withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Condition withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Condition withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Condition withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Condition withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Condition)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Condition that = ((Condition) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            ResourceReference lhsAsserter;
            lhsAsserter = this.getAsserter();
            ResourceReference rhsAsserter;
            rhsAsserter = that.getAsserter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "asserter", lhsAsserter), LocatorUtils.property(thatLocator, "asserter", rhsAsserter), lhsAsserter, rhsAsserter)) {
                return false;
            }
        }
        {
            Date lhsDateAsserted;
            lhsDateAsserted = this.getDateAsserted();
            Date rhsDateAsserted;
            rhsDateAsserted = that.getDateAsserted();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateAsserted", lhsDateAsserted), LocatorUtils.property(thatLocator, "dateAsserted", rhsDateAsserted), lhsDateAsserted, rhsDateAsserted)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCode;
            lhsCode = this.getCode();
            CodeableConcept rhsCode;
            rhsCode = that.getCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "code", lhsCode), LocatorUtils.property(thatLocator, "code", rhsCode), lhsCode, rhsCode)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCategory;
            lhsCategory = this.getCategory();
            CodeableConcept rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            ConditionStatus lhsStatus;
            lhsStatus = this.getStatus();
            ConditionStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsCertainty;
            lhsCertainty = this.getCertainty();
            CodeableConcept rhsCertainty;
            rhsCertainty = that.getCertainty();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "certainty", lhsCertainty), LocatorUtils.property(thatLocator, "certainty", rhsCertainty), lhsCertainty, rhsCertainty)) {
                return false;
            }
        }
        {
            CodeableConcept lhsSeverity;
            lhsSeverity = this.getSeverity();
            CodeableConcept rhsSeverity;
            rhsSeverity = that.getSeverity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "severity", lhsSeverity), LocatorUtils.property(thatLocator, "severity", rhsSeverity), lhsSeverity, rhsSeverity)) {
                return false;
            }
        }
        {
            Date lhsOnsetDate;
            lhsOnsetDate = this.getOnsetDate();
            Date rhsOnsetDate;
            rhsOnsetDate = that.getOnsetDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onsetDate", lhsOnsetDate), LocatorUtils.property(thatLocator, "onsetDate", rhsOnsetDate), lhsOnsetDate, rhsOnsetDate)) {
                return false;
            }
        }
        {
            Age lhsOnsetAge;
            lhsOnsetAge = this.getOnsetAge();
            Age rhsOnsetAge;
            rhsOnsetAge = that.getOnsetAge();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "onsetAge", lhsOnsetAge), LocatorUtils.property(thatLocator, "onsetAge", rhsOnsetAge), lhsOnsetAge, rhsOnsetAge)) {
                return false;
            }
        }
        {
            Date lhsAbatementDate;
            lhsAbatementDate = this.getAbatementDate();
            Date rhsAbatementDate;
            rhsAbatementDate = that.getAbatementDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementDate", lhsAbatementDate), LocatorUtils.property(thatLocator, "abatementDate", rhsAbatementDate), lhsAbatementDate, rhsAbatementDate)) {
                return false;
            }
        }
        {
            Age lhsAbatementAge;
            lhsAbatementAge = this.getAbatementAge();
            Age rhsAbatementAge;
            rhsAbatementAge = that.getAbatementAge();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementAge", lhsAbatementAge), LocatorUtils.property(thatLocator, "abatementAge", rhsAbatementAge), lhsAbatementAge, rhsAbatementAge)) {
                return false;
            }
        }
        {
            Boolean lhsAbatementBoolean;
            lhsAbatementBoolean = this.getAbatementBoolean();
            Boolean rhsAbatementBoolean;
            rhsAbatementBoolean = that.getAbatementBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "abatementBoolean", lhsAbatementBoolean), LocatorUtils.property(thatLocator, "abatementBoolean", rhsAbatementBoolean), lhsAbatementBoolean, rhsAbatementBoolean)) {
                return false;
            }
        }
        {
            ConditionStage lhsStage;
            lhsStage = this.getStage();
            ConditionStage rhsStage;
            rhsStage = that.getStage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stage", lhsStage), LocatorUtils.property(thatLocator, "stage", rhsStage), lhsStage, rhsStage)) {
                return false;
            }
        }
        {
            List<ConditionEvidence> lhsEvidence;
            lhsEvidence = (((this.evidence!= null)&&(!this.evidence.isEmpty()))?this.getEvidence():null);
            List<ConditionEvidence> rhsEvidence;
            rhsEvidence = (((that.evidence!= null)&&(!that.evidence.isEmpty()))?that.getEvidence():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "evidence", lhsEvidence), LocatorUtils.property(thatLocator, "evidence", rhsEvidence), lhsEvidence, rhsEvidence)) {
                return false;
            }
        }
        {
            List<ConditionLocation> lhsLocation;
            lhsLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            List<ConditionLocation> rhsLocation;
            rhsLocation = (((that.location!= null)&&(!that.location.isEmpty()))?that.getLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            List<ConditionRelatedItem> lhsRelatedItem;
            lhsRelatedItem = (((this.relatedItem!= null)&&(!this.relatedItem.isEmpty()))?this.getRelatedItem():null);
            List<ConditionRelatedItem> rhsRelatedItem;
            rhsRelatedItem = (((that.relatedItem!= null)&&(!that.relatedItem.isEmpty()))?that.getRelatedItem():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedItem", lhsRelatedItem), LocatorUtils.property(thatLocator, "relatedItem", rhsRelatedItem), lhsRelatedItem, rhsRelatedItem)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsNotes;
            lhsNotes = this.getNotes();
            org.hl7.fhir.String rhsNotes;
            rhsNotes = that.getNotes();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notes", lhsNotes), LocatorUtils.property(thatLocator, "notes", rhsNotes), lhsNotes, rhsNotes)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            ResourceReference theAsserter;
            theAsserter = this.getAsserter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "asserter", theAsserter), currentHashCode, theAsserter);
        }
        {
            Date theDateAsserted;
            theDateAsserted = this.getDateAsserted();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateAsserted", theDateAsserted), currentHashCode, theDateAsserted);
        }
        {
            CodeableConcept theCode;
            theCode = this.getCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "code", theCode), currentHashCode, theCode);
        }
        {
            CodeableConcept theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            ConditionStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theCertainty;
            theCertainty = this.getCertainty();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certainty", theCertainty), currentHashCode, theCertainty);
        }
        {
            CodeableConcept theSeverity;
            theSeverity = this.getSeverity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "severity", theSeverity), currentHashCode, theSeverity);
        }
        {
            Date theOnsetDate;
            theOnsetDate = this.getOnsetDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onsetDate", theOnsetDate), currentHashCode, theOnsetDate);
        }
        {
            Age theOnsetAge;
            theOnsetAge = this.getOnsetAge();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "onsetAge", theOnsetAge), currentHashCode, theOnsetAge);
        }
        {
            Date theAbatementDate;
            theAbatementDate = this.getAbatementDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementDate", theAbatementDate), currentHashCode, theAbatementDate);
        }
        {
            Age theAbatementAge;
            theAbatementAge = this.getAbatementAge();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementAge", theAbatementAge), currentHashCode, theAbatementAge);
        }
        {
            Boolean theAbatementBoolean;
            theAbatementBoolean = this.getAbatementBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "abatementBoolean", theAbatementBoolean), currentHashCode, theAbatementBoolean);
        }
        {
            ConditionStage theStage;
            theStage = this.getStage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stage", theStage), currentHashCode, theStage);
        }
        {
            List<ConditionEvidence> theEvidence;
            theEvidence = (((this.evidence!= null)&&(!this.evidence.isEmpty()))?this.getEvidence():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "evidence", theEvidence), currentHashCode, theEvidence);
        }
        {
            List<ConditionLocation> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            List<ConditionRelatedItem> theRelatedItem;
            theRelatedItem = (((this.relatedItem!= null)&&(!this.relatedItem.isEmpty()))?this.getRelatedItem():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedItem", theRelatedItem), currentHashCode, theRelatedItem);
        }
        {
            org.hl7.fhir.String theNotes;
            theNotes = this.getNotes();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notes", theNotes), currentHashCode, theNotes);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
