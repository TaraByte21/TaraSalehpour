//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A value set specifies a set of codes drawn from one or more code systems.
 * 
 * <p>Java class for ValueSet.Define complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ValueSet.Define">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="system" type="{http://hl7.org/fhir}uri"/>
 *         &lt;element name="version" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="caseSensitive" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="concept" type="{http://hl7.org/fhir}ValueSet.Concept" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValueSet.Define", propOrder = {
    "system",
    "version",
    "caseSensitive",
    "concept"
})
@Entity(name = "ValueSetDefine")
@Table(name = "VALUESETDEFINE")
public class ValueSetDefine
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected Uri system;
    protected org.hl7.fhir.String version;
    protected Boolean caseSensitive;
    protected List<ValueSetConcept> concept;

    /**
     * Gets the value of the system property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYSTEM__VALUESETDEFINE_HJID")
    public Uri getSystem() {
        return system;
    }

    /**
     * Sets the value of the system property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setSystem(Uri value) {
        this.system = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "VERSION__VALUESETDEFINE_HJID")
    public org.hl7.fhir.String getVersion() {
        return version;
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setVersion(org.hl7.fhir.String value) {
        this.version = value;
    }

    /**
     * Gets the value of the caseSensitive property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CASESENSITIVE_VALUESETDEFINE_0")
    public Boolean getCaseSensitive() {
        return caseSensitive;
    }

    /**
     * Sets the value of the caseSensitive property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCaseSensitive(Boolean value) {
        this.caseSensitive = value;
    }

    /**
     * Gets the value of the concept property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the concept property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConcept().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ValueSetConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = ValueSetConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONCEPT_VALUESETDEFINE_HJID")
    public List<ValueSetConcept> getConcept() {
        if (concept == null) {
            concept = new ArrayList<ValueSetConcept>();
        }
        return this.concept;
    }

    /**
     * 
     * 
     */
    public void setConcept(List<ValueSetConcept> concept) {
        this.concept = concept;
    }

    public ValueSetDefine withSystem(Uri value) {
        setSystem(value);
        return this;
    }

    public ValueSetDefine withVersion(org.hl7.fhir.String value) {
        setVersion(value);
        return this;
    }

    public ValueSetDefine withCaseSensitive(Boolean value) {
        setCaseSensitive(value);
        return this;
    }

    public ValueSetDefine withConcept(ValueSetConcept... values) {
        if (values!= null) {
            for (ValueSetConcept value: values) {
                getConcept().add(value);
            }
        }
        return this;
    }

    public ValueSetDefine withConcept(Collection<ValueSetConcept> values) {
        if (values!= null) {
            getConcept().addAll(values);
        }
        return this;
    }

    public ValueSetDefine withConcept(List<ValueSetConcept> concept) {
        setConcept(concept);
        return this;
    }

    @Override
    public ValueSetDefine withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetDefine withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetDefine withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ValueSetDefine withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ValueSetDefine withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ValueSetDefine withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ValueSetDefine withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValueSetDefine)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ValueSetDefine that = ((ValueSetDefine) object);
        {
            Uri lhsSystem;
            lhsSystem = this.getSystem();
            Uri rhsSystem;
            rhsSystem = that.getSystem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "system", lhsSystem), LocatorUtils.property(thatLocator, "system", rhsSystem), lhsSystem, rhsSystem)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsVersion;
            lhsVersion = this.getVersion();
            org.hl7.fhir.String rhsVersion;
            rhsVersion = that.getVersion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "version", lhsVersion), LocatorUtils.property(thatLocator, "version", rhsVersion), lhsVersion, rhsVersion)) {
                return false;
            }
        }
        {
            Boolean lhsCaseSensitive;
            lhsCaseSensitive = this.getCaseSensitive();
            Boolean rhsCaseSensitive;
            rhsCaseSensitive = that.getCaseSensitive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "caseSensitive", lhsCaseSensitive), LocatorUtils.property(thatLocator, "caseSensitive", rhsCaseSensitive), lhsCaseSensitive, rhsCaseSensitive)) {
                return false;
            }
        }
        {
            List<ValueSetConcept> lhsConcept;
            lhsConcept = (((this.concept!= null)&&(!this.concept.isEmpty()))?this.getConcept():null);
            List<ValueSetConcept> rhsConcept;
            rhsConcept = (((that.concept!= null)&&(!that.concept.isEmpty()))?that.getConcept():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concept", lhsConcept), LocatorUtils.property(thatLocator, "concept", rhsConcept), lhsConcept, rhsConcept)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Uri theSystem;
            theSystem = this.getSystem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "system", theSystem), currentHashCode, theSystem);
        }
        {
            org.hl7.fhir.String theVersion;
            theVersion = this.getVersion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "version", theVersion), currentHashCode, theVersion);
        }
        {
            Boolean theCaseSensitive;
            theCaseSensitive = this.getCaseSensitive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "caseSensitive", theCaseSensitive), currentHashCode, theCaseSensitive);
        }
        {
            List<ValueSetConcept> theConcept;
            theConcept = (((this.concept!= null)&&(!this.concept.isEmpty()))?this.getConcept():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concept", theConcept), currentHashCode, theConcept);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
