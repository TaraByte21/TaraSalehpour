//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
 * 
 * <p>Java class for Conformance.Security complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance.Security">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="cors" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="service" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="certificate" type="{http://hl7.org/fhir}Conformance.Certificate" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Security", propOrder = {
    "cors",
    "service",
    "description",
    "certificate"
})
@Entity(name = "ConformanceSecurity")
@Table(name = "CONFORMANCESECURITY")
public class ConformanceSecurity
    extends BackboneElement
    implements Equals, HashCode
{

    protected Boolean cors;
    protected List<CodeableConcept> service;
    protected org.hl7.fhir.String description;
    protected List<ConformanceCertificate> certificate;

    /**
     * Gets the value of the cors property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CORS_CONFORMANCESECURITY_HJID")
    public Boolean getCors() {
        return cors;
    }

    /**
     * Sets the value of the cors property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCors(Boolean value) {
        this.cors = value;
    }

    /**
     * Gets the value of the service property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the service property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getService().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICE_CONFORMANCESECURITY__0")
    public List<CodeableConcept> getService() {
        if (service == null) {
            service = new ArrayList<CodeableConcept>();
        }
        return this.service;
    }

    /**
     * 
     * 
     */
    public void setService(List<CodeableConcept> service) {
        this.service = service;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_CONFORMANCESECUR_0")
    public org.hl7.fhir.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDescription(org.hl7.fhir.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the certificate property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the certificate property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCertificate().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceCertificate }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceCertificate.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CERTIFICATE_CONFORMANCESECUR_0")
    public List<ConformanceCertificate> getCertificate() {
        if (certificate == null) {
            certificate = new ArrayList<ConformanceCertificate>();
        }
        return this.certificate;
    }

    /**
     * 
     * 
     */
    public void setCertificate(List<ConformanceCertificate> certificate) {
        this.certificate = certificate;
    }

    public ConformanceSecurity withCors(Boolean value) {
        setCors(value);
        return this;
    }

    public ConformanceSecurity withService(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getService().add(value);
            }
        }
        return this;
    }

    public ConformanceSecurity withService(Collection<CodeableConcept> values) {
        if (values!= null) {
            getService().addAll(values);
        }
        return this;
    }

    public ConformanceSecurity withService(List<CodeableConcept> service) {
        setService(service);
        return this;
    }

    public ConformanceSecurity withDescription(org.hl7.fhir.String value) {
        setDescription(value);
        return this;
    }

    public ConformanceSecurity withCertificate(ConformanceCertificate... values) {
        if (values!= null) {
            for (ConformanceCertificate value: values) {
                getCertificate().add(value);
            }
        }
        return this;
    }

    public ConformanceSecurity withCertificate(Collection<ConformanceCertificate> values) {
        if (values!= null) {
            getCertificate().addAll(values);
        }
        return this;
    }

    public ConformanceSecurity withCertificate(List<ConformanceCertificate> certificate) {
        setCertificate(certificate);
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSecurity withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ConformanceSecurity withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceSecurity withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceSecurity withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ConformanceSecurity withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceSecurity)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceSecurity that = ((ConformanceSecurity) object);
        {
            Boolean lhsCors;
            lhsCors = this.getCors();
            Boolean rhsCors;
            rhsCors = that.getCors();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cors", lhsCors), LocatorUtils.property(thatLocator, "cors", rhsCors), lhsCors, rhsCors)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsService;
            lhsService = (((this.service!= null)&&(!this.service.isEmpty()))?this.getService():null);
            List<CodeableConcept> rhsService;
            rhsService = (((that.service!= null)&&(!that.service.isEmpty()))?that.getService():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "service", lhsService), LocatorUtils.property(thatLocator, "service", rhsService), lhsService, rhsService)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<ConformanceCertificate> lhsCertificate;
            lhsCertificate = (((this.certificate!= null)&&(!this.certificate.isEmpty()))?this.getCertificate():null);
            List<ConformanceCertificate> rhsCertificate;
            rhsCertificate = (((that.certificate!= null)&&(!that.certificate.isEmpty()))?that.getCertificate():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "certificate", lhsCertificate), LocatorUtils.property(thatLocator, "certificate", rhsCertificate), lhsCertificate, rhsCertificate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Boolean theCors;
            theCors = this.getCors();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cors", theCors), currentHashCode, theCors);
        }
        {
            List<CodeableConcept> theService;
            theService = (((this.service!= null)&&(!this.service.isEmpty()))?this.getService():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "service", theService), currentHashCode, theService);
        }
        {
            org.hl7.fhir.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<ConformanceCertificate> theCertificate;
            theCertificate = (((this.certificate!= null)&&(!this.certificate.isEmpty()))?this.getCertificate():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "certificate", theCertificate), currentHashCode, theCertificate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
