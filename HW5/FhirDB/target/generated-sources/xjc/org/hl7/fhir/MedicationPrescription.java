//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for MedicationPrescription complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MedicationPrescription">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="dateWritten" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}MedicationPrescriptionStatus" minOccurs="0"/>
 *         &lt;element name="patient" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="prescriber" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="encounter" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="reasonCodeableConcept" type="{http://hl7.org/fhir}CodeableConcept"/>
 *           &lt;element name="reasonResource" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;/choice>
 *         &lt;element name="medication" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="dosageInstruction" type="{http://hl7.org/fhir}MedicationPrescription.DosageInstruction" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="dispense" type="{http://hl7.org/fhir}MedicationPrescription.Dispense" minOccurs="0"/>
 *         &lt;element name="substitution" type="{http://hl7.org/fhir}MedicationPrescription.Substitution" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationPrescription", propOrder = {
    "identifier",
    "dateWritten",
    "status",
    "patient",
    "prescriber",
    "encounter",
    "reasonCodeableConcept",
    "reasonResource",
    "medication",
    "dosageInstruction",
    "dispense",
    "substitution"
})
@Entity(name = "MedicationPrescription")
@Table(name = "MEDICATIONPRESCRIPTION")
public class MedicationPrescription
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    protected DateTime dateWritten;
    protected MedicationPrescriptionStatus status;
    protected ResourceReference patient;
    protected ResourceReference prescriber;
    protected ResourceReference encounter;
    protected CodeableConcept reasonCodeableConcept;
    protected ResourceReference reasonResource;
    protected ResourceReference medication;
    protected List<MedicationPrescriptionDosageInstruction> dosageInstruction;
    protected MedicationPrescriptionDispense dispense;
    protected MedicationPrescriptionSubstitution substitution;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MEDICATIONPRESCRI_0")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the dateWritten property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATEWRITTEN_MEDICATIONPRESCR_0")
    public DateTime getDateWritten() {
        return dateWritten;
    }

    /**
     * Sets the value of the dateWritten property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDateWritten(DateTime value) {
        this.dateWritten = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationPrescriptionStatus }
     *     
     */
    @ManyToOne(targetEntity = MedicationPrescriptionStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONPRESCRIPTIO_0")
    public MedicationPrescriptionStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationPrescriptionStatus }
     *     
     */
    public void setStatus(MedicationPrescriptionStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the patient property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONPRESCRIPTI_0")
    public ResourceReference getPatient() {
        return patient;
    }

    /**
     * Sets the value of the patient property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPatient(ResourceReference value) {
        this.patient = value;
    }

    /**
     * Gets the value of the prescriber property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRESCRIBER_MEDICATIONPRESCRI_0")
    public ResourceReference getPrescriber() {
        return prescriber;
    }

    /**
     * Sets the value of the prescriber property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPrescriber(ResourceReference value) {
        this.prescriber = value;
    }

    /**
     * Gets the value of the encounter property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_MEDICATIONPRESCRIP_0")
    public ResourceReference getEncounter() {
        return encounter;
    }

    /**
     * Sets the value of the encounter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setEncounter(ResourceReference value) {
        this.encounter = value;
    }

    /**
     * Gets the value of the reasonCodeableConcept property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONCODEABLECONCEPT_MEDICA_0")
    public CodeableConcept getReasonCodeableConcept() {
        return reasonCodeableConcept;
    }

    /**
     * Sets the value of the reasonCodeableConcept property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setReasonCodeableConcept(CodeableConcept value) {
        this.reasonCodeableConcept = value;
    }

    /**
     * Gets the value of the reasonResource property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONRESOURCE_MEDICATIONPRE_0")
    public ResourceReference getReasonResource() {
        return reasonResource;
    }

    /**
     * Sets the value of the reasonResource property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setReasonResource(ResourceReference value) {
        this.reasonResource = value;
    }

    /**
     * Gets the value of the medication property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONPRESCRI_0")
    public ResourceReference getMedication() {
        return medication;
    }

    /**
     * Sets the value of the medication property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setMedication(ResourceReference value) {
        this.medication = value;
    }

    /**
     * Gets the value of the dosageInstruction property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dosageInstruction property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDosageInstruction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MedicationPrescriptionDosageInstruction }
     * 
     * 
     */
    @OneToMany(targetEntity = MedicationPrescriptionDosageInstruction.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSAGEINSTRUCTION_MEDICATION_0")
    public List<MedicationPrescriptionDosageInstruction> getDosageInstruction() {
        if (dosageInstruction == null) {
            dosageInstruction = new ArrayList<MedicationPrescriptionDosageInstruction>();
        }
        return this.dosageInstruction;
    }

    /**
     * 
     * 
     */
    public void setDosageInstruction(List<MedicationPrescriptionDosageInstruction> dosageInstruction) {
        this.dosageInstruction = dosageInstruction;
    }

    /**
     * Gets the value of the dispense property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationPrescriptionDispense }
     *     
     */
    @ManyToOne(targetEntity = MedicationPrescriptionDispense.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DISPENSE_MEDICATIONPRESCRIPT_0")
    public MedicationPrescriptionDispense getDispense() {
        return dispense;
    }

    /**
     * Sets the value of the dispense property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationPrescriptionDispense }
     *     
     */
    public void setDispense(MedicationPrescriptionDispense value) {
        this.dispense = value;
    }

    /**
     * Gets the value of the substitution property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationPrescriptionSubstitution }
     *     
     */
    @ManyToOne(targetEntity = MedicationPrescriptionSubstitution.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBSTITUTION_MEDICATIONPRESC_0")
    public MedicationPrescriptionSubstitution getSubstitution() {
        return substitution;
    }

    /**
     * Sets the value of the substitution property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationPrescriptionSubstitution }
     *     
     */
    public void setSubstitution(MedicationPrescriptionSubstitution value) {
        this.substitution = value;
    }

    public MedicationPrescription withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public MedicationPrescription withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public MedicationPrescription withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public MedicationPrescription withDateWritten(DateTime value) {
        setDateWritten(value);
        return this;
    }

    public MedicationPrescription withStatus(MedicationPrescriptionStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationPrescription withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationPrescription withPrescriber(ResourceReference value) {
        setPrescriber(value);
        return this;
    }

    public MedicationPrescription withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public MedicationPrescription withReasonCodeableConcept(CodeableConcept value) {
        setReasonCodeableConcept(value);
        return this;
    }

    public MedicationPrescription withReasonResource(ResourceReference value) {
        setReasonResource(value);
        return this;
    }

    public MedicationPrescription withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationPrescription withDosageInstruction(MedicationPrescriptionDosageInstruction... values) {
        if (values!= null) {
            for (MedicationPrescriptionDosageInstruction value: values) {
                getDosageInstruction().add(value);
            }
        }
        return this;
    }

    public MedicationPrescription withDosageInstruction(Collection<MedicationPrescriptionDosageInstruction> values) {
        if (values!= null) {
            getDosageInstruction().addAll(values);
        }
        return this;
    }

    public MedicationPrescription withDosageInstruction(List<MedicationPrescriptionDosageInstruction> dosageInstruction) {
        setDosageInstruction(dosageInstruction);
        return this;
    }

    public MedicationPrescription withDispense(MedicationPrescriptionDispense value) {
        setDispense(value);
        return this;
    }

    public MedicationPrescription withSubstitution(MedicationPrescriptionSubstitution value) {
        setSubstitution(value);
        return this;
    }

    @Override
    public MedicationPrescription withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationPrescription withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationPrescription withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescription withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescription withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public MedicationPrescription withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescription withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescription withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public MedicationPrescription withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationPrescription withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationPrescription withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public MedicationPrescription withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationPrescription)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationPrescription that = ((MedicationPrescription) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            DateTime lhsDateWritten;
            lhsDateWritten = this.getDateWritten();
            DateTime rhsDateWritten;
            rhsDateWritten = that.getDateWritten();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateWritten", lhsDateWritten), LocatorUtils.property(thatLocator, "dateWritten", rhsDateWritten), lhsDateWritten, rhsDateWritten)) {
                return false;
            }
        }
        {
            MedicationPrescriptionStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationPrescriptionStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ResourceReference lhsPrescriber;
            lhsPrescriber = this.getPrescriber();
            ResourceReference rhsPrescriber;
            rhsPrescriber = that.getPrescriber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prescriber", lhsPrescriber), LocatorUtils.property(thatLocator, "prescriber", rhsPrescriber), lhsPrescriber, rhsPrescriber)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            CodeableConcept lhsReasonCodeableConcept;
            lhsReasonCodeableConcept = this.getReasonCodeableConcept();
            CodeableConcept rhsReasonCodeableConcept;
            rhsReasonCodeableConcept = that.getReasonCodeableConcept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonCodeableConcept", lhsReasonCodeableConcept), LocatorUtils.property(thatLocator, "reasonCodeableConcept", rhsReasonCodeableConcept), lhsReasonCodeableConcept, rhsReasonCodeableConcept)) {
                return false;
            }
        }
        {
            ResourceReference lhsReasonResource;
            lhsReasonResource = this.getReasonResource();
            ResourceReference rhsReasonResource;
            rhsReasonResource = that.getReasonResource();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonResource", lhsReasonResource), LocatorUtils.property(thatLocator, "reasonResource", rhsReasonResource), lhsReasonResource, rhsReasonResource)) {
                return false;
            }
        }
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            List<MedicationPrescriptionDosageInstruction> lhsDosageInstruction;
            lhsDosageInstruction = (((this.dosageInstruction!= null)&&(!this.dosageInstruction.isEmpty()))?this.getDosageInstruction():null);
            List<MedicationPrescriptionDosageInstruction> rhsDosageInstruction;
            rhsDosageInstruction = (((that.dosageInstruction!= null)&&(!that.dosageInstruction.isEmpty()))?that.getDosageInstruction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dosageInstruction", lhsDosageInstruction), LocatorUtils.property(thatLocator, "dosageInstruction", rhsDosageInstruction), lhsDosageInstruction, rhsDosageInstruction)) {
                return false;
            }
        }
        {
            MedicationPrescriptionDispense lhsDispense;
            lhsDispense = this.getDispense();
            MedicationPrescriptionDispense rhsDispense;
            rhsDispense = that.getDispense();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dispense", lhsDispense), LocatorUtils.property(thatLocator, "dispense", rhsDispense), lhsDispense, rhsDispense)) {
                return false;
            }
        }
        {
            MedicationPrescriptionSubstitution lhsSubstitution;
            lhsSubstitution = this.getSubstitution();
            MedicationPrescriptionSubstitution rhsSubstitution;
            rhsSubstitution = that.getSubstitution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "substitution", lhsSubstitution), LocatorUtils.property(thatLocator, "substitution", rhsSubstitution), lhsSubstitution, rhsSubstitution)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            DateTime theDateWritten;
            theDateWritten = this.getDateWritten();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateWritten", theDateWritten), currentHashCode, theDateWritten);
        }
        {
            MedicationPrescriptionStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ResourceReference thePrescriber;
            thePrescriber = this.getPrescriber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prescriber", thePrescriber), currentHashCode, thePrescriber);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            CodeableConcept theReasonCodeableConcept;
            theReasonCodeableConcept = this.getReasonCodeableConcept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonCodeableConcept", theReasonCodeableConcept), currentHashCode, theReasonCodeableConcept);
        }
        {
            ResourceReference theReasonResource;
            theReasonResource = this.getReasonResource();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonResource", theReasonResource), currentHashCode, theReasonResource);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            List<MedicationPrescriptionDosageInstruction> theDosageInstruction;
            theDosageInstruction = (((this.dosageInstruction!= null)&&(!this.dosageInstruction.isEmpty()))?this.getDosageInstruction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dosageInstruction", theDosageInstruction), currentHashCode, theDosageInstruction);
        }
        {
            MedicationPrescriptionDispense theDispense;
            theDispense = this.getDispense();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dispense", theDispense), currentHashCode, theDispense);
        }
        {
            MedicationPrescriptionSubstitution theSubstitution;
            theSubstitution = this.getSubstitution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "substitution", theSubstitution), currentHashCode, theSubstitution);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
