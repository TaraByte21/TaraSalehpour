//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for MedicationAdministration complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MedicationAdministration">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}MedicationAdministrationStatus"/>
 *         &lt;element name="patient" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="practitioner" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="encounter" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="prescription" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="wasNotGiven" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *         &lt;element name="reasonNotGiven" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="whenGiven" type="{http://hl7.org/fhir}Period"/>
 *         &lt;element name="medication" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="device" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="dosage" type="{http://hl7.org/fhir}MedicationAdministration.Dosage" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MedicationAdministration", propOrder = {
    "identifier",
    "status",
    "patient",
    "practitioner",
    "encounter",
    "prescription",
    "wasNotGiven",
    "reasonNotGiven",
    "whenGiven",
    "medication",
    "device",
    "dosage"
})
@Entity(name = "MedicationAdministration")
@Table(name = "MEDICATIONADMINISTRATION")
public class MedicationAdministration
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    @XmlElement(required = true)
    protected MedicationAdministrationStatus status;
    @XmlElement(required = true)
    protected ResourceReference patient;
    @XmlElement(required = true)
    protected ResourceReference practitioner;
    protected ResourceReference encounter;
    @XmlElement(required = true)
    protected ResourceReference prescription;
    protected Boolean wasNotGiven;
    protected List<CodeableConcept> reasonNotGiven;
    @XmlElement(required = true)
    protected Period whenGiven;
    protected ResourceReference medication;
    protected List<ResourceReference> device;
    protected List<MedicationAdministrationDosage> dosage;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_MEDICATIONADMINIS_0")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link MedicationAdministrationStatus }
     *     
     */
    @ManyToOne(targetEntity = MedicationAdministrationStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_MEDICATIONADMINISTRAT_0")
    public MedicationAdministrationStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link MedicationAdministrationStatus }
     *     
     */
    public void setStatus(MedicationAdministrationStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the patient property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PATIENT_MEDICATIONADMINISTRA_0")
    public ResourceReference getPatient() {
        return patient;
    }

    /**
     * Sets the value of the patient property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPatient(ResourceReference value) {
        this.patient = value;
    }

    /**
     * Gets the value of the practitioner property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRACTITIONER_MEDICATIONADMIN_0")
    public ResourceReference getPractitioner() {
        return practitioner;
    }

    /**
     * Sets the value of the practitioner property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPractitioner(ResourceReference value) {
        this.practitioner = value;
    }

    /**
     * Gets the value of the encounter property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ENCOUNTER_MEDICATIONADMINIST_0")
    public ResourceReference getEncounter() {
        return encounter;
    }

    /**
     * Sets the value of the encounter property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setEncounter(ResourceReference value) {
        this.encounter = value;
    }

    /**
     * Gets the value of the prescription property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRESCRIPTION_MEDICATIONADMIN_0")
    public ResourceReference getPrescription() {
        return prescription;
    }

    /**
     * Sets the value of the prescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setPrescription(ResourceReference value) {
        this.prescription = value;
    }

    /**
     * Gets the value of the wasNotGiven property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WASNOTGIVEN_MEDICATIONADMINI_0")
    public Boolean getWasNotGiven() {
        return wasNotGiven;
    }

    /**
     * Sets the value of the wasNotGiven property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setWasNotGiven(Boolean value) {
        this.wasNotGiven = value;
    }

    /**
     * Gets the value of the reasonNotGiven property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the reasonNotGiven property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getReasonNotGiven().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "REASONNOTGIVEN_MEDICATIONADM_0")
    public List<CodeableConcept> getReasonNotGiven() {
        if (reasonNotGiven == null) {
            reasonNotGiven = new ArrayList<CodeableConcept>();
        }
        return this.reasonNotGiven;
    }

    /**
     * 
     * 
     */
    public void setReasonNotGiven(List<CodeableConcept> reasonNotGiven) {
        this.reasonNotGiven = reasonNotGiven;
    }

    /**
     * Gets the value of the whenGiven property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "WHENGIVEN_MEDICATIONADMINIST_0")
    public Period getWhenGiven() {
        return whenGiven;
    }

    /**
     * Sets the value of the whenGiven property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setWhenGiven(Period value) {
        this.whenGiven = value;
    }

    /**
     * Gets the value of the medication property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MEDICATION_MEDICATIONADMINIS_0")
    public ResourceReference getMedication() {
        return medication;
    }

    /**
     * Sets the value of the medication property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setMedication(ResourceReference value) {
        this.medication = value;
    }

    /**
     * Gets the value of the device property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the device property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDevice().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DEVICE_MEDICATIONADMINISTRAT_0")
    public List<ResourceReference> getDevice() {
        if (device == null) {
            device = new ArrayList<ResourceReference>();
        }
        return this.device;
    }

    /**
     * 
     * 
     */
    public void setDevice(List<ResourceReference> device) {
        this.device = device;
    }

    /**
     * Gets the value of the dosage property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dosage property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDosage().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MedicationAdministrationDosage }
     * 
     * 
     */
    @OneToMany(targetEntity = MedicationAdministrationDosage.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOSAGE_MEDICATIONADMINISTRAT_0")
    public List<MedicationAdministrationDosage> getDosage() {
        if (dosage == null) {
            dosage = new ArrayList<MedicationAdministrationDosage>();
        }
        return this.dosage;
    }

    /**
     * 
     * 
     */
    public void setDosage(List<MedicationAdministrationDosage> dosage) {
        this.dosage = dosage;
    }

    public MedicationAdministration withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public MedicationAdministration withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public MedicationAdministration withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public MedicationAdministration withStatus(MedicationAdministrationStatus value) {
        setStatus(value);
        return this;
    }

    public MedicationAdministration withPatient(ResourceReference value) {
        setPatient(value);
        return this;
    }

    public MedicationAdministration withPractitioner(ResourceReference value) {
        setPractitioner(value);
        return this;
    }

    public MedicationAdministration withEncounter(ResourceReference value) {
        setEncounter(value);
        return this;
    }

    public MedicationAdministration withPrescription(ResourceReference value) {
        setPrescription(value);
        return this;
    }

    public MedicationAdministration withWasNotGiven(Boolean value) {
        setWasNotGiven(value);
        return this;
    }

    public MedicationAdministration withReasonNotGiven(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getReasonNotGiven().add(value);
            }
        }
        return this;
    }

    public MedicationAdministration withReasonNotGiven(Collection<CodeableConcept> values) {
        if (values!= null) {
            getReasonNotGiven().addAll(values);
        }
        return this;
    }

    public MedicationAdministration withReasonNotGiven(List<CodeableConcept> reasonNotGiven) {
        setReasonNotGiven(reasonNotGiven);
        return this;
    }

    public MedicationAdministration withWhenGiven(Period value) {
        setWhenGiven(value);
        return this;
    }

    public MedicationAdministration withMedication(ResourceReference value) {
        setMedication(value);
        return this;
    }

    public MedicationAdministration withDevice(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getDevice().add(value);
            }
        }
        return this;
    }

    public MedicationAdministration withDevice(Collection<ResourceReference> values) {
        if (values!= null) {
            getDevice().addAll(values);
        }
        return this;
    }

    public MedicationAdministration withDevice(List<ResourceReference> device) {
        setDevice(device);
        return this;
    }

    public MedicationAdministration withDosage(MedicationAdministrationDosage... values) {
        if (values!= null) {
            for (MedicationAdministrationDosage value: values) {
                getDosage().add(value);
            }
        }
        return this;
    }

    public MedicationAdministration withDosage(Collection<MedicationAdministrationDosage> values) {
        if (values!= null) {
            getDosage().addAll(values);
        }
        return this;
    }

    public MedicationAdministration withDosage(List<MedicationAdministrationDosage> dosage) {
        setDosage(dosage);
        return this;
    }

    @Override
    public MedicationAdministration withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public MedicationAdministration withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public MedicationAdministration withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationAdministration withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationAdministration withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public MedicationAdministration withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationAdministration withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationAdministration withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public MedicationAdministration withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public MedicationAdministration withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public MedicationAdministration withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public MedicationAdministration withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MedicationAdministration)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MedicationAdministration that = ((MedicationAdministration) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            MedicationAdministrationStatus lhsStatus;
            lhsStatus = this.getStatus();
            MedicationAdministrationStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            ResourceReference lhsPatient;
            lhsPatient = this.getPatient();
            ResourceReference rhsPatient;
            rhsPatient = that.getPatient();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "patient", lhsPatient), LocatorUtils.property(thatLocator, "patient", rhsPatient), lhsPatient, rhsPatient)) {
                return false;
            }
        }
        {
            ResourceReference lhsPractitioner;
            lhsPractitioner = this.getPractitioner();
            ResourceReference rhsPractitioner;
            rhsPractitioner = that.getPractitioner();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "practitioner", lhsPractitioner), LocatorUtils.property(thatLocator, "practitioner", rhsPractitioner), lhsPractitioner, rhsPractitioner)) {
                return false;
            }
        }
        {
            ResourceReference lhsEncounter;
            lhsEncounter = this.getEncounter();
            ResourceReference rhsEncounter;
            rhsEncounter = that.getEncounter();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "encounter", lhsEncounter), LocatorUtils.property(thatLocator, "encounter", rhsEncounter), lhsEncounter, rhsEncounter)) {
                return false;
            }
        }
        {
            ResourceReference lhsPrescription;
            lhsPrescription = this.getPrescription();
            ResourceReference rhsPrescription;
            rhsPrescription = that.getPrescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prescription", lhsPrescription), LocatorUtils.property(thatLocator, "prescription", rhsPrescription), lhsPrescription, rhsPrescription)) {
                return false;
            }
        }
        {
            Boolean lhsWasNotGiven;
            lhsWasNotGiven = this.getWasNotGiven();
            Boolean rhsWasNotGiven;
            rhsWasNotGiven = that.getWasNotGiven();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "wasNotGiven", lhsWasNotGiven), LocatorUtils.property(thatLocator, "wasNotGiven", rhsWasNotGiven), lhsWasNotGiven, rhsWasNotGiven)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsReasonNotGiven;
            lhsReasonNotGiven = (((this.reasonNotGiven!= null)&&(!this.reasonNotGiven.isEmpty()))?this.getReasonNotGiven():null);
            List<CodeableConcept> rhsReasonNotGiven;
            rhsReasonNotGiven = (((that.reasonNotGiven!= null)&&(!that.reasonNotGiven.isEmpty()))?that.getReasonNotGiven():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reasonNotGiven", lhsReasonNotGiven), LocatorUtils.property(thatLocator, "reasonNotGiven", rhsReasonNotGiven), lhsReasonNotGiven, rhsReasonNotGiven)) {
                return false;
            }
        }
        {
            Period lhsWhenGiven;
            lhsWhenGiven = this.getWhenGiven();
            Period rhsWhenGiven;
            rhsWhenGiven = that.getWhenGiven();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "whenGiven", lhsWhenGiven), LocatorUtils.property(thatLocator, "whenGiven", rhsWhenGiven), lhsWhenGiven, rhsWhenGiven)) {
                return false;
            }
        }
        {
            ResourceReference lhsMedication;
            lhsMedication = this.getMedication();
            ResourceReference rhsMedication;
            rhsMedication = that.getMedication();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "medication", lhsMedication), LocatorUtils.property(thatLocator, "medication", rhsMedication), lhsMedication, rhsMedication)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsDevice;
            lhsDevice = (((this.device!= null)&&(!this.device.isEmpty()))?this.getDevice():null);
            List<ResourceReference> rhsDevice;
            rhsDevice = (((that.device!= null)&&(!that.device.isEmpty()))?that.getDevice():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "device", lhsDevice), LocatorUtils.property(thatLocator, "device", rhsDevice), lhsDevice, rhsDevice)) {
                return false;
            }
        }
        {
            List<MedicationAdministrationDosage> lhsDosage;
            lhsDosage = (((this.dosage!= null)&&(!this.dosage.isEmpty()))?this.getDosage():null);
            List<MedicationAdministrationDosage> rhsDosage;
            rhsDosage = (((that.dosage!= null)&&(!that.dosage.isEmpty()))?that.getDosage():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dosage", lhsDosage), LocatorUtils.property(thatLocator, "dosage", rhsDosage), lhsDosage, rhsDosage)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            MedicationAdministrationStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            ResourceReference thePatient;
            thePatient = this.getPatient();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "patient", thePatient), currentHashCode, thePatient);
        }
        {
            ResourceReference thePractitioner;
            thePractitioner = this.getPractitioner();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "practitioner", thePractitioner), currentHashCode, thePractitioner);
        }
        {
            ResourceReference theEncounter;
            theEncounter = this.getEncounter();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "encounter", theEncounter), currentHashCode, theEncounter);
        }
        {
            ResourceReference thePrescription;
            thePrescription = this.getPrescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prescription", thePrescription), currentHashCode, thePrescription);
        }
        {
            Boolean theWasNotGiven;
            theWasNotGiven = this.getWasNotGiven();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "wasNotGiven", theWasNotGiven), currentHashCode, theWasNotGiven);
        }
        {
            List<CodeableConcept> theReasonNotGiven;
            theReasonNotGiven = (((this.reasonNotGiven!= null)&&(!this.reasonNotGiven.isEmpty()))?this.getReasonNotGiven():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reasonNotGiven", theReasonNotGiven), currentHashCode, theReasonNotGiven);
        }
        {
            Period theWhenGiven;
            theWhenGiven = this.getWhenGiven();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "whenGiven", theWhenGiven), currentHashCode, theWhenGiven);
        }
        {
            ResourceReference theMedication;
            theMedication = this.getMedication();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "medication", theMedication), currentHashCode, theMedication);
        }
        {
            List<ResourceReference> theDevice;
            theDevice = (((this.device!= null)&&(!this.device.isEmpty()))?this.getDevice():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "device", theDevice), currentHashCode, theDevice);
        }
        {
            List<MedicationAdministrationDosage> theDosage;
            theDosage = (((this.dosage!= null)&&(!this.dosage.isEmpty()))?this.getDosage():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dosage", theDosage), currentHashCode, theDosage);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
