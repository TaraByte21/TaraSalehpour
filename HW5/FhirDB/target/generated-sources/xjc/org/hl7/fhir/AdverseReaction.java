//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for AdverseReaction complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AdverseReaction">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="date" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="didNotOccurFlag" type="{http://hl7.org/fhir}boolean"/>
 *         &lt;element name="recorder" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="symptom" type="{http://hl7.org/fhir}AdverseReaction.Symptom" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="exposure" type="{http://hl7.org/fhir}AdverseReaction.Exposure" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdverseReaction", propOrder = {
    "identifier",
    "date",
    "subject",
    "didNotOccurFlag",
    "recorder",
    "symptom",
    "exposure"
})
@Entity(name = "AdverseReaction")
@Table(name = "ADVERSEREACTION")
public class AdverseReaction
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    protected DateTime date;
    @XmlElement(required = true)
    protected ResourceReference subject;
    @XmlElement(required = true)
    protected Boolean didNotOccurFlag;
    protected ResourceReference recorder;
    protected List<AdverseReactionSymptom> symptom;
    protected List<AdverseReactionExposure> exposure;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_ADVERSEREACTION_H_0")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the date property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATE__ADVERSEREACTION_HJID")
    public DateTime getDate() {
        return date;
    }

    /**
     * Sets the value of the date property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDate(DateTime value) {
        this.date = value;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_ADVERSEREACTION_HJID")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the didNotOccurFlag property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DIDNOTOCCURFLAG_ADVERSEREACT_0")
    public Boolean getDidNotOccurFlag() {
        return didNotOccurFlag;
    }

    /**
     * Sets the value of the didNotOccurFlag property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDidNotOccurFlag(Boolean value) {
        this.didNotOccurFlag = value;
    }

    /**
     * Gets the value of the recorder property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RECORDER_ADVERSEREACTION_HJID")
    public ResourceReference getRecorder() {
        return recorder;
    }

    /**
     * Sets the value of the recorder property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setRecorder(ResourceReference value) {
        this.recorder = value;
    }

    /**
     * Gets the value of the symptom property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the symptom property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSymptom().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdverseReactionSymptom }
     * 
     * 
     */
    @OneToMany(targetEntity = AdverseReactionSymptom.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SYMPTOM_ADVERSEREACTION_HJID")
    public List<AdverseReactionSymptom> getSymptom() {
        if (symptom == null) {
            symptom = new ArrayList<AdverseReactionSymptom>();
        }
        return this.symptom;
    }

    /**
     * 
     * 
     */
    public void setSymptom(List<AdverseReactionSymptom> symptom) {
        this.symptom = symptom;
    }

    /**
     * Gets the value of the exposure property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the exposure property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExposure().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdverseReactionExposure }
     * 
     * 
     */
    @OneToMany(targetEntity = AdverseReactionExposure.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "EXPOSURE_ADVERSEREACTION_HJID")
    public List<AdverseReactionExposure> getExposure() {
        if (exposure == null) {
            exposure = new ArrayList<AdverseReactionExposure>();
        }
        return this.exposure;
    }

    /**
     * 
     * 
     */
    public void setExposure(List<AdverseReactionExposure> exposure) {
        this.exposure = exposure;
    }

    public AdverseReaction withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public AdverseReaction withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public AdverseReaction withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public AdverseReaction withDate(DateTime value) {
        setDate(value);
        return this;
    }

    public AdverseReaction withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public AdverseReaction withDidNotOccurFlag(Boolean value) {
        setDidNotOccurFlag(value);
        return this;
    }

    public AdverseReaction withRecorder(ResourceReference value) {
        setRecorder(value);
        return this;
    }

    public AdverseReaction withSymptom(AdverseReactionSymptom... values) {
        if (values!= null) {
            for (AdverseReactionSymptom value: values) {
                getSymptom().add(value);
            }
        }
        return this;
    }

    public AdverseReaction withSymptom(Collection<AdverseReactionSymptom> values) {
        if (values!= null) {
            getSymptom().addAll(values);
        }
        return this;
    }

    public AdverseReaction withSymptom(List<AdverseReactionSymptom> symptom) {
        setSymptom(symptom);
        return this;
    }

    public AdverseReaction withExposure(AdverseReactionExposure... values) {
        if (values!= null) {
            for (AdverseReactionExposure value: values) {
                getExposure().add(value);
            }
        }
        return this;
    }

    public AdverseReaction withExposure(Collection<AdverseReactionExposure> values) {
        if (values!= null) {
            getExposure().addAll(values);
        }
        return this;
    }

    public AdverseReaction withExposure(List<AdverseReactionExposure> exposure) {
        setExposure(exposure);
        return this;
    }

    @Override
    public AdverseReaction withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public AdverseReaction withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public AdverseReaction withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReaction withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReaction withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public AdverseReaction withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReaction withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReaction withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public AdverseReaction withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public AdverseReaction withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public AdverseReaction withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public AdverseReaction withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AdverseReaction)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final AdverseReaction that = ((AdverseReaction) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            DateTime lhsDate;
            lhsDate = this.getDate();
            DateTime rhsDate;
            rhsDate = that.getDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "date", lhsDate), LocatorUtils.property(thatLocator, "date", rhsDate), lhsDate, rhsDate)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            Boolean lhsDidNotOccurFlag;
            lhsDidNotOccurFlag = this.getDidNotOccurFlag();
            Boolean rhsDidNotOccurFlag;
            rhsDidNotOccurFlag = that.getDidNotOccurFlag();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "didNotOccurFlag", lhsDidNotOccurFlag), LocatorUtils.property(thatLocator, "didNotOccurFlag", rhsDidNotOccurFlag), lhsDidNotOccurFlag, rhsDidNotOccurFlag)) {
                return false;
            }
        }
        {
            ResourceReference lhsRecorder;
            lhsRecorder = this.getRecorder();
            ResourceReference rhsRecorder;
            rhsRecorder = that.getRecorder();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recorder", lhsRecorder), LocatorUtils.property(thatLocator, "recorder", rhsRecorder), lhsRecorder, rhsRecorder)) {
                return false;
            }
        }
        {
            List<AdverseReactionSymptom> lhsSymptom;
            lhsSymptom = (((this.symptom!= null)&&(!this.symptom.isEmpty()))?this.getSymptom():null);
            List<AdverseReactionSymptom> rhsSymptom;
            rhsSymptom = (((that.symptom!= null)&&(!that.symptom.isEmpty()))?that.getSymptom():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "symptom", lhsSymptom), LocatorUtils.property(thatLocator, "symptom", rhsSymptom), lhsSymptom, rhsSymptom)) {
                return false;
            }
        }
        {
            List<AdverseReactionExposure> lhsExposure;
            lhsExposure = (((this.exposure!= null)&&(!this.exposure.isEmpty()))?this.getExposure():null);
            List<AdverseReactionExposure> rhsExposure;
            rhsExposure = (((that.exposure!= null)&&(!that.exposure.isEmpty()))?that.getExposure():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "exposure", lhsExposure), LocatorUtils.property(thatLocator, "exposure", rhsExposure), lhsExposure, rhsExposure)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            DateTime theDate;
            theDate = this.getDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "date", theDate), currentHashCode, theDate);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            Boolean theDidNotOccurFlag;
            theDidNotOccurFlag = this.getDidNotOccurFlag();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "didNotOccurFlag", theDidNotOccurFlag), currentHashCode, theDidNotOccurFlag);
        }
        {
            ResourceReference theRecorder;
            theRecorder = this.getRecorder();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recorder", theRecorder), currentHashCode, theRecorder);
        }
        {
            List<AdverseReactionSymptom> theSymptom;
            theSymptom = (((this.symptom!= null)&&(!this.symptom.isEmpty()))?this.getSymptom():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "symptom", theSymptom), currentHashCode, theSymptom);
        }
        {
            List<AdverseReactionExposure> theExposure;
            theExposure = (((this.exposure!= null)&&(!this.exposure.isEmpty()))?this.getExposure():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "exposure", theExposure), currentHashCode, theExposure);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
