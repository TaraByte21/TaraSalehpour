//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A conformance statement is a set of requirements for a desired implementation or a description of how a target application fulfills those requirements in a particular implementation.
 * 
 * <p>Java class for Conformance.Rest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Conformance.Rest">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="mode" type="{http://hl7.org/fhir}RestfulConformanceMode"/>
 *         &lt;element name="documentation" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="security" type="{http://hl7.org/fhir}Conformance.Security" minOccurs="0"/>
 *         &lt;element name="resource" type="{http://hl7.org/fhir}Conformance.Resource" maxOccurs="unbounded"/>
 *         &lt;element name="operation" type="{http://hl7.org/fhir}Conformance.Operation1" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="query" type="{http://hl7.org/fhir}Conformance.Query" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="documentMailbox" type="{http://hl7.org/fhir}uri" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Conformance.Rest", propOrder = {
    "mode",
    "documentation",
    "security",
    "resource",
    "operation",
    "query",
    "documentMailbox"
})
@Entity(name = "ConformanceRest")
@Table(name = "CONFORMANCEREST")
public class ConformanceRest
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected RestfulConformanceMode mode;
    protected org.hl7.fhir.String documentation;
    protected ConformanceSecurity security;
    @XmlElement(required = true)
    protected List<ConformanceResource> resource;
    protected List<ConformanceOperation1> operation;
    protected List<ConformanceQuery> query;
    protected List<Uri> documentMailbox;

    /**
     * Gets the value of the mode property.
     * 
     * @return
     *     possible object is
     *     {@link RestfulConformanceMode }
     *     
     */
    @ManyToOne(targetEntity = RestfulConformanceMode.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MODE__CONFORMANCEREST_HJID")
    public RestfulConformanceMode getMode() {
        return mode;
    }

    /**
     * Sets the value of the mode property.
     * 
     * @param value
     *     allowed object is
     *     {@link RestfulConformanceMode }
     *     
     */
    public void setMode(RestfulConformanceMode value) {
        this.mode = value;
    }

    /**
     * Gets the value of the documentation property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTATION_CONFORMANCERES_0")
    public org.hl7.fhir.String getDocumentation() {
        return documentation;
    }

    /**
     * Sets the value of the documentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDocumentation(org.hl7.fhir.String value) {
        this.documentation = value;
    }

    /**
     * Gets the value of the security property.
     * 
     * @return
     *     possible object is
     *     {@link ConformanceSecurity }
     *     
     */
    @ManyToOne(targetEntity = ConformanceSecurity.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SECURITY__CONFORMANCEREST_HJ_0")
    public ConformanceSecurity getSecurity() {
        return security;
    }

    /**
     * Sets the value of the security property.
     * 
     * @param value
     *     allowed object is
     *     {@link ConformanceSecurity }
     *     
     */
    public void setSecurity(ConformanceSecurity value) {
        this.security = value;
    }

    /**
     * Gets the value of the resource property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the resource property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getResource().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceResource }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceResource.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RESOURCE__CONFORMANCEREST_HJ_0")
    public List<ConformanceResource> getResource() {
        if (resource == null) {
            resource = new ArrayList<ConformanceResource>();
        }
        return this.resource;
    }

    /**
     * 
     * 
     */
    public void setResource(List<ConformanceResource> resource) {
        this.resource = resource;
    }

    /**
     * Gets the value of the operation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the operation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOperation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceOperation1 }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceOperation1 .class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OPERATION__CONFORMANCEREST_H_0")
    public List<ConformanceOperation1> getOperation() {
        if (operation == null) {
            operation = new ArrayList<ConformanceOperation1>();
        }
        return this.operation;
    }

    /**
     * 
     * 
     */
    public void setOperation(List<ConformanceOperation1> operation) {
        this.operation = operation;
    }

    /**
     * Gets the value of the query property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the query property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQuery().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ConformanceQuery }
     * 
     * 
     */
    @OneToMany(targetEntity = ConformanceQuery.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUERY_CONFORMANCEREST_HJID")
    public List<ConformanceQuery> getQuery() {
        if (query == null) {
            query = new ArrayList<ConformanceQuery>();
        }
        return this.query;
    }

    /**
     * 
     * 
     */
    public void setQuery(List<ConformanceQuery> query) {
        this.query = query;
    }

    /**
     * Gets the value of the documentMailbox property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the documentMailbox property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDocumentMailbox().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Uri }
     * 
     * 
     */
    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCUMENTMAILBOX_CONFORMANCER_0")
    public List<Uri> getDocumentMailbox() {
        if (documentMailbox == null) {
            documentMailbox = new ArrayList<Uri>();
        }
        return this.documentMailbox;
    }

    /**
     * 
     * 
     */
    public void setDocumentMailbox(List<Uri> documentMailbox) {
        this.documentMailbox = documentMailbox;
    }

    public ConformanceRest withMode(RestfulConformanceMode value) {
        setMode(value);
        return this;
    }

    public ConformanceRest withDocumentation(org.hl7.fhir.String value) {
        setDocumentation(value);
        return this;
    }

    public ConformanceRest withSecurity(ConformanceSecurity value) {
        setSecurity(value);
        return this;
    }

    public ConformanceRest withResource(ConformanceResource... values) {
        if (values!= null) {
            for (ConformanceResource value: values) {
                getResource().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withResource(Collection<ConformanceResource> values) {
        if (values!= null) {
            getResource().addAll(values);
        }
        return this;
    }

    public ConformanceRest withResource(List<ConformanceResource> resource) {
        setResource(resource);
        return this;
    }

    public ConformanceRest withOperation(ConformanceOperation1 ... values) {
        if (values!= null) {
            for (ConformanceOperation1 value: values) {
                getOperation().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withOperation(Collection<ConformanceOperation1> values) {
        if (values!= null) {
            getOperation().addAll(values);
        }
        return this;
    }

    public ConformanceRest withOperation(List<ConformanceOperation1> operation) {
        setOperation(operation);
        return this;
    }

    public ConformanceRest withQuery(ConformanceQuery... values) {
        if (values!= null) {
            for (ConformanceQuery value: values) {
                getQuery().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withQuery(Collection<ConformanceQuery> values) {
        if (values!= null) {
            getQuery().addAll(values);
        }
        return this;
    }

    public ConformanceRest withQuery(List<ConformanceQuery> query) {
        setQuery(query);
        return this;
    }

    public ConformanceRest withDocumentMailbox(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getDocumentMailbox().add(value);
            }
        }
        return this;
    }

    public ConformanceRest withDocumentMailbox(Collection<Uri> values) {
        if (values!= null) {
            getDocumentMailbox().addAll(values);
        }
        return this;
    }

    public ConformanceRest withDocumentMailbox(List<Uri> documentMailbox) {
        setDocumentMailbox(documentMailbox);
        return this;
    }

    @Override
    public ConformanceRest withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceRest withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceRest withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public ConformanceRest withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public ConformanceRest withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public ConformanceRest withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public ConformanceRest withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ConformanceRest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ConformanceRest that = ((ConformanceRest) object);
        {
            RestfulConformanceMode lhsMode;
            lhsMode = this.getMode();
            RestfulConformanceMode rhsMode;
            rhsMode = that.getMode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mode", lhsMode), LocatorUtils.property(thatLocator, "mode", rhsMode), lhsMode, rhsMode)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDocumentation;
            lhsDocumentation = this.getDocumentation();
            org.hl7.fhir.String rhsDocumentation;
            rhsDocumentation = that.getDocumentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentation", lhsDocumentation), LocatorUtils.property(thatLocator, "documentation", rhsDocumentation), lhsDocumentation, rhsDocumentation)) {
                return false;
            }
        }
        {
            ConformanceSecurity lhsSecurity;
            lhsSecurity = this.getSecurity();
            ConformanceSecurity rhsSecurity;
            rhsSecurity = that.getSecurity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "security", lhsSecurity), LocatorUtils.property(thatLocator, "security", rhsSecurity), lhsSecurity, rhsSecurity)) {
                return false;
            }
        }
        {
            List<ConformanceResource> lhsResource;
            lhsResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
            List<ConformanceResource> rhsResource;
            rhsResource = (((that.resource!= null)&&(!that.resource.isEmpty()))?that.getResource():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resource", lhsResource), LocatorUtils.property(thatLocator, "resource", rhsResource), lhsResource, rhsResource)) {
                return false;
            }
        }
        {
            List<ConformanceOperation1> lhsOperation;
            lhsOperation = (((this.operation!= null)&&(!this.operation.isEmpty()))?this.getOperation():null);
            List<ConformanceOperation1> rhsOperation;
            rhsOperation = (((that.operation!= null)&&(!that.operation.isEmpty()))?that.getOperation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation)) {
                return false;
            }
        }
        {
            List<ConformanceQuery> lhsQuery;
            lhsQuery = (((this.query!= null)&&(!this.query.isEmpty()))?this.getQuery():null);
            List<ConformanceQuery> rhsQuery;
            rhsQuery = (((that.query!= null)&&(!that.query.isEmpty()))?that.getQuery():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "query", lhsQuery), LocatorUtils.property(thatLocator, "query", rhsQuery), lhsQuery, rhsQuery)) {
                return false;
            }
        }
        {
            List<Uri> lhsDocumentMailbox;
            lhsDocumentMailbox = (((this.documentMailbox!= null)&&(!this.documentMailbox.isEmpty()))?this.getDocumentMailbox():null);
            List<Uri> rhsDocumentMailbox;
            rhsDocumentMailbox = (((that.documentMailbox!= null)&&(!that.documentMailbox.isEmpty()))?that.getDocumentMailbox():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "documentMailbox", lhsDocumentMailbox), LocatorUtils.property(thatLocator, "documentMailbox", rhsDocumentMailbox), lhsDocumentMailbox, rhsDocumentMailbox)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            RestfulConformanceMode theMode;
            theMode = this.getMode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mode", theMode), currentHashCode, theMode);
        }
        {
            org.hl7.fhir.String theDocumentation;
            theDocumentation = this.getDocumentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentation", theDocumentation), currentHashCode, theDocumentation);
        }
        {
            ConformanceSecurity theSecurity;
            theSecurity = this.getSecurity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "security", theSecurity), currentHashCode, theSecurity);
        }
        {
            List<ConformanceResource> theResource;
            theResource = (((this.resource!= null)&&(!this.resource.isEmpty()))?this.getResource():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resource", theResource), currentHashCode, theResource);
        }
        {
            List<ConformanceOperation1> theOperation;
            theOperation = (((this.operation!= null)&&(!this.operation.isEmpty()))?this.getOperation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation);
        }
        {
            List<ConformanceQuery> theQuery;
            theQuery = (((this.query!= null)&&(!this.query.isEmpty()))?this.getQuery():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "query", theQuery), currentHashCode, theQuery);
        }
        {
            List<Uri> theDocumentMailbox;
            theDocumentMailbox = (((this.documentMailbox!= null)&&(!this.documentMailbox.isEmpty()))?this.getDocumentMailbox():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "documentMailbox", theDocumentMailbox), currentHashCode, theDocumentMailbox);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
