//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Patient complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Patient">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}HumanName" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="telecom" type="{http://hl7.org/fhir}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="gender" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="birthDate" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="deceasedBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="deceasedDateTime" type="{http://hl7.org/fhir}dateTime"/>
 *         &lt;/choice>
 *         &lt;element name="address" type="{http://hl7.org/fhir}Address" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="maritalStatus" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="multipleBirthBoolean" type="{http://hl7.org/fhir}boolean"/>
 *           &lt;element name="multipleBirthInteger" type="{http://hl7.org/fhir}integer"/>
 *         &lt;/choice>
 *         &lt;element name="photo" type="{http://hl7.org/fhir}Attachment" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="contact" type="{http://hl7.org/fhir}Patient.Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="animal" type="{http://hl7.org/fhir}Patient.Animal" minOccurs="0"/>
 *         &lt;element name="communication" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="careProvider" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="managingOrganization" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="link" type="{http://hl7.org/fhir}Patient.Link" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="active" type="{http://hl7.org/fhir}boolean" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Patient", propOrder = {
    "identifier",
    "name",
    "telecom",
    "gender",
    "birthDate",
    "deceasedBoolean",
    "deceasedDateTime",
    "address",
    "maritalStatus",
    "multipleBirthBoolean",
    "multipleBirthInteger",
    "photo",
    "contact",
    "animal",
    "communication",
    "careProvider",
    "managingOrganization",
    "link",
    "active"
})
@Entity(name = "Patient")
@Table(name = "PATIENT")
public class Patient
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    protected List<HumanName> name;
    protected List<Contact> telecom;
    protected CodeableConcept gender;
    protected DateTime birthDate;
    protected Boolean deceasedBoolean;
    protected DateTime deceasedDateTime;
    protected List<Address> address;
    protected CodeableConcept maritalStatus;
    protected Boolean multipleBirthBoolean;
    protected Integer multipleBirthInteger;
    protected List<Attachment> photo;
    protected List<PatientContact> contact;
    protected PatientAnimal animal;
    protected List<CodeableConcept> communication;
    protected List<ResourceReference> careProvider;
    protected ResourceReference managingOrganization;
    protected List<PatientLink> link;
    protected Boolean active;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_PATIENT_HJID")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the name property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the name property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getName().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link HumanName }
     * 
     * 
     */
    @OneToMany(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PATIENT_HJID")
    public List<HumanName> getName() {
        if (name == null) {
            name = new ArrayList<HumanName>();
        }
        return this.name;
    }

    /**
     * 
     * 
     */
    public void setName(List<HumanName> name) {
        this.name = name;
    }

    /**
     * Gets the value of the telecom property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telecom property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelecom().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOM_PATIENT_HJID")
    public List<Contact> getTelecom() {
        if (telecom == null) {
            telecom = new ArrayList<Contact>();
        }
        return this.telecom;
    }

    /**
     * 
     * 
     */
    public void setTelecom(List<Contact> telecom) {
        this.telecom = telecom;
    }

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GENDER_PATIENT_HJID")
    public CodeableConcept getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setGender(CodeableConcept value) {
        this.gender = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BIRTHDATE_PATIENT_HJID")
    public DateTime getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setBirthDate(DateTime value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the deceasedBoolean property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DECEASEDBOOLEAN_PATIENT_HJID")
    public Boolean getDeceasedBoolean() {
        return deceasedBoolean;
    }

    /**
     * Sets the value of the deceasedBoolean property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDeceasedBoolean(Boolean value) {
        this.deceasedBoolean = value;
    }

    /**
     * Gets the value of the deceasedDateTime property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DECEASEDDATETIME_PATIENT_HJID")
    public DateTime getDeceasedDateTime() {
        return deceasedDateTime;
    }

    /**
     * Sets the value of the deceasedDateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setDeceasedDateTime(DateTime value) {
        this.deceasedDateTime = value;
    }

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Address }
     * 
     * 
     */
    @OneToMany(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_PATIENT_HJID")
    public List<Address> getAddress() {
        if (address == null) {
            address = new ArrayList<Address>();
        }
        return this.address;
    }

    /**
     * 
     * 
     */
    public void setAddress(List<Address> address) {
        this.address = address;
    }

    /**
     * Gets the value of the maritalStatus property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MARITALSTATUS_PATIENT_HJID")
    public CodeableConcept getMaritalStatus() {
        return maritalStatus;
    }

    /**
     * Sets the value of the maritalStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setMaritalStatus(CodeableConcept value) {
        this.maritalStatus = value;
    }

    /**
     * Gets the value of the multipleBirthBoolean property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MULTIPLEBIRTHBOOLEAN_PATIENT_0")
    public Boolean getMultipleBirthBoolean() {
        return multipleBirthBoolean;
    }

    /**
     * Sets the value of the multipleBirthBoolean property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setMultipleBirthBoolean(Boolean value) {
        this.multipleBirthBoolean = value;
    }

    /**
     * Gets the value of the multipleBirthInteger property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MULTIPLEBIRTHINTEGER_PATIENT_0")
    public Integer getMultipleBirthInteger() {
        return multipleBirthInteger;
    }

    /**
     * Sets the value of the multipleBirthInteger property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setMultipleBirthInteger(Integer value) {
        this.multipleBirthInteger = value;
    }

    /**
     * Gets the value of the photo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the photo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhoto().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Attachment }
     * 
     * 
     */
    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PHOTO_PATIENT_HJID")
    public List<Attachment> getPhoto() {
        if (photo == null) {
            photo = new ArrayList<Attachment>();
        }
        return this.photo;
    }

    /**
     * 
     * 
     */
    public void setPhoto(List<Attachment> photo) {
        this.photo = photo;
    }

    /**
     * Gets the value of the contact property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the contact property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContact().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PatientContact }
     * 
     * 
     */
    @OneToMany(targetEntity = PatientContact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTACT_PATIENT_HJID")
    public List<PatientContact> getContact() {
        if (contact == null) {
            contact = new ArrayList<PatientContact>();
        }
        return this.contact;
    }

    /**
     * 
     * 
     */
    public void setContact(List<PatientContact> contact) {
        this.contact = contact;
    }

    /**
     * Gets the value of the animal property.
     * 
     * @return
     *     possible object is
     *     {@link PatientAnimal }
     *     
     */
    @ManyToOne(targetEntity = PatientAnimal.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ANIMAL_PATIENT_HJID")
    public PatientAnimal getAnimal() {
        return animal;
    }

    /**
     * Sets the value of the animal property.
     * 
     * @param value
     *     allowed object is
     *     {@link PatientAnimal }
     *     
     */
    public void setAnimal(PatientAnimal value) {
        this.animal = value;
    }

    /**
     * Gets the value of the communication property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the communication property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCommunication().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMUNICATION_PATIENT_HJID")
    public List<CodeableConcept> getCommunication() {
        if (communication == null) {
            communication = new ArrayList<CodeableConcept>();
        }
        return this.communication;
    }

    /**
     * 
     * 
     */
    public void setCommunication(List<CodeableConcept> communication) {
        this.communication = communication;
    }

    /**
     * Gets the value of the careProvider property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the careProvider property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCareProvider().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CAREPROVIDER_PATIENT_HJID")
    public List<ResourceReference> getCareProvider() {
        if (careProvider == null) {
            careProvider = new ArrayList<ResourceReference>();
        }
        return this.careProvider;
    }

    /**
     * 
     * 
     */
    public void setCareProvider(List<ResourceReference> careProvider) {
        this.careProvider = careProvider;
    }

    /**
     * Gets the value of the managingOrganization property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MANAGINGORGANIZATION_PATIENT_0")
    public ResourceReference getManagingOrganization() {
        return managingOrganization;
    }

    /**
     * Sets the value of the managingOrganization property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setManagingOrganization(ResourceReference value) {
        this.managingOrganization = value;
    }

    /**
     * Gets the value of the link property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the link property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLink().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PatientLink }
     * 
     * 
     */
    @OneToMany(targetEntity = PatientLink.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LINK_PATIENT_HJID")
    public List<PatientLink> getLink() {
        if (link == null) {
            link = new ArrayList<PatientLink>();
        }
        return this.link;
    }

    /**
     * 
     * 
     */
    public void setLink(List<PatientLink> link) {
        this.link = link;
    }

    /**
     * Gets the value of the active property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    @ManyToOne(targetEntity = Boolean.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTIVE_PATIENT_HJID")
    public Boolean getActive() {
        return active;
    }

    /**
     * Sets the value of the active property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setActive(Boolean value) {
        this.active = value;
    }

    public Patient withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public Patient withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public Patient withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public Patient withName(HumanName... values) {
        if (values!= null) {
            for (HumanName value: values) {
                getName().add(value);
            }
        }
        return this;
    }

    public Patient withName(Collection<HumanName> values) {
        if (values!= null) {
            getName().addAll(values);
        }
        return this;
    }

    public Patient withName(List<HumanName> name) {
        setName(name);
        return this;
    }

    public Patient withTelecom(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecom().add(value);
            }
        }
        return this;
    }

    public Patient withTelecom(Collection<Contact> values) {
        if (values!= null) {
            getTelecom().addAll(values);
        }
        return this;
    }

    public Patient withTelecom(List<Contact> telecom) {
        setTelecom(telecom);
        return this;
    }

    public Patient withGender(CodeableConcept value) {
        setGender(value);
        return this;
    }

    public Patient withBirthDate(DateTime value) {
        setBirthDate(value);
        return this;
    }

    public Patient withDeceasedBoolean(Boolean value) {
        setDeceasedBoolean(value);
        return this;
    }

    public Patient withDeceasedDateTime(DateTime value) {
        setDeceasedDateTime(value);
        return this;
    }

    public Patient withAddress(Address... values) {
        if (values!= null) {
            for (Address value: values) {
                getAddress().add(value);
            }
        }
        return this;
    }

    public Patient withAddress(Collection<Address> values) {
        if (values!= null) {
            getAddress().addAll(values);
        }
        return this;
    }

    public Patient withAddress(List<Address> address) {
        setAddress(address);
        return this;
    }

    public Patient withMaritalStatus(CodeableConcept value) {
        setMaritalStatus(value);
        return this;
    }

    public Patient withMultipleBirthBoolean(Boolean value) {
        setMultipleBirthBoolean(value);
        return this;
    }

    public Patient withMultipleBirthInteger(Integer value) {
        setMultipleBirthInteger(value);
        return this;
    }

    public Patient withPhoto(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPhoto().add(value);
            }
        }
        return this;
    }

    public Patient withPhoto(Collection<Attachment> values) {
        if (values!= null) {
            getPhoto().addAll(values);
        }
        return this;
    }

    public Patient withPhoto(List<Attachment> photo) {
        setPhoto(photo);
        return this;
    }

    public Patient withContact(PatientContact... values) {
        if (values!= null) {
            for (PatientContact value: values) {
                getContact().add(value);
            }
        }
        return this;
    }

    public Patient withContact(Collection<PatientContact> values) {
        if (values!= null) {
            getContact().addAll(values);
        }
        return this;
    }

    public Patient withContact(List<PatientContact> contact) {
        setContact(contact);
        return this;
    }

    public Patient withAnimal(PatientAnimal value) {
        setAnimal(value);
        return this;
    }

    public Patient withCommunication(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCommunication().add(value);
            }
        }
        return this;
    }

    public Patient withCommunication(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCommunication().addAll(values);
        }
        return this;
    }

    public Patient withCommunication(List<CodeableConcept> communication) {
        setCommunication(communication);
        return this;
    }

    public Patient withCareProvider(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getCareProvider().add(value);
            }
        }
        return this;
    }

    public Patient withCareProvider(Collection<ResourceReference> values) {
        if (values!= null) {
            getCareProvider().addAll(values);
        }
        return this;
    }

    public Patient withCareProvider(List<ResourceReference> careProvider) {
        setCareProvider(careProvider);
        return this;
    }

    public Patient withManagingOrganization(ResourceReference value) {
        setManagingOrganization(value);
        return this;
    }

    public Patient withLink(PatientLink... values) {
        if (values!= null) {
            for (PatientLink value: values) {
                getLink().add(value);
            }
        }
        return this;
    }

    public Patient withLink(Collection<PatientLink> values) {
        if (values!= null) {
            getLink().addAll(values);
        }
        return this;
    }

    public Patient withLink(List<PatientLink> link) {
        setLink(link);
        return this;
    }

    public Patient withActive(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public Patient withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Patient withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Patient withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Patient withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Patient withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Patient withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Patient withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Patient withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Patient)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Patient that = ((Patient) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            List<HumanName> lhsName;
            lhsName = (((this.name!= null)&&(!this.name.isEmpty()))?this.getName():null);
            List<HumanName> rhsName;
            rhsName = (((that.name!= null)&&(!that.name.isEmpty()))?that.getName():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecom;
            lhsTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            List<Contact> rhsTelecom;
            rhsTelecom = (((that.telecom!= null)&&(!that.telecom.isEmpty()))?that.getTelecom():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecom", lhsTelecom), LocatorUtils.property(thatLocator, "telecom", rhsTelecom), lhsTelecom, rhsTelecom)) {
                return false;
            }
        }
        {
            CodeableConcept lhsGender;
            lhsGender = this.getGender();
            CodeableConcept rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            DateTime lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            DateTime rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            Boolean lhsDeceasedBoolean;
            lhsDeceasedBoolean = this.getDeceasedBoolean();
            Boolean rhsDeceasedBoolean;
            rhsDeceasedBoolean = that.getDeceasedBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deceasedBoolean", lhsDeceasedBoolean), LocatorUtils.property(thatLocator, "deceasedBoolean", rhsDeceasedBoolean), lhsDeceasedBoolean, rhsDeceasedBoolean)) {
                return false;
            }
        }
        {
            DateTime lhsDeceasedDateTime;
            lhsDeceasedDateTime = this.getDeceasedDateTime();
            DateTime rhsDeceasedDateTime;
            rhsDeceasedDateTime = that.getDeceasedDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "deceasedDateTime", lhsDeceasedDateTime), LocatorUtils.property(thatLocator, "deceasedDateTime", rhsDeceasedDateTime), lhsDeceasedDateTime, rhsDeceasedDateTime)) {
                return false;
            }
        }
        {
            List<Address> lhsAddress;
            lhsAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            List<Address> rhsAddress;
            rhsAddress = (((that.address!= null)&&(!that.address.isEmpty()))?that.getAddress():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            CodeableConcept lhsMaritalStatus;
            lhsMaritalStatus = this.getMaritalStatus();
            CodeableConcept rhsMaritalStatus;
            rhsMaritalStatus = that.getMaritalStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maritalStatus", lhsMaritalStatus), LocatorUtils.property(thatLocator, "maritalStatus", rhsMaritalStatus), lhsMaritalStatus, rhsMaritalStatus)) {
                return false;
            }
        }
        {
            Boolean lhsMultipleBirthBoolean;
            lhsMultipleBirthBoolean = this.getMultipleBirthBoolean();
            Boolean rhsMultipleBirthBoolean;
            rhsMultipleBirthBoolean = that.getMultipleBirthBoolean();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multipleBirthBoolean", lhsMultipleBirthBoolean), LocatorUtils.property(thatLocator, "multipleBirthBoolean", rhsMultipleBirthBoolean), lhsMultipleBirthBoolean, rhsMultipleBirthBoolean)) {
                return false;
            }
        }
        {
            Integer lhsMultipleBirthInteger;
            lhsMultipleBirthInteger = this.getMultipleBirthInteger();
            Integer rhsMultipleBirthInteger;
            rhsMultipleBirthInteger = that.getMultipleBirthInteger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "multipleBirthInteger", lhsMultipleBirthInteger), LocatorUtils.property(thatLocator, "multipleBirthInteger", rhsMultipleBirthInteger), lhsMultipleBirthInteger, rhsMultipleBirthInteger)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPhoto;
            lhsPhoto = (((this.photo!= null)&&(!this.photo.isEmpty()))?this.getPhoto():null);
            List<Attachment> rhsPhoto;
            rhsPhoto = (((that.photo!= null)&&(!that.photo.isEmpty()))?that.getPhoto():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "photo", lhsPhoto), LocatorUtils.property(thatLocator, "photo", rhsPhoto), lhsPhoto, rhsPhoto)) {
                return false;
            }
        }
        {
            List<PatientContact> lhsContact;
            lhsContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            List<PatientContact> rhsContact;
            rhsContact = (((that.contact!= null)&&(!that.contact.isEmpty()))?that.getContact():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contact", lhsContact), LocatorUtils.property(thatLocator, "contact", rhsContact), lhsContact, rhsContact)) {
                return false;
            }
        }
        {
            PatientAnimal lhsAnimal;
            lhsAnimal = this.getAnimal();
            PatientAnimal rhsAnimal;
            rhsAnimal = that.getAnimal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "animal", lhsAnimal), LocatorUtils.property(thatLocator, "animal", rhsAnimal), lhsAnimal, rhsAnimal)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCommunication;
            lhsCommunication = (((this.communication!= null)&&(!this.communication.isEmpty()))?this.getCommunication():null);
            List<CodeableConcept> rhsCommunication;
            rhsCommunication = (((that.communication!= null)&&(!that.communication.isEmpty()))?that.getCommunication():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "communication", lhsCommunication), LocatorUtils.property(thatLocator, "communication", rhsCommunication), lhsCommunication, rhsCommunication)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsCareProvider;
            lhsCareProvider = (((this.careProvider!= null)&&(!this.careProvider.isEmpty()))?this.getCareProvider():null);
            List<ResourceReference> rhsCareProvider;
            rhsCareProvider = (((that.careProvider!= null)&&(!that.careProvider.isEmpty()))?that.getCareProvider():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "careProvider", lhsCareProvider), LocatorUtils.property(thatLocator, "careProvider", rhsCareProvider), lhsCareProvider, rhsCareProvider)) {
                return false;
            }
        }
        {
            ResourceReference lhsManagingOrganization;
            lhsManagingOrganization = this.getManagingOrganization();
            ResourceReference rhsManagingOrganization;
            rhsManagingOrganization = that.getManagingOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "managingOrganization", lhsManagingOrganization), LocatorUtils.property(thatLocator, "managingOrganization", rhsManagingOrganization), lhsManagingOrganization, rhsManagingOrganization)) {
                return false;
            }
        }
        {
            List<PatientLink> lhsLink;
            lhsLink = (((this.link!= null)&&(!this.link.isEmpty()))?this.getLink():null);
            List<PatientLink> rhsLink;
            rhsLink = (((that.link!= null)&&(!that.link.isEmpty()))?that.getLink():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "link", lhsLink), LocatorUtils.property(thatLocator, "link", rhsLink), lhsLink, rhsLink)) {
                return false;
            }
        }
        {
            Boolean lhsActive;
            lhsActive = this.getActive();
            Boolean rhsActive;
            rhsActive = that.getActive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "active", lhsActive), LocatorUtils.property(thatLocator, "active", rhsActive), lhsActive, rhsActive)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            List<HumanName> theName;
            theName = (((this.name!= null)&&(!this.name.isEmpty()))?this.getName():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            List<Contact> theTelecom;
            theTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecom", theTelecom), currentHashCode, theTelecom);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            Boolean theDeceasedBoolean;
            theDeceasedBoolean = this.getDeceasedBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deceasedBoolean", theDeceasedBoolean), currentHashCode, theDeceasedBoolean);
        }
        {
            DateTime theDeceasedDateTime;
            theDeceasedDateTime = this.getDeceasedDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "deceasedDateTime", theDeceasedDateTime), currentHashCode, theDeceasedDateTime);
        }
        {
            List<Address> theAddress;
            theAddress = (((this.address!= null)&&(!this.address.isEmpty()))?this.getAddress():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            CodeableConcept theMaritalStatus;
            theMaritalStatus = this.getMaritalStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maritalStatus", theMaritalStatus), currentHashCode, theMaritalStatus);
        }
        {
            Boolean theMultipleBirthBoolean;
            theMultipleBirthBoolean = this.getMultipleBirthBoolean();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multipleBirthBoolean", theMultipleBirthBoolean), currentHashCode, theMultipleBirthBoolean);
        }
        {
            Integer theMultipleBirthInteger;
            theMultipleBirthInteger = this.getMultipleBirthInteger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "multipleBirthInteger", theMultipleBirthInteger), currentHashCode, theMultipleBirthInteger);
        }
        {
            List<Attachment> thePhoto;
            thePhoto = (((this.photo!= null)&&(!this.photo.isEmpty()))?this.getPhoto():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "photo", thePhoto), currentHashCode, thePhoto);
        }
        {
            List<PatientContact> theContact;
            theContact = (((this.contact!= null)&&(!this.contact.isEmpty()))?this.getContact():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contact", theContact), currentHashCode, theContact);
        }
        {
            PatientAnimal theAnimal;
            theAnimal = this.getAnimal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "animal", theAnimal), currentHashCode, theAnimal);
        }
        {
            List<CodeableConcept> theCommunication;
            theCommunication = (((this.communication!= null)&&(!this.communication.isEmpty()))?this.getCommunication():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "communication", theCommunication), currentHashCode, theCommunication);
        }
        {
            List<ResourceReference> theCareProvider;
            theCareProvider = (((this.careProvider!= null)&&(!this.careProvider.isEmpty()))?this.getCareProvider():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "careProvider", theCareProvider), currentHashCode, theCareProvider);
        }
        {
            ResourceReference theManagingOrganization;
            theManagingOrganization = this.getManagingOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "managingOrganization", theManagingOrganization), currentHashCode, theManagingOrganization);
        }
        {
            List<PatientLink> theLink;
            theLink = (((this.link!= null)&&(!this.link.isEmpty()))?this.getLink():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "link", theLink), currentHashCode, theLink);
        }
        {
            Boolean theActive;
            theActive = this.getActive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "active", theActive), currentHashCode, theActive);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
