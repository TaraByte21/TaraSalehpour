//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for DocumentReference complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DocumentReference">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="masterIdentifier" type="{http://hl7.org/fhir}Identifier"/>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="subject" type="{http://hl7.org/fhir}ResourceReference"/>
 *         &lt;element name="type" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="class" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="author" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded"/>
 *         &lt;element name="custodian" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="policyManager" type="{http://hl7.org/fhir}uri" minOccurs="0"/>
 *         &lt;element name="authenticator" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="created" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;element name="indexed" type="{http://hl7.org/fhir}instant"/>
 *         &lt;element name="status" type="{http://hl7.org/fhir}DocumentReferenceStatus"/>
 *         &lt;element name="docStatus" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="relatesTo" type="{http://hl7.org/fhir}DocumentReference.RelatesTo" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="description" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="confidentiality" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="primaryLanguage" type="{http://hl7.org/fhir}code" minOccurs="0"/>
 *         &lt;element name="mimeType" type="{http://hl7.org/fhir}code"/>
 *         &lt;element name="format" type="{http://hl7.org/fhir}uri" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="size" type="{http://hl7.org/fhir}integer" minOccurs="0"/>
 *         &lt;element name="hash" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *         &lt;element name="location" type="{http://hl7.org/fhir}uri" minOccurs="0"/>
 *         &lt;element name="service" type="{http://hl7.org/fhir}DocumentReference.Service" minOccurs="0"/>
 *         &lt;element name="context" type="{http://hl7.org/fhir}DocumentReference.Context" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DocumentReference", propOrder = {
    "masterIdentifier",
    "identifier",
    "subject",
    "type",
    "clazz",
    "author",
    "custodian",
    "policyManager",
    "authenticator",
    "created",
    "indexed",
    "status",
    "docStatus",
    "relatesTo",
    "description",
    "confidentiality",
    "primaryLanguage",
    "mimeType",
    "format",
    "size",
    "hash",
    "location",
    "service",
    "context"
})
@Entity(name = "DocumentReference")
@Table(name = "DOCUMENTREFERENCE")
public class DocumentReference
    extends Resource
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected Identifier masterIdentifier;
    protected List<Identifier> identifier;
    @XmlElement(required = true)
    protected ResourceReference subject;
    @XmlElement(required = true)
    protected CodeableConcept type;
    @XmlElement(name = "class")
    protected CodeableConcept clazz;
    @XmlElement(required = true)
    protected List<ResourceReference> author;
    protected ResourceReference custodian;
    protected Uri policyManager;
    protected ResourceReference authenticator;
    protected DateTime created;
    @XmlElement(required = true)
    protected Instant indexed;
    @XmlElement(required = true)
    protected DocumentReferenceStatus status;
    protected CodeableConcept docStatus;
    protected List<DocumentReferenceRelatesTo> relatesTo;
    protected org.hl7.fhir.String description;
    protected List<CodeableConcept> confidentiality;
    protected Code primaryLanguage;
    @XmlElement(required = true)
    protected Code mimeType;
    protected List<Uri> format;
    protected Integer size;
    protected org.hl7.fhir.String hash;
    protected Uri location;
    protected DocumentReferenceService service;
    protected DocumentReferenceContext context;

    /**
     * Gets the value of the masterIdentifier property.
     * 
     * @return
     *     possible object is
     *     {@link Identifier }
     *     
     */
    @ManyToOne(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MASTERIDENTIFIER_DOCUMENTREF_0")
    public Identifier getMasterIdentifier() {
        return masterIdentifier;
    }

    /**
     * Sets the value of the masterIdentifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Identifier }
     *     
     */
    public void setMasterIdentifier(Identifier value) {
        this.masterIdentifier = value;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_DOCUMENTREFERENCE_0")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the subject property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBJECT_DOCUMENTREFERENCE_HJ_0")
    public ResourceReference getSubject() {
        return subject;
    }

    /**
     * Sets the value of the subject property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setSubject(ResourceReference value) {
        this.subject = value;
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__DOCUMENTREFERENCE_HJID")
    public CodeableConcept getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setType(CodeableConcept value) {
        this.type = value;
    }

    /**
     * Gets the value of the clazz property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CLAZZ_DOCUMENTREFERENCE_HJID")
    public CodeableConcept getClazz() {
        return clazz;
    }

    /**
     * Sets the value of the clazz property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setClazz(CodeableConcept value) {
        this.clazz = value;
    }

    /**
     * Gets the value of the author property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the author property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAuthor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHOR_DOCUMENTREFERENCE_HJID")
    public List<ResourceReference> getAuthor() {
        if (author == null) {
            author = new ArrayList<ResourceReference>();
        }
        return this.author;
    }

    /**
     * 
     * 
     */
    public void setAuthor(List<ResourceReference> author) {
        this.author = author;
    }

    /**
     * Gets the value of the custodian property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CUSTODIAN_DOCUMENTREFERENCE__0")
    public ResourceReference getCustodian() {
        return custodian;
    }

    /**
     * Sets the value of the custodian property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setCustodian(ResourceReference value) {
        this.custodian = value;
    }

    /**
     * Gets the value of the policyManager property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "POLICYMANAGER_DOCUMENTREFERE_0")
    public Uri getPolicyManager() {
        return policyManager;
    }

    /**
     * Sets the value of the policyManager property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setPolicyManager(Uri value) {
        this.policyManager = value;
    }

    /**
     * Gets the value of the authenticator property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "AUTHENTICATOR_DOCUMENTREFERE_0")
    public ResourceReference getAuthenticator() {
        return authenticator;
    }

    /**
     * Sets the value of the authenticator property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setAuthenticator(ResourceReference value) {
        this.authenticator = value;
    }

    /**
     * Gets the value of the created property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CREATED_DOCUMENTREFERENCE_HJ_0")
    public DateTime getCreated() {
        return created;
    }

    /**
     * Sets the value of the created property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setCreated(DateTime value) {
        this.created = value;
    }

    /**
     * Gets the value of the indexed property.
     * 
     * @return
     *     possible object is
     *     {@link Instant }
     *     
     */
    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "INDEXED_DOCUMENTREFERENCE_HJ_0")
    public Instant getIndexed() {
        return indexed;
    }

    /**
     * Sets the value of the indexed property.
     * 
     * @param value
     *     allowed object is
     *     {@link Instant }
     *     
     */
    public void setIndexed(Instant value) {
        this.indexed = value;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link DocumentReferenceStatus }
     *     
     */
    @ManyToOne(targetEntity = DocumentReferenceStatus.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "STATUS_DOCUMENTREFERENCE_HJID")
    public DocumentReferenceStatus getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link DocumentReferenceStatus }
     *     
     */
    public void setStatus(DocumentReferenceStatus value) {
        this.status = value;
    }

    /**
     * Gets the value of the docStatus property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DOCSTATUS_DOCUMENTREFERENCE__0")
    public CodeableConcept getDocStatus() {
        return docStatus;
    }

    /**
     * Sets the value of the docStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setDocStatus(CodeableConcept value) {
        this.docStatus = value;
    }

    /**
     * Gets the value of the relatesTo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatesTo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatesTo().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DocumentReferenceRelatesTo }
     * 
     * 
     */
    @OneToMany(targetEntity = DocumentReferenceRelatesTo.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "RELATESTO_DOCUMENTREFERENCE__0")
    public List<DocumentReferenceRelatesTo> getRelatesTo() {
        if (relatesTo == null) {
            relatesTo = new ArrayList<DocumentReferenceRelatesTo>();
        }
        return this.relatesTo;
    }

    /**
     * 
     * 
     */
    public void setRelatesTo(List<DocumentReferenceRelatesTo> relatesTo) {
        this.relatesTo = relatesTo;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DESCRIPTION_DOCUMENTREFERENC_0")
    public org.hl7.fhir.String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setDescription(org.hl7.fhir.String value) {
        this.description = value;
    }

    /**
     * Gets the value of the confidentiality property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the confidentiality property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getConfidentiality().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONFIDENTIALITY_DOCUMENTREFE_0")
    public List<CodeableConcept> getConfidentiality() {
        if (confidentiality == null) {
            confidentiality = new ArrayList<CodeableConcept>();
        }
        return this.confidentiality;
    }

    /**
     * 
     * 
     */
    public void setConfidentiality(List<CodeableConcept> confidentiality) {
        this.confidentiality = confidentiality;
    }

    /**
     * Gets the value of the primaryLanguage property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PRIMARYLANGUAGE_DOCUMENTREFE_0")
    public Code getPrimaryLanguage() {
        return primaryLanguage;
    }

    /**
     * Sets the value of the primaryLanguage property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setPrimaryLanguage(Code value) {
        this.primaryLanguage = value;
    }

    /**
     * Gets the value of the mimeType property.
     * 
     * @return
     *     possible object is
     *     {@link Code }
     *     
     */
    @ManyToOne(targetEntity = Code.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "MIMETYPE_DOCUMENTREFERENCE_H_0")
    public Code getMimeType() {
        return mimeType;
    }

    /**
     * Sets the value of the mimeType property.
     * 
     * @param value
     *     allowed object is
     *     {@link Code }
     *     
     */
    public void setMimeType(Code value) {
        this.mimeType = value;
    }

    /**
     * Gets the value of the format property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the format property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFormat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Uri }
     * 
     * 
     */
    @OneToMany(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "FORMAT_DOCUMENTREFERENCE_HJID")
    public List<Uri> getFormat() {
        if (format == null) {
            format = new ArrayList<Uri>();
        }
        return this.format;
    }

    /**
     * 
     * 
     */
    public void setFormat(List<Uri> format) {
        this.format = format;
    }

    /**
     * Gets the value of the size property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    @ManyToOne(targetEntity = Integer.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SIZE__DOCUMENTREFERENCE_HJID")
    public Integer getSize() {
        return size;
    }

    /**
     * Sets the value of the size property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setSize(Integer value) {
        this.size = value;
    }

    /**
     * Gets the value of the hash property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "HASH_DOCUMENTREFERENCE_HJID")
    public org.hl7.fhir.String getHash() {
        return hash;
    }

    /**
     * Sets the value of the hash property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setHash(org.hl7.fhir.String value) {
        this.hash = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * @return
     *     possible object is
     *     {@link Uri }
     *     
     */
    @ManyToOne(targetEntity = Uri.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__DOCUMENTREFERENCE__0")
    public Uri getLocation() {
        return location;
    }

    /**
     * Sets the value of the location property.
     * 
     * @param value
     *     allowed object is
     *     {@link Uri }
     *     
     */
    public void setLocation(Uri value) {
        this.location = value;
    }

    /**
     * Gets the value of the service property.
     * 
     * @return
     *     possible object is
     *     {@link DocumentReferenceService }
     *     
     */
    @ManyToOne(targetEntity = DocumentReferenceService.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SERVICE_DOCUMENTREFERENCE_HJ_0")
    public DocumentReferenceService getService() {
        return service;
    }

    /**
     * Sets the value of the service property.
     * 
     * @param value
     *     allowed object is
     *     {@link DocumentReferenceService }
     *     
     */
    public void setService(DocumentReferenceService value) {
        this.service = value;
    }

    /**
     * Gets the value of the context property.
     * 
     * @return
     *     possible object is
     *     {@link DocumentReferenceContext }
     *     
     */
    @ManyToOne(targetEntity = DocumentReferenceContext.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "CONTEXT_DOCUMENTREFERENCE_HJ_0")
    public DocumentReferenceContext getContext() {
        return context;
    }

    /**
     * Sets the value of the context property.
     * 
     * @param value
     *     allowed object is
     *     {@link DocumentReferenceContext }
     *     
     */
    public void setContext(DocumentReferenceContext value) {
        this.context = value;
    }

    public DocumentReference withMasterIdentifier(Identifier value) {
        setMasterIdentifier(value);
        return this;
    }

    public DocumentReference withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public DocumentReference withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public DocumentReference withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public DocumentReference withSubject(ResourceReference value) {
        setSubject(value);
        return this;
    }

    public DocumentReference withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public DocumentReference withClazz(CodeableConcept value) {
        setClazz(value);
        return this;
    }

    public DocumentReference withAuthor(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getAuthor().add(value);
            }
        }
        return this;
    }

    public DocumentReference withAuthor(Collection<ResourceReference> values) {
        if (values!= null) {
            getAuthor().addAll(values);
        }
        return this;
    }

    public DocumentReference withAuthor(List<ResourceReference> author) {
        setAuthor(author);
        return this;
    }

    public DocumentReference withCustodian(ResourceReference value) {
        setCustodian(value);
        return this;
    }

    public DocumentReference withPolicyManager(Uri value) {
        setPolicyManager(value);
        return this;
    }

    public DocumentReference withAuthenticator(ResourceReference value) {
        setAuthenticator(value);
        return this;
    }

    public DocumentReference withCreated(DateTime value) {
        setCreated(value);
        return this;
    }

    public DocumentReference withIndexed(Instant value) {
        setIndexed(value);
        return this;
    }

    public DocumentReference withStatus(DocumentReferenceStatus value) {
        setStatus(value);
        return this;
    }

    public DocumentReference withDocStatus(CodeableConcept value) {
        setDocStatus(value);
        return this;
    }

    public DocumentReference withRelatesTo(DocumentReferenceRelatesTo... values) {
        if (values!= null) {
            for (DocumentReferenceRelatesTo value: values) {
                getRelatesTo().add(value);
            }
        }
        return this;
    }

    public DocumentReference withRelatesTo(Collection<DocumentReferenceRelatesTo> values) {
        if (values!= null) {
            getRelatesTo().addAll(values);
        }
        return this;
    }

    public DocumentReference withRelatesTo(List<DocumentReferenceRelatesTo> relatesTo) {
        setRelatesTo(relatesTo);
        return this;
    }

    public DocumentReference withDescription(org.hl7.fhir.String value) {
        setDescription(value);
        return this;
    }

    public DocumentReference withConfidentiality(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getConfidentiality().add(value);
            }
        }
        return this;
    }

    public DocumentReference withConfidentiality(Collection<CodeableConcept> values) {
        if (values!= null) {
            getConfidentiality().addAll(values);
        }
        return this;
    }

    public DocumentReference withConfidentiality(List<CodeableConcept> confidentiality) {
        setConfidentiality(confidentiality);
        return this;
    }

    public DocumentReference withPrimaryLanguage(Code value) {
        setPrimaryLanguage(value);
        return this;
    }

    public DocumentReference withMimeType(Code value) {
        setMimeType(value);
        return this;
    }

    public DocumentReference withFormat(Uri... values) {
        if (values!= null) {
            for (Uri value: values) {
                getFormat().add(value);
            }
        }
        return this;
    }

    public DocumentReference withFormat(Collection<Uri> values) {
        if (values!= null) {
            getFormat().addAll(values);
        }
        return this;
    }

    public DocumentReference withFormat(List<Uri> format) {
        setFormat(format);
        return this;
    }

    public DocumentReference withSize(Integer value) {
        setSize(value);
        return this;
    }

    public DocumentReference withHash(org.hl7.fhir.String value) {
        setHash(value);
        return this;
    }

    public DocumentReference withLocation(Uri value) {
        setLocation(value);
        return this;
    }

    public DocumentReference withService(DocumentReferenceService value) {
        setService(value);
        return this;
    }

    public DocumentReference withContext(DocumentReferenceContext value) {
        setContext(value);
        return this;
    }

    @Override
    public DocumentReference withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DocumentReference withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public DocumentReference withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReference withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReference withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public DocumentReference withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReference withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReference withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public DocumentReference withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public DocumentReference withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public DocumentReference withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public DocumentReference withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DocumentReference)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final DocumentReference that = ((DocumentReference) object);
        {
            Identifier lhsMasterIdentifier;
            lhsMasterIdentifier = this.getMasterIdentifier();
            Identifier rhsMasterIdentifier;
            rhsMasterIdentifier = that.getMasterIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "masterIdentifier", lhsMasterIdentifier), LocatorUtils.property(thatLocator, "masterIdentifier", rhsMasterIdentifier), lhsMasterIdentifier, rhsMasterIdentifier)) {
                return false;
            }
        }
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            ResourceReference lhsSubject;
            lhsSubject = this.getSubject();
            ResourceReference rhsSubject;
            rhsSubject = that.getSubject();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subject", lhsSubject), LocatorUtils.property(thatLocator, "subject", rhsSubject), lhsSubject, rhsSubject)) {
                return false;
            }
        }
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            CodeableConcept lhsClazz;
            lhsClazz = this.getClazz();
            CodeableConcept rhsClazz;
            rhsClazz = that.getClazz();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "clazz", lhsClazz), LocatorUtils.property(thatLocator, "clazz", rhsClazz), lhsClazz, rhsClazz)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsAuthor;
            lhsAuthor = (((this.author!= null)&&(!this.author.isEmpty()))?this.getAuthor():null);
            List<ResourceReference> rhsAuthor;
            rhsAuthor = (((that.author!= null)&&(!that.author.isEmpty()))?that.getAuthor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "author", lhsAuthor), LocatorUtils.property(thatLocator, "author", rhsAuthor), lhsAuthor, rhsAuthor)) {
                return false;
            }
        }
        {
            ResourceReference lhsCustodian;
            lhsCustodian = this.getCustodian();
            ResourceReference rhsCustodian;
            rhsCustodian = that.getCustodian();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "custodian", lhsCustodian), LocatorUtils.property(thatLocator, "custodian", rhsCustodian), lhsCustodian, rhsCustodian)) {
                return false;
            }
        }
        {
            Uri lhsPolicyManager;
            lhsPolicyManager = this.getPolicyManager();
            Uri rhsPolicyManager;
            rhsPolicyManager = that.getPolicyManager();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "policyManager", lhsPolicyManager), LocatorUtils.property(thatLocator, "policyManager", rhsPolicyManager), lhsPolicyManager, rhsPolicyManager)) {
                return false;
            }
        }
        {
            ResourceReference lhsAuthenticator;
            lhsAuthenticator = this.getAuthenticator();
            ResourceReference rhsAuthenticator;
            rhsAuthenticator = that.getAuthenticator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authenticator", lhsAuthenticator), LocatorUtils.property(thatLocator, "authenticator", rhsAuthenticator), lhsAuthenticator, rhsAuthenticator)) {
                return false;
            }
        }
        {
            DateTime lhsCreated;
            lhsCreated = this.getCreated();
            DateTime rhsCreated;
            rhsCreated = that.getCreated();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "created", lhsCreated), LocatorUtils.property(thatLocator, "created", rhsCreated), lhsCreated, rhsCreated)) {
                return false;
            }
        }
        {
            Instant lhsIndexed;
            lhsIndexed = this.getIndexed();
            Instant rhsIndexed;
            rhsIndexed = that.getIndexed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexed", lhsIndexed), LocatorUtils.property(thatLocator, "indexed", rhsIndexed), lhsIndexed, rhsIndexed)) {
                return false;
            }
        }
        {
            DocumentReferenceStatus lhsStatus;
            lhsStatus = this.getStatus();
            DocumentReferenceStatus rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            CodeableConcept lhsDocStatus;
            lhsDocStatus = this.getDocStatus();
            CodeableConcept rhsDocStatus;
            rhsDocStatus = that.getDocStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "docStatus", lhsDocStatus), LocatorUtils.property(thatLocator, "docStatus", rhsDocStatus), lhsDocStatus, rhsDocStatus)) {
                return false;
            }
        }
        {
            List<DocumentReferenceRelatesTo> lhsRelatesTo;
            lhsRelatesTo = (((this.relatesTo!= null)&&(!this.relatesTo.isEmpty()))?this.getRelatesTo():null);
            List<DocumentReferenceRelatesTo> rhsRelatesTo;
            rhsRelatesTo = (((that.relatesTo!= null)&&(!that.relatesTo.isEmpty()))?that.getRelatesTo():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatesTo", lhsRelatesTo), LocatorUtils.property(thatLocator, "relatesTo", rhsRelatesTo), lhsRelatesTo, rhsRelatesTo)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsDescription;
            lhsDescription = this.getDescription();
            org.hl7.fhir.String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsConfidentiality;
            lhsConfidentiality = (((this.confidentiality!= null)&&(!this.confidentiality.isEmpty()))?this.getConfidentiality():null);
            List<CodeableConcept> rhsConfidentiality;
            rhsConfidentiality = (((that.confidentiality!= null)&&(!that.confidentiality.isEmpty()))?that.getConfidentiality():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "confidentiality", lhsConfidentiality), LocatorUtils.property(thatLocator, "confidentiality", rhsConfidentiality), lhsConfidentiality, rhsConfidentiality)) {
                return false;
            }
        }
        {
            Code lhsPrimaryLanguage;
            lhsPrimaryLanguage = this.getPrimaryLanguage();
            Code rhsPrimaryLanguage;
            rhsPrimaryLanguage = that.getPrimaryLanguage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "primaryLanguage", lhsPrimaryLanguage), LocatorUtils.property(thatLocator, "primaryLanguage", rhsPrimaryLanguage), lhsPrimaryLanguage, rhsPrimaryLanguage)) {
                return false;
            }
        }
        {
            Code lhsMimeType;
            lhsMimeType = this.getMimeType();
            Code rhsMimeType;
            rhsMimeType = that.getMimeType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mimeType", lhsMimeType), LocatorUtils.property(thatLocator, "mimeType", rhsMimeType), lhsMimeType, rhsMimeType)) {
                return false;
            }
        }
        {
            List<Uri> lhsFormat;
            lhsFormat = (((this.format!= null)&&(!this.format.isEmpty()))?this.getFormat():null);
            List<Uri> rhsFormat;
            rhsFormat = (((that.format!= null)&&(!that.format.isEmpty()))?that.getFormat():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "format", lhsFormat), LocatorUtils.property(thatLocator, "format", rhsFormat), lhsFormat, rhsFormat)) {
                return false;
            }
        }
        {
            Integer lhsSize;
            lhsSize = this.getSize();
            Integer rhsSize;
            rhsSize = that.getSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "size", lhsSize), LocatorUtils.property(thatLocator, "size", rhsSize), lhsSize, rhsSize)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsHash;
            lhsHash = this.getHash();
            org.hl7.fhir.String rhsHash;
            rhsHash = that.getHash();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hash", lhsHash), LocatorUtils.property(thatLocator, "hash", rhsHash), lhsHash, rhsHash)) {
                return false;
            }
        }
        {
            Uri lhsLocation;
            lhsLocation = this.getLocation();
            Uri rhsLocation;
            rhsLocation = that.getLocation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            DocumentReferenceService lhsService;
            lhsService = this.getService();
            DocumentReferenceService rhsService;
            rhsService = that.getService();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "service", lhsService), LocatorUtils.property(thatLocator, "service", rhsService), lhsService, rhsService)) {
                return false;
            }
        }
        {
            DocumentReferenceContext lhsContext;
            lhsContext = this.getContext();
            DocumentReferenceContext rhsContext;
            rhsContext = that.getContext();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "context", lhsContext), LocatorUtils.property(thatLocator, "context", rhsContext), lhsContext, rhsContext)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            Identifier theMasterIdentifier;
            theMasterIdentifier = this.getMasterIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "masterIdentifier", theMasterIdentifier), currentHashCode, theMasterIdentifier);
        }
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            ResourceReference theSubject;
            theSubject = this.getSubject();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subject", theSubject), currentHashCode, theSubject);
        }
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            CodeableConcept theClazz;
            theClazz = this.getClazz();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "clazz", theClazz), currentHashCode, theClazz);
        }
        {
            List<ResourceReference> theAuthor;
            theAuthor = (((this.author!= null)&&(!this.author.isEmpty()))?this.getAuthor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "author", theAuthor), currentHashCode, theAuthor);
        }
        {
            ResourceReference theCustodian;
            theCustodian = this.getCustodian();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "custodian", theCustodian), currentHashCode, theCustodian);
        }
        {
            Uri thePolicyManager;
            thePolicyManager = this.getPolicyManager();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "policyManager", thePolicyManager), currentHashCode, thePolicyManager);
        }
        {
            ResourceReference theAuthenticator;
            theAuthenticator = this.getAuthenticator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authenticator", theAuthenticator), currentHashCode, theAuthenticator);
        }
        {
            DateTime theCreated;
            theCreated = this.getCreated();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "created", theCreated), currentHashCode, theCreated);
        }
        {
            Instant theIndexed;
            theIndexed = this.getIndexed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexed", theIndexed), currentHashCode, theIndexed);
        }
        {
            DocumentReferenceStatus theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            CodeableConcept theDocStatus;
            theDocStatus = this.getDocStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "docStatus", theDocStatus), currentHashCode, theDocStatus);
        }
        {
            List<DocumentReferenceRelatesTo> theRelatesTo;
            theRelatesTo = (((this.relatesTo!= null)&&(!this.relatesTo.isEmpty()))?this.getRelatesTo():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatesTo", theRelatesTo), currentHashCode, theRelatesTo);
        }
        {
            org.hl7.fhir.String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            List<CodeableConcept> theConfidentiality;
            theConfidentiality = (((this.confidentiality!= null)&&(!this.confidentiality.isEmpty()))?this.getConfidentiality():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "confidentiality", theConfidentiality), currentHashCode, theConfidentiality);
        }
        {
            Code thePrimaryLanguage;
            thePrimaryLanguage = this.getPrimaryLanguage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "primaryLanguage", thePrimaryLanguage), currentHashCode, thePrimaryLanguage);
        }
        {
            Code theMimeType;
            theMimeType = this.getMimeType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mimeType", theMimeType), currentHashCode, theMimeType);
        }
        {
            List<Uri> theFormat;
            theFormat = (((this.format!= null)&&(!this.format.isEmpty()))?this.getFormat():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "format", theFormat), currentHashCode, theFormat);
        }
        {
            Integer theSize;
            theSize = this.getSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "size", theSize), currentHashCode, theSize);
        }
        {
            org.hl7.fhir.String theHash;
            theHash = this.getHash();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hash", theHash), currentHashCode, theHash);
        }
        {
            Uri theLocation;
            theLocation = this.getLocation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            DocumentReferenceService theService;
            theService = this.getService();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "service", theService), currentHashCode, theService);
        }
        {
            DocumentReferenceContext theContext;
            theContext = this.getContext();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "context", theContext), currentHashCode, theContext);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
