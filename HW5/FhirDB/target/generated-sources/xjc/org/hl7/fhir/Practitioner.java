//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * If the element is present, it must have either a @value, an @id, or extensions
 * 
 * <p>Java class for Practitioner complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Practitioner">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}Resource">
 *       &lt;sequence>
 *         &lt;element name="identifier" type="{http://hl7.org/fhir}Identifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="name" type="{http://hl7.org/fhir}HumanName" minOccurs="0"/>
 *         &lt;element name="telecom" type="{http://hl7.org/fhir}Contact" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="address" type="{http://hl7.org/fhir}Address" minOccurs="0"/>
 *         &lt;element name="gender" type="{http://hl7.org/fhir}CodeableConcept" minOccurs="0"/>
 *         &lt;element name="birthDate" type="{http://hl7.org/fhir}dateTime" minOccurs="0"/>
 *         &lt;element name="photo" type="{http://hl7.org/fhir}Attachment" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="organization" type="{http://hl7.org/fhir}ResourceReference" minOccurs="0"/>
 *         &lt;element name="role" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="specialty" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="period" type="{http://hl7.org/fhir}Period" minOccurs="0"/>
 *         &lt;element name="location" type="{http://hl7.org/fhir}ResourceReference" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="qualification" type="{http://hl7.org/fhir}Practitioner.Qualification" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="communication" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Practitioner", propOrder = {
    "identifier",
    "name",
    "telecom",
    "address",
    "gender",
    "birthDate",
    "photo",
    "organization",
    "role",
    "specialty",
    "period",
    "location",
    "qualification",
    "communication"
})
@Entity(name = "Practitioner")
@Table(name = "PRACTITIONER")
public class Practitioner
    extends Resource
    implements Equals, HashCode
{

    protected List<Identifier> identifier;
    protected HumanName name;
    protected List<Contact> telecom;
    protected Address address;
    protected CodeableConcept gender;
    protected DateTime birthDate;
    protected List<Attachment> photo;
    protected ResourceReference organization;
    protected List<CodeableConcept> role;
    protected List<CodeableConcept> specialty;
    protected Period period;
    protected List<ResourceReference> location;
    protected List<PractitionerQualification> qualification;
    protected List<CodeableConcept> communication;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Identifier }
     * 
     * 
     */
    @OneToMany(targetEntity = Identifier.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "IDENTIFIER_PRACTITIONER_HJID")
    public List<Identifier> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<Identifier>();
        }
        return this.identifier;
    }

    /**
     * 
     * 
     */
    public void setIdentifier(List<Identifier> identifier) {
        this.identifier = identifier;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link HumanName }
     *     
     */
    @ManyToOne(targetEntity = HumanName.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "NAME__PRACTITIONER_HJID")
    public HumanName getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link HumanName }
     *     
     */
    public void setName(HumanName value) {
        this.name = value;
    }

    /**
     * Gets the value of the telecom property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the telecom property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTelecom().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Contact }
     * 
     * 
     */
    @OneToMany(targetEntity = Contact.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TELECOM_PRACTITIONER_HJID")
    public List<Contact> getTelecom() {
        if (telecom == null) {
            telecom = new ArrayList<Contact>();
        }
        return this.telecom;
    }

    /**
     * 
     * 
     */
    public void setTelecom(List<Contact> telecom) {
        this.telecom = telecom;
    }

    /**
     * Gets the value of the address property.
     * 
     * @return
     *     possible object is
     *     {@link Address }
     *     
     */
    @ManyToOne(targetEntity = Address.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ADDRESS_PRACTITIONER_HJID")
    public Address getAddress() {
        return address;
    }

    /**
     * Sets the value of the address property.
     * 
     * @param value
     *     allowed object is
     *     {@link Address }
     *     
     */
    public void setAddress(Address value) {
        this.address = value;
    }

    /**
     * Gets the value of the gender property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "GENDER_PRACTITIONER_HJID")
    public CodeableConcept getGender() {
        return gender;
    }

    /**
     * Sets the value of the gender property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setGender(CodeableConcept value) {
        this.gender = value;
    }

    /**
     * Gets the value of the birthDate property.
     * 
     * @return
     *     possible object is
     *     {@link DateTime }
     *     
     */
    @ManyToOne(targetEntity = DateTime.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "BIRTHDATE_PRACTITIONER_HJID")
    public DateTime getBirthDate() {
        return birthDate;
    }

    /**
     * Sets the value of the birthDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTime }
     *     
     */
    public void setBirthDate(DateTime value) {
        this.birthDate = value;
    }

    /**
     * Gets the value of the photo property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the photo property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPhoto().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Attachment }
     * 
     * 
     */
    @OneToMany(targetEntity = Attachment.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PHOTO_PRACTITIONER_HJID")
    public List<Attachment> getPhoto() {
        if (photo == null) {
            photo = new ArrayList<Attachment>();
        }
        return this.photo;
    }

    /**
     * 
     * 
     */
    public void setPhoto(List<Attachment> photo) {
        this.photo = photo;
    }

    /**
     * Gets the value of the organization property.
     * 
     * @return
     *     possible object is
     *     {@link ResourceReference }
     *     
     */
    @ManyToOne(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ORGANIZATION_PRACTITIONER_HJ_0")
    public ResourceReference getOrganization() {
        return organization;
    }

    /**
     * Sets the value of the organization property.
     * 
     * @param value
     *     allowed object is
     *     {@link ResourceReference }
     *     
     */
    public void setOrganization(ResourceReference value) {
        this.organization = value;
    }

    /**
     * Gets the value of the role property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the role property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRole().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ROLE__PRACTITIONER_HJID")
    public List<CodeableConcept> getRole() {
        if (role == null) {
            role = new ArrayList<CodeableConcept>();
        }
        return this.role;
    }

    /**
     * 
     * 
     */
    public void setRole(List<CodeableConcept> role) {
        this.role = role;
    }

    /**
     * Gets the value of the specialty property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the specialty property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSpecialty().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SPECIALTY_PRACTITIONER_HJID")
    public List<CodeableConcept> getSpecialty() {
        if (specialty == null) {
            specialty = new ArrayList<CodeableConcept>();
        }
        return this.specialty;
    }

    /**
     * 
     * 
     */
    public void setSpecialty(List<CodeableConcept> specialty) {
        this.specialty = specialty;
    }

    /**
     * Gets the value of the period property.
     * 
     * @return
     *     possible object is
     *     {@link Period }
     *     
     */
    @ManyToOne(targetEntity = Period.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "PERIOD_PRACTITIONER_HJID")
    public Period getPeriod() {
        return period;
    }

    /**
     * Sets the value of the period property.
     * 
     * @param value
     *     allowed object is
     *     {@link Period }
     *     
     */
    public void setPeriod(Period value) {
        this.period = value;
    }

    /**
     * Gets the value of the location property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the location property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLocation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ResourceReference }
     * 
     * 
     */
    @OneToMany(targetEntity = ResourceReference.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "LOCATION__PRACTITIONER_HJID")
    public List<ResourceReference> getLocation() {
        if (location == null) {
            location = new ArrayList<ResourceReference>();
        }
        return this.location;
    }

    /**
     * 
     * 
     */
    public void setLocation(List<ResourceReference> location) {
        this.location = location;
    }

    /**
     * Gets the value of the qualification property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the qualification property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getQualification().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link PractitionerQualification }
     * 
     * 
     */
    @OneToMany(targetEntity = PractitionerQualification.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "QUALIFICATION_PRACTITIONER_H_0")
    public List<PractitionerQualification> getQualification() {
        if (qualification == null) {
            qualification = new ArrayList<PractitionerQualification>();
        }
        return this.qualification;
    }

    /**
     * 
     * 
     */
    public void setQualification(List<PractitionerQualification> qualification) {
        this.qualification = qualification;
    }

    /**
     * Gets the value of the communication property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the communication property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCommunication().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "COMMUNICATION_PRACTITIONER_H_0")
    public List<CodeableConcept> getCommunication() {
        if (communication == null) {
            communication = new ArrayList<CodeableConcept>();
        }
        return this.communication;
    }

    /**
     * 
     * 
     */
    public void setCommunication(List<CodeableConcept> communication) {
        this.communication = communication;
    }

    public Practitioner withIdentifier(Identifier... values) {
        if (values!= null) {
            for (Identifier value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public Practitioner withIdentifier(Collection<Identifier> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public Practitioner withIdentifier(List<Identifier> identifier) {
        setIdentifier(identifier);
        return this;
    }

    public Practitioner withName(HumanName value) {
        setName(value);
        return this;
    }

    public Practitioner withTelecom(Contact... values) {
        if (values!= null) {
            for (Contact value: values) {
                getTelecom().add(value);
            }
        }
        return this;
    }

    public Practitioner withTelecom(Collection<Contact> values) {
        if (values!= null) {
            getTelecom().addAll(values);
        }
        return this;
    }

    public Practitioner withTelecom(List<Contact> telecom) {
        setTelecom(telecom);
        return this;
    }

    public Practitioner withAddress(Address value) {
        setAddress(value);
        return this;
    }

    public Practitioner withGender(CodeableConcept value) {
        setGender(value);
        return this;
    }

    public Practitioner withBirthDate(DateTime value) {
        setBirthDate(value);
        return this;
    }

    public Practitioner withPhoto(Attachment... values) {
        if (values!= null) {
            for (Attachment value: values) {
                getPhoto().add(value);
            }
        }
        return this;
    }

    public Practitioner withPhoto(Collection<Attachment> values) {
        if (values!= null) {
            getPhoto().addAll(values);
        }
        return this;
    }

    public Practitioner withPhoto(List<Attachment> photo) {
        setPhoto(photo);
        return this;
    }

    public Practitioner withOrganization(ResourceReference value) {
        setOrganization(value);
        return this;
    }

    public Practitioner withRole(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getRole().add(value);
            }
        }
        return this;
    }

    public Practitioner withRole(Collection<CodeableConcept> values) {
        if (values!= null) {
            getRole().addAll(values);
        }
        return this;
    }

    public Practitioner withRole(List<CodeableConcept> role) {
        setRole(role);
        return this;
    }

    public Practitioner withSpecialty(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getSpecialty().add(value);
            }
        }
        return this;
    }

    public Practitioner withSpecialty(Collection<CodeableConcept> values) {
        if (values!= null) {
            getSpecialty().addAll(values);
        }
        return this;
    }

    public Practitioner withSpecialty(List<CodeableConcept> specialty) {
        setSpecialty(specialty);
        return this;
    }

    public Practitioner withPeriod(Period value) {
        setPeriod(value);
        return this;
    }

    public Practitioner withLocation(ResourceReference... values) {
        if (values!= null) {
            for (ResourceReference value: values) {
                getLocation().add(value);
            }
        }
        return this;
    }

    public Practitioner withLocation(Collection<ResourceReference> values) {
        if (values!= null) {
            getLocation().addAll(values);
        }
        return this;
    }

    public Practitioner withLocation(List<ResourceReference> location) {
        setLocation(location);
        return this;
    }

    public Practitioner withQualification(PractitionerQualification... values) {
        if (values!= null) {
            for (PractitionerQualification value: values) {
                getQualification().add(value);
            }
        }
        return this;
    }

    public Practitioner withQualification(Collection<PractitionerQualification> values) {
        if (values!= null) {
            getQualification().addAll(values);
        }
        return this;
    }

    public Practitioner withQualification(List<PractitionerQualification> qualification) {
        setQualification(qualification);
        return this;
    }

    public Practitioner withCommunication(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getCommunication().add(value);
            }
        }
        return this;
    }

    public Practitioner withCommunication(Collection<CodeableConcept> values) {
        if (values!= null) {
            getCommunication().addAll(values);
        }
        return this;
    }

    public Practitioner withCommunication(List<CodeableConcept> communication) {
        setCommunication(communication);
        return this;
    }

    @Override
    public Practitioner withLanguage(Code value) {
        setLanguage(value);
        return this;
    }

    @Override
    public Practitioner withText(Narrative value) {
        setText(value);
        return this;
    }

    @Override
    public Practitioner withContained(ResourceInline... values) {
        if (values!= null) {
            for (ResourceInline value: values) {
                getContained().add(value);
            }
        }
        return this;
    }

    @Override
    public Practitioner withContained(Collection<ResourceInline> values) {
        if (values!= null) {
            getContained().addAll(values);
        }
        return this;
    }

    @Override
    public Practitioner withContained(List<ResourceInline> contained) {
        setContained(contained);
        return this;
    }

    @Override
    public Practitioner withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Practitioner withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Practitioner withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public Practitioner withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public Practitioner withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public Practitioner withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public Practitioner withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Practitioner)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final Practitioner that = ((Practitioner) object);
        {
            List<Identifier> lhsIdentifier;
            lhsIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            List<Identifier> rhsIdentifier;
            rhsIdentifier = (((that.identifier!= null)&&(!that.identifier.isEmpty()))?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier)) {
                return false;
            }
        }
        {
            HumanName lhsName;
            lhsName = this.getName();
            HumanName rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            List<Contact> lhsTelecom;
            lhsTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            List<Contact> rhsTelecom;
            rhsTelecom = (((that.telecom!= null)&&(!that.telecom.isEmpty()))?that.getTelecom():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "telecom", lhsTelecom), LocatorUtils.property(thatLocator, "telecom", rhsTelecom), lhsTelecom, rhsTelecom)) {
                return false;
            }
        }
        {
            Address lhsAddress;
            lhsAddress = this.getAddress();
            Address rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            CodeableConcept lhsGender;
            lhsGender = this.getGender();
            CodeableConcept rhsGender;
            rhsGender = that.getGender();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "gender", lhsGender), LocatorUtils.property(thatLocator, "gender", rhsGender), lhsGender, rhsGender)) {
                return false;
            }
        }
        {
            DateTime lhsBirthDate;
            lhsBirthDate = this.getBirthDate();
            DateTime rhsBirthDate;
            rhsBirthDate = that.getBirthDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "birthDate", lhsBirthDate), LocatorUtils.property(thatLocator, "birthDate", rhsBirthDate), lhsBirthDate, rhsBirthDate)) {
                return false;
            }
        }
        {
            List<Attachment> lhsPhoto;
            lhsPhoto = (((this.photo!= null)&&(!this.photo.isEmpty()))?this.getPhoto():null);
            List<Attachment> rhsPhoto;
            rhsPhoto = (((that.photo!= null)&&(!that.photo.isEmpty()))?that.getPhoto():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "photo", lhsPhoto), LocatorUtils.property(thatLocator, "photo", rhsPhoto), lhsPhoto, rhsPhoto)) {
                return false;
            }
        }
        {
            ResourceReference lhsOrganization;
            lhsOrganization = this.getOrganization();
            ResourceReference rhsOrganization;
            rhsOrganization = that.getOrganization();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "organization", lhsOrganization), LocatorUtils.property(thatLocator, "organization", rhsOrganization), lhsOrganization, rhsOrganization)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsRole;
            lhsRole = (((this.role!= null)&&(!this.role.isEmpty()))?this.getRole():null);
            List<CodeableConcept> rhsRole;
            rhsRole = (((that.role!= null)&&(!that.role.isEmpty()))?that.getRole():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "role", lhsRole), LocatorUtils.property(thatLocator, "role", rhsRole), lhsRole, rhsRole)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsSpecialty;
            lhsSpecialty = (((this.specialty!= null)&&(!this.specialty.isEmpty()))?this.getSpecialty():null);
            List<CodeableConcept> rhsSpecialty;
            rhsSpecialty = (((that.specialty!= null)&&(!that.specialty.isEmpty()))?that.getSpecialty():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "specialty", lhsSpecialty), LocatorUtils.property(thatLocator, "specialty", rhsSpecialty), lhsSpecialty, rhsSpecialty)) {
                return false;
            }
        }
        {
            Period lhsPeriod;
            lhsPeriod = this.getPeriod();
            Period rhsPeriod;
            rhsPeriod = that.getPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "period", lhsPeriod), LocatorUtils.property(thatLocator, "period", rhsPeriod), lhsPeriod, rhsPeriod)) {
                return false;
            }
        }
        {
            List<ResourceReference> lhsLocation;
            lhsLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            List<ResourceReference> rhsLocation;
            rhsLocation = (((that.location!= null)&&(!that.location.isEmpty()))?that.getLocation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "location", lhsLocation), LocatorUtils.property(thatLocator, "location", rhsLocation), lhsLocation, rhsLocation)) {
                return false;
            }
        }
        {
            List<PractitionerQualification> lhsQualification;
            lhsQualification = (((this.qualification!= null)&&(!this.qualification.isEmpty()))?this.getQualification():null);
            List<PractitionerQualification> rhsQualification;
            rhsQualification = (((that.qualification!= null)&&(!that.qualification.isEmpty()))?that.getQualification():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "qualification", lhsQualification), LocatorUtils.property(thatLocator, "qualification", rhsQualification), lhsQualification, rhsQualification)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsCommunication;
            lhsCommunication = (((this.communication!= null)&&(!this.communication.isEmpty()))?this.getCommunication():null);
            List<CodeableConcept> rhsCommunication;
            rhsCommunication = (((that.communication!= null)&&(!that.communication.isEmpty()))?that.getCommunication():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "communication", lhsCommunication), LocatorUtils.property(thatLocator, "communication", rhsCommunication), lhsCommunication, rhsCommunication)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<Identifier> theIdentifier;
            theIdentifier = (((this.identifier!= null)&&(!this.identifier.isEmpty()))?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier);
        }
        {
            HumanName theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            List<Contact> theTelecom;
            theTelecom = (((this.telecom!= null)&&(!this.telecom.isEmpty()))?this.getTelecom():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "telecom", theTelecom), currentHashCode, theTelecom);
        }
        {
            Address theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            CodeableConcept theGender;
            theGender = this.getGender();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "gender", theGender), currentHashCode, theGender);
        }
        {
            DateTime theBirthDate;
            theBirthDate = this.getBirthDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "birthDate", theBirthDate), currentHashCode, theBirthDate);
        }
        {
            List<Attachment> thePhoto;
            thePhoto = (((this.photo!= null)&&(!this.photo.isEmpty()))?this.getPhoto():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "photo", thePhoto), currentHashCode, thePhoto);
        }
        {
            ResourceReference theOrganization;
            theOrganization = this.getOrganization();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "organization", theOrganization), currentHashCode, theOrganization);
        }
        {
            List<CodeableConcept> theRole;
            theRole = (((this.role!= null)&&(!this.role.isEmpty()))?this.getRole():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "role", theRole), currentHashCode, theRole);
        }
        {
            List<CodeableConcept> theSpecialty;
            theSpecialty = (((this.specialty!= null)&&(!this.specialty.isEmpty()))?this.getSpecialty():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "specialty", theSpecialty), currentHashCode, theSpecialty);
        }
        {
            Period thePeriod;
            thePeriod = this.getPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "period", thePeriod), currentHashCode, thePeriod);
        }
        {
            List<ResourceReference> theLocation;
            theLocation = (((this.location!= null)&&(!this.location.isEmpty()))?this.getLocation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "location", theLocation), currentHashCode, theLocation);
        }
        {
            List<PractitionerQualification> theQualification;
            theQualification = (((this.qualification!= null)&&(!this.qualification.isEmpty()))?this.getQualification():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "qualification", theQualification), currentHashCode, theQualification);
        }
        {
            List<CodeableConcept> theCommunication;
            theCommunication = (((this.communication!= null)&&(!this.communication.isEmpty()))?this.getCommunication():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "communication", theCommunication), currentHashCode, theCommunication);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
