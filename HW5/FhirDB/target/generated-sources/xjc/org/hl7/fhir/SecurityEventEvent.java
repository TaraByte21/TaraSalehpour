//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.04.19 at 02:48:31 AM MST 
//


package org.hl7.fhir;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
 * 
 * <p>Java class for SecurityEvent.Event complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SecurityEvent.Event">
 *   &lt;complexContent>
 *     &lt;extension base="{http://hl7.org/fhir}BackboneElement">
 *       &lt;sequence>
 *         &lt;element name="type" type="{http://hl7.org/fhir}CodeableConcept"/>
 *         &lt;element name="subtype" type="{http://hl7.org/fhir}CodeableConcept" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="action" type="{http://hl7.org/fhir}SecurityEventAction" minOccurs="0"/>
 *         &lt;element name="dateTime" type="{http://hl7.org/fhir}instant"/>
 *         &lt;element name="outcome" type="{http://hl7.org/fhir}SecurityEventOutcome" minOccurs="0"/>
 *         &lt;element name="outcomeDesc" type="{http://hl7.org/fhir}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SecurityEvent.Event", propOrder = {
    "type",
    "subtype",
    "action",
    "dateTime",
    "outcome",
    "outcomeDesc"
})
@Entity(name = "SecurityEventEvent")
@Table(name = "SECURITYEVENTEVENT")
public class SecurityEventEvent
    extends BackboneElement
    implements Equals, HashCode
{

    @XmlElement(required = true)
    protected CodeableConcept type;
    protected List<CodeableConcept> subtype;
    protected SecurityEventAction action;
    @XmlElement(required = true)
    protected Instant dateTime;
    protected SecurityEventOutcome outcome;
    protected org.hl7.fhir.String outcomeDesc;

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link CodeableConcept }
     *     
     */
    @ManyToOne(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "TYPE__SECURITYEVENTEVENT_HJID")
    public CodeableConcept getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link CodeableConcept }
     *     
     */
    public void setType(CodeableConcept value) {
        this.type = value;
    }

    /**
     * Gets the value of the subtype property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subtype property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubtype().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CodeableConcept }
     * 
     * 
     */
    @OneToMany(targetEntity = CodeableConcept.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "SUBTYPE_SECURITYEVENTEVENT_H_0")
    public List<CodeableConcept> getSubtype() {
        if (subtype == null) {
            subtype = new ArrayList<CodeableConcept>();
        }
        return this.subtype;
    }

    /**
     * 
     * 
     */
    public void setSubtype(List<CodeableConcept> subtype) {
        this.subtype = subtype;
    }

    /**
     * Gets the value of the action property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityEventAction }
     *     
     */
    @ManyToOne(targetEntity = SecurityEventAction.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "ACTION__SECURITYEVENTEVENT_H_0")
    public SecurityEventAction getAction() {
        return action;
    }

    /**
     * Sets the value of the action property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityEventAction }
     *     
     */
    public void setAction(SecurityEventAction value) {
        this.action = value;
    }

    /**
     * Gets the value of the dateTime property.
     * 
     * @return
     *     possible object is
     *     {@link Instant }
     *     
     */
    @ManyToOne(targetEntity = Instant.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "DATETIME_SECURITYEVENTEVENT__0")
    public Instant getDateTime() {
        return dateTime;
    }

    /**
     * Sets the value of the dateTime property.
     * 
     * @param value
     *     allowed object is
     *     {@link Instant }
     *     
     */
    public void setDateTime(Instant value) {
        this.dateTime = value;
    }

    /**
     * Gets the value of the outcome property.
     * 
     * @return
     *     possible object is
     *     {@link SecurityEventOutcome }
     *     
     */
    @ManyToOne(targetEntity = SecurityEventOutcome.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OUTCOME_SECURITYEVENTEVENT_H_0")
    public SecurityEventOutcome getOutcome() {
        return outcome;
    }

    /**
     * Sets the value of the outcome property.
     * 
     * @param value
     *     allowed object is
     *     {@link SecurityEventOutcome }
     *     
     */
    public void setOutcome(SecurityEventOutcome value) {
        this.outcome = value;
    }

    /**
     * Gets the value of the outcomeDesc property.
     * 
     * @return
     *     possible object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    @ManyToOne(targetEntity = org.hl7.fhir.String.class, cascade = {
        CascadeType.ALL
    })
    @JoinColumn(name = "OUTCOMEDESC_SECURITYEVENTEVE_0")
    public org.hl7.fhir.String getOutcomeDesc() {
        return outcomeDesc;
    }

    /**
     * Sets the value of the outcomeDesc property.
     * 
     * @param value
     *     allowed object is
     *     {@link org.hl7.fhir.String }
     *     
     */
    public void setOutcomeDesc(org.hl7.fhir.String value) {
        this.outcomeDesc = value;
    }

    public SecurityEventEvent withType(CodeableConcept value) {
        setType(value);
        return this;
    }

    public SecurityEventEvent withSubtype(CodeableConcept... values) {
        if (values!= null) {
            for (CodeableConcept value: values) {
                getSubtype().add(value);
            }
        }
        return this;
    }

    public SecurityEventEvent withSubtype(Collection<CodeableConcept> values) {
        if (values!= null) {
            getSubtype().addAll(values);
        }
        return this;
    }

    public SecurityEventEvent withSubtype(List<CodeableConcept> subtype) {
        setSubtype(subtype);
        return this;
    }

    public SecurityEventEvent withAction(SecurityEventAction value) {
        setAction(value);
        return this;
    }

    public SecurityEventEvent withDateTime(Instant value) {
        setDateTime(value);
        return this;
    }

    public SecurityEventEvent withOutcome(SecurityEventOutcome value) {
        setOutcome(value);
        return this;
    }

    public SecurityEventEvent withOutcomeDesc(org.hl7.fhir.String value) {
        setOutcomeDesc(value);
        return this;
    }

    @Override
    public SecurityEventEvent withModifierExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getModifierExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public SecurityEventEvent withModifierExtension(Collection<Extension> values) {
        if (values!= null) {
            getModifierExtension().addAll(values);
        }
        return this;
    }

    @Override
    public SecurityEventEvent withModifierExtension(List<Extension> modifierExtension) {
        setModifierExtension(modifierExtension);
        return this;
    }

    @Override
    public SecurityEventEvent withExtension(Extension... values) {
        if (values!= null) {
            for (Extension value: values) {
                getExtension().add(value);
            }
        }
        return this;
    }

    @Override
    public SecurityEventEvent withExtension(Collection<Extension> values) {
        if (values!= null) {
            getExtension().addAll(values);
        }
        return this;
    }

    @Override
    public SecurityEventEvent withExtension(List<Extension> extension) {
        setExtension(extension);
        return this;
    }

    @Override
    public SecurityEventEvent withId(java.lang.String value) {
        setId(value);
        return this;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SecurityEventEvent)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final SecurityEventEvent that = ((SecurityEventEvent) object);
        {
            CodeableConcept lhsType;
            lhsType = this.getType();
            CodeableConcept rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType)) {
                return false;
            }
        }
        {
            List<CodeableConcept> lhsSubtype;
            lhsSubtype = (((this.subtype!= null)&&(!this.subtype.isEmpty()))?this.getSubtype():null);
            List<CodeableConcept> rhsSubtype;
            rhsSubtype = (((that.subtype!= null)&&(!that.subtype.isEmpty()))?that.getSubtype():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subtype", lhsSubtype), LocatorUtils.property(thatLocator, "subtype", rhsSubtype), lhsSubtype, rhsSubtype)) {
                return false;
            }
        }
        {
            SecurityEventAction lhsAction;
            lhsAction = this.getAction();
            SecurityEventAction rhsAction;
            rhsAction = that.getAction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "action", lhsAction), LocatorUtils.property(thatLocator, "action", rhsAction), lhsAction, rhsAction)) {
                return false;
            }
        }
        {
            Instant lhsDateTime;
            lhsDateTime = this.getDateTime();
            Instant rhsDateTime;
            rhsDateTime = that.getDateTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dateTime", lhsDateTime), LocatorUtils.property(thatLocator, "dateTime", rhsDateTime), lhsDateTime, rhsDateTime)) {
                return false;
            }
        }
        {
            SecurityEventOutcome lhsOutcome;
            lhsOutcome = this.getOutcome();
            SecurityEventOutcome rhsOutcome;
            rhsOutcome = that.getOutcome();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outcome", lhsOutcome), LocatorUtils.property(thatLocator, "outcome", rhsOutcome), lhsOutcome, rhsOutcome)) {
                return false;
            }
        }
        {
            org.hl7.fhir.String lhsOutcomeDesc;
            lhsOutcomeDesc = this.getOutcomeDesc();
            org.hl7.fhir.String rhsOutcomeDesc;
            rhsOutcomeDesc = that.getOutcomeDesc();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "outcomeDesc", lhsOutcomeDesc), LocatorUtils.property(thatLocator, "outcomeDesc", rhsOutcomeDesc), lhsOutcomeDesc, rhsOutcomeDesc)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CodeableConcept theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType);
        }
        {
            List<CodeableConcept> theSubtype;
            theSubtype = (((this.subtype!= null)&&(!this.subtype.isEmpty()))?this.getSubtype():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subtype", theSubtype), currentHashCode, theSubtype);
        }
        {
            SecurityEventAction theAction;
            theAction = this.getAction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "action", theAction), currentHashCode, theAction);
        }
        {
            Instant theDateTime;
            theDateTime = this.getDateTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dateTime", theDateTime), currentHashCode, theDateTime);
        }
        {
            SecurityEventOutcome theOutcome;
            theOutcome = this.getOutcome();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outcome", theOutcome), currentHashCode, theOutcome);
        }
        {
            org.hl7.fhir.String theOutcomeDesc;
            theOutcomeDesc = this.getOutcomeDesc();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "outcomeDesc", theOutcomeDesc), currentHashCode, theOutcomeDesc);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
